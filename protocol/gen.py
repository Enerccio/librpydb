# THIS FILE IS AUTOGENERATED, DO NOT MODIFY!

# py23 compatible
from __future__ import print_function
from __future__ import division
from __future__ import unicode_literals
from __future__ import absolute_import

from .base import DAPBaseMessage, DAPObject
from ..utils import _fix_all

__undefined__ = object()


class DAPProtocolMessage(DAPBaseMessage):
    """
    Base class of requests, responses, and events.
    """
    @staticmethod
    def create(seq, type):
        return DAPProtocolMessage(seq, type)
    
    def __init__(self, seq, type):
        DAPBaseMessage.__init__(self)
        self.seq = seq
        self.type = type
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["seq"] = self.get_seq()
        kwargs["type"] = self.get_type()
        return kwargs
    
    def get_seq(self):
        return self.seq
    
    def set_seq(self, seq):
        self.seq = seq
        return self
    
    def get_type(self):
        return self.type
    
    def set_type(self, type):
        self.type = type
        return self
    
    def _serialize(self, me, override):
        DAPBaseMessage._serialize(self, me, ['seq', 'type'])
        
        # property: seq
        if "seq" not in override:
            self.serialize_scalar(me, "seq", self.seq)
        # property: type
        if "type" not in override:
            self.serialize_scalar(me, "type", self.type)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPBaseMessage._deserialize(args, kwargs, used_args, me, ['seq', 'type'])
        
        # property: seq
        if "seq" not in override:
            used_args.append("seq")
            args.append(cls.deserialize_scalar(me["seq"]))
        # property: type
        if "type" not in override:
            used_args.append("type")
            args.append(cls.deserialize_scalar(me["type"]))


class DAPRequest(DAPProtocolMessage):
    """
    
    """
    @staticmethod
    def create(seq, command, arguments=__undefined__):
        return DAPRequest(seq, "request", command, arguments=arguments)
    
    def __init__(self, seq, type, command, arguments=__undefined__):
        DAPProtocolMessage.__init__(self, seq, type)
        self.command = command
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["type"] = self.get_type()
        kwargs["command"] = self.get_command()
        if self.has_arguments():
            kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_command(self):
        return self.command
    
    def set_command(self, command):
        self.command = command
        return self
    
    def get_arguments(self):
        if self.arguments is __undefined__:
            raise ValueError("arguments is not defined")
        return self.arguments
    
    def get_arguments_or_default(self, default=None):
        if self.arguments is __undefined__:
            return default
        return self.arguments
    
    def has_arguments(self):
        return self.arguments is not __undefined__
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def clear_arguments(self):
        self.arguments = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPProtocolMessage._serialize(self, me, ['arguments', 'command', 'type'])
        
        # property: type
        if "type" not in override:
            self.serialize_scalar(me, "type", self.type)
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            if self.arguments is not __undefined__:
                self.serialize_scalar(me, "arguments", self.arguments)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPProtocolMessage._deserialize(args, kwargs, used_args, me, ['arguments', 'command', 'type'])
        
        # property: type
        if "type" not in override:
            used_args.append("type")
            args.append(cls.deserialize_scalar(me["type"]))
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            if me is not None and "arguments" in me:
                kwargs["arguments"] = cls.deserialize_scalar(me["arguments"])


class DAPEvent(DAPProtocolMessage):
    """
    
    """
    @staticmethod
    def create(seq, event, body=__undefined__):
        return DAPEvent(seq, "event", event, body=body)
    
    def __init__(self, seq, type, event, body=__undefined__):
        DAPProtocolMessage.__init__(self, seq, type)
        self.event = event
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["type"] = self.get_type()
        kwargs["event"] = self.get_event()
        if self.has_body():
            kwargs["body"] = self.get_body()
        return kwargs
    
    def get_event(self):
        return self.event
    
    def set_event(self, event):
        self.event = event
        return self
    
    def get_body(self):
        if self.body is __undefined__:
            raise ValueError("body is not defined")
        return self.body
    
    def get_body_or_default(self, default=None):
        if self.body is __undefined__:
            return default
        return self.body
    
    def has_body(self):
        return self.body is not __undefined__
    
    def set_body(self, body):
        self.body = body
        return self
    
    def clear_body(self):
        self.body = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPProtocolMessage._serialize(self, me, ['body', 'event', 'type'])
        
        # property: type
        if "type" not in override:
            self.serialize_scalar(me, "type", self.type)
        # property: event
        if "event" not in override:
            self.serialize_scalar(me, "event", self.event)
        # property: body
        if "body" not in override:
            if self.body is not __undefined__:
                self.serialize_scalar(me, "body", self.body)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPProtocolMessage._deserialize(args, kwargs, used_args, me, ['body', 'event', 'type'])
        
        # property: type
        if "type" not in override:
            used_args.append("type")
            args.append(cls.deserialize_scalar(me["type"]))
        # property: event
        if "event" not in override:
            used_args.append("event")
            args.append(cls.deserialize_scalar(me["event"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            if me is not None and "body" in me:
                kwargs["body"] = cls.deserialize_scalar(me["body"])


class DAPResponse(DAPProtocolMessage):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, command, message=__undefined__, body=__undefined__):
        return DAPResponse(seq, "response", request_seq, success, command, message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPProtocolMessage.__init__(self, seq, type)
        self.request_seq = request_seq
        self.success = success
        self.command = command
        self.message = message
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["type"] = self.get_type()
        kwargs["request_seq"] = self.get_request_seq()
        kwargs["success"] = self.get_success()
        kwargs["command"] = self.get_command()
        if self.has_message():
            kwargs["message"] = self.get_message()
        if self.has_body():
            kwargs["body"] = self.get_body()
        return kwargs
    
    def get_request_seq(self):
        return self.request_seq
    
    def set_request_seq(self, request_seq):
        self.request_seq = request_seq
        return self
    
    def get_success(self):
        return self.success
    
    def set_success(self, success):
        self.success = success
        return self
    
    def get_command(self):
        return self.command
    
    def set_command(self, command):
        self.command = command
        return self
    
    def get_message(self):
        if self.message is __undefined__:
            raise ValueError("message is not defined")
        return self.message
    
    def get_message_or_default(self, default=None):
        if self.message is __undefined__:
            return default
        return self.message
    
    def has_message(self):
        return self.message is not __undefined__
    
    def set_message(self, message):
        self.message = message
        return self
    
    def clear_message(self):
        self.message = __undefined__
        return self
    
    def get_body(self):
        if self.body is __undefined__:
            raise ValueError("body is not defined")
        return self.body
    
    def get_body_or_default(self, default=None):
        if self.body is __undefined__:
            return default
        return self.body
    
    def has_body(self):
        return self.body is not __undefined__
    
    def set_body(self, body):
        self.body = body
        return self
    
    def clear_body(self):
        self.body = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPProtocolMessage._serialize(self, me, ['body', 'command', 'message', 'request_seq', 'success', 'type'])
        
        # property: type
        if "type" not in override:
            self.serialize_scalar(me, "type", self.type)
        # property: request_seq
        if "request_seq" not in override:
            self.serialize_scalar(me, "request_seq", self.request_seq)
        # property: success
        if "success" not in override:
            self.serialize_scalar(me, "success", self.success)
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: message
        if "message" not in override:
            if self.message is not __undefined__:
                self.serialize_scalar(me, "message", self.message)
        # property: body
        if "body" not in override:
            if self.body is not __undefined__:
                self.serialize_scalar(me, "body", self.body)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPProtocolMessage._deserialize(args, kwargs, used_args, me, ['body', 'command', 'message', 'request_seq', 'success', 'type'])
        
        # property: type
        if "type" not in override:
            used_args.append("type")
            args.append(cls.deserialize_scalar(me["type"]))
        # property: request_seq
        if "request_seq" not in override:
            used_args.append("request_seq")
            args.append(cls.deserialize_scalar(me["request_seq"]))
        # property: success
        if "success" not in override:
            used_args.append("success")
            args.append(cls.deserialize_scalar(me["success"]))
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: message
        if "message" not in override:
            used_args.append("message")
            if me is not None and "message" in me:
                kwargs["message"] = cls.deserialize_scalar(me["message"])
        # property: body
        if "body" not in override:
            used_args.append("body")
            if me is not None and "body" in me:
                kwargs["body"] = cls.deserialize_scalar(me["body"])


class DAPErrorResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, command, body, message=__undefined__):
        return DAPErrorResponse(seq, "response", request_seq, success, command, body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body'])
        
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body'])
        
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPErrorResponseBody))


class DAPErrorResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(error=__undefined__):
        return DAPErrorResponseBody(error=error)
    
    def __init__(self, error=__undefined__):
        DAPObject.__init__(self)
        self.error = error
    
    def as_current_kwargs(self):
        kwargs = {}
        if self.has_error():
            kwargs["error"] = self.get_error()
        return kwargs
    
    def get_error(self):
        if self.error is __undefined__:
            raise ValueError("error is not defined")
        return self.error
    
    def get_error_or_default(self, default=None):
        if self.error is __undefined__:
            return default
        return self.error
    
    def has_error(self):
        return self.error is not __undefined__
    
    def set_error(self, error):
        self.error = error
        return self
    
    def clear_error(self):
        self.error = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: error
        if "error" not in override:
            if self.error is not __undefined__:
                me["error"] = self.error.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: error
        if "error" not in override:
            used_args.append("error")
            if me is not None and "error" in me:
                kwargs["error"] = cls.deserialize_as(me["error"], DAPMessage)



class DAPInitializedEvent(DAPEvent):
    """
    
    """
    @staticmethod
    def create(seq, body=__undefined__):
        return DAPInitializedEvent(seq, "event", "initialized", body=body)
    
    def __init__(self, seq, type, event, body=__undefined__):
        DAPEvent.__init__(self, seq, type, event, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["event"] = self.get_event()
        return kwargs
    
    def _serialize(self, me, override):
        DAPEvent._serialize(self, me, ['event'])
        
        # property: event
        if "event" not in override:
            self.serialize_scalar(me, "event", self.event)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPEvent._deserialize(args, kwargs, used_args, me, ['event'])
        
        # property: event
        if "event" not in override:
            used_args.append("event")
            args.append(cls.deserialize_scalar(me["event"]))


class DAPStoppedEvent(DAPEvent):
    """
    
    """
    @staticmethod
    def create(seq, body):
        return DAPStoppedEvent(seq, "event", "stopped", body=body)
    
    def __init__(self, seq, type, event, body):
        DAPEvent.__init__(self, seq, type, event, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["event"] = self.get_event()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPEvent._serialize(self, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            self.serialize_scalar(me, "event", self.event)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPEvent._deserialize(args, kwargs, used_args, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            used_args.append("event")
            args.append(cls.deserialize_scalar(me["event"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPStoppedEventBody))


class DAPStoppedEventBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(reason, description=__undefined__, thread_id=__undefined__, preserve_focus_hint=__undefined__, text=__undefined__, all_threads_stopped=__undefined__):
        return DAPStoppedEventBody(reason, description=description, thread_id=thread_id, preserve_focus_hint=preserve_focus_hint, text=text, all_threads_stopped=all_threads_stopped)
    
    def __init__(self, reason, description=__undefined__, thread_id=__undefined__, preserve_focus_hint=__undefined__, text=__undefined__, all_threads_stopped=__undefined__):
        DAPObject.__init__(self)
        self.reason = reason
        self.description = description
        self.threadId = thread_id
        self.preserveFocusHint = preserve_focus_hint
        self.text = text
        self.allThreadsStopped = all_threads_stopped
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["reason"] = self.get_reason()
        if self.has_description():
            kwargs["description"] = self.get_description()
        if self.has_thread_id():
            kwargs["threadId"] = self.get_thread_id()
        if self.has_preserve_focus_hint():
            kwargs["preserveFocusHint"] = self.get_preserve_focus_hint()
        if self.has_text():
            kwargs["text"] = self.get_text()
        if self.has_all_threads_stopped():
            kwargs["allThreadsStopped"] = self.get_all_threads_stopped()
        return kwargs
    
    def get_reason(self):
        return self.reason
    
    def set_reason(self, reason):
        self.reason = reason
        return self
    
    def get_description(self):
        if self.description is __undefined__:
            raise ValueError("description is not defined")
        return self.description
    
    def get_description_or_default(self, default=None):
        if self.description is __undefined__:
            return default
        return self.description
    
    def has_description(self):
        return self.description is not __undefined__
    
    def set_description(self, description):
        self.description = description
        return self
    
    def clear_description(self):
        self.description = __undefined__
        return self
    
    def get_thread_id(self):
        if self.threadId is __undefined__:
            raise ValueError("threadId is not defined")
        return self.threadId
    
    def get_thread_id_or_default(self, default=None):
        if self.threadId is __undefined__:
            return default
        return self.threadId
    
    def has_thread_id(self):
        return self.threadId is not __undefined__
    
    def set_thread_id(self, thread_id):
        self.threadId = thread_id
        return self
    
    def clear_thread_id(self):
        self.threadId = __undefined__
        return self
    
    def get_preserve_focus_hint(self):
        if self.preserveFocusHint is __undefined__:
            raise ValueError("preserveFocusHint is not defined")
        return self.preserveFocusHint
    
    def get_preserve_focus_hint_or_default(self, default=None):
        if self.preserveFocusHint is __undefined__:
            return default
        return self.preserveFocusHint
    
    def has_preserve_focus_hint(self):
        return self.preserveFocusHint is not __undefined__
    
    def set_preserve_focus_hint(self, preserve_focus_hint):
        self.preserveFocusHint = preserve_focus_hint
        return self
    
    def clear_preserve_focus_hint(self):
        self.preserveFocusHint = __undefined__
        return self
    
    def get_text(self):
        if self.text is __undefined__:
            raise ValueError("text is not defined")
        return self.text
    
    def get_text_or_default(self, default=None):
        if self.text is __undefined__:
            return default
        return self.text
    
    def has_text(self):
        return self.text is not __undefined__
    
    def set_text(self, text):
        self.text = text
        return self
    
    def clear_text(self):
        self.text = __undefined__
        return self
    
    def get_all_threads_stopped(self):
        if self.allThreadsStopped is __undefined__:
            raise ValueError("allThreadsStopped is not defined")
        return self.allThreadsStopped
    
    def get_all_threads_stopped_or_default(self, default=None):
        if self.allThreadsStopped is __undefined__:
            return default
        return self.allThreadsStopped
    
    def has_all_threads_stopped(self):
        return self.allThreadsStopped is not __undefined__
    
    def set_all_threads_stopped(self, all_threads_stopped):
        self.allThreadsStopped = all_threads_stopped
        return self
    
    def clear_all_threads_stopped(self):
        self.allThreadsStopped = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: reason
        if "reason" not in override:
            self.serialize_scalar(me, "reason", self.reason)
        # property: description
        if "description" not in override:
            if self.description is not __undefined__:
                self.serialize_scalar(me, "description", self.description)
        # property: threadId
        if "threadId" not in override:
            if self.threadId is not __undefined__:
                self.serialize_scalar(me, "threadId", self.threadId)
        # property: preserveFocusHint
        if "preserveFocusHint" not in override:
            if self.preserveFocusHint is not __undefined__:
                self.serialize_scalar(me, "preserveFocusHint", self.preserveFocusHint)
        # property: text
        if "text" not in override:
            if self.text is not __undefined__:
                self.serialize_scalar(me, "text", self.text)
        # property: allThreadsStopped
        if "allThreadsStopped" not in override:
            if self.allThreadsStopped is not __undefined__:
                self.serialize_scalar(me, "allThreadsStopped", self.allThreadsStopped)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: reason
        if "reason" not in override:
            used_args.append("reason")
            args.append(cls.deserialize_scalar(me["reason"]))
        # property: description
        if "description" not in override:
            used_args.append("description")
            if me is not None and "description" in me:
                kwargs["description"] = cls.deserialize_scalar(me["description"])
        # property: threadId
        if "threadId" not in override:
            used_args.append("threadId")
            if me is not None and "threadId" in me:
                kwargs["thread_id"] = cls.deserialize_scalar(me["threadId"])
        # property: preserveFocusHint
        if "preserveFocusHint" not in override:
            used_args.append("preserveFocusHint")
            if me is not None and "preserveFocusHint" in me:
                kwargs["preserve_focus_hint"] = cls.deserialize_scalar(me["preserveFocusHint"])
        # property: text
        if "text" not in override:
            used_args.append("text")
            if me is not None and "text" in me:
                kwargs["text"] = cls.deserialize_scalar(me["text"])
        # property: allThreadsStopped
        if "allThreadsStopped" not in override:
            used_args.append("allThreadsStopped")
            if me is not None and "allThreadsStopped" in me:
                kwargs["all_threads_stopped"] = cls.deserialize_scalar(me["allThreadsStopped"])



class DAPContinuedEvent(DAPEvent):
    """
    
    """
    @staticmethod
    def create(seq, body):
        return DAPContinuedEvent(seq, "event", "continued", body=body)
    
    def __init__(self, seq, type, event, body):
        DAPEvent.__init__(self, seq, type, event, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["event"] = self.get_event()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPEvent._serialize(self, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            self.serialize_scalar(me, "event", self.event)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPEvent._deserialize(args, kwargs, used_args, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            used_args.append("event")
            args.append(cls.deserialize_scalar(me["event"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPContinuedEventBody))


class DAPContinuedEventBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(thread_id, all_threads_continued=__undefined__):
        return DAPContinuedEventBody(thread_id, all_threads_continued=all_threads_continued)
    
    def __init__(self, thread_id, all_threads_continued=__undefined__):
        DAPObject.__init__(self)
        self.threadId = thread_id
        self.allThreadsContinued = all_threads_continued
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["threadId"] = self.get_thread_id()
        if self.has_all_threads_continued():
            kwargs["allThreadsContinued"] = self.get_all_threads_continued()
        return kwargs
    
    def get_thread_id(self):
        return self.threadId
    
    def set_thread_id(self, thread_id):
        self.threadId = thread_id
        return self
    
    def get_all_threads_continued(self):
        if self.allThreadsContinued is __undefined__:
            raise ValueError("allThreadsContinued is not defined")
        return self.allThreadsContinued
    
    def get_all_threads_continued_or_default(self, default=None):
        if self.allThreadsContinued is __undefined__:
            return default
        return self.allThreadsContinued
    
    def has_all_threads_continued(self):
        return self.allThreadsContinued is not __undefined__
    
    def set_all_threads_continued(self, all_threads_continued):
        self.allThreadsContinued = all_threads_continued
        return self
    
    def clear_all_threads_continued(self):
        self.allThreadsContinued = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: threadId
        if "threadId" not in override:
            self.serialize_scalar(me, "threadId", self.threadId)
        # property: allThreadsContinued
        if "allThreadsContinued" not in override:
            if self.allThreadsContinued is not __undefined__:
                self.serialize_scalar(me, "allThreadsContinued", self.allThreadsContinued)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: threadId
        if "threadId" not in override:
            used_args.append("threadId")
            args.append(cls.deserialize_scalar(me["threadId"]))
        # property: allThreadsContinued
        if "allThreadsContinued" not in override:
            used_args.append("allThreadsContinued")
            if me is not None and "allThreadsContinued" in me:
                kwargs["all_threads_continued"] = cls.deserialize_scalar(me["allThreadsContinued"])



class DAPExitedEvent(DAPEvent):
    """
    
    """
    @staticmethod
    def create(seq, body):
        return DAPExitedEvent(seq, "event", "exited", body=body)
    
    def __init__(self, seq, type, event, body):
        DAPEvent.__init__(self, seq, type, event, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["event"] = self.get_event()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPEvent._serialize(self, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            self.serialize_scalar(me, "event", self.event)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPEvent._deserialize(args, kwargs, used_args, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            used_args.append("event")
            args.append(cls.deserialize_scalar(me["event"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPExitedEventBody))


class DAPExitedEventBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(exit_code):
        return DAPExitedEventBody(exit_code)
    
    def __init__(self, exit_code):
        DAPObject.__init__(self)
        self.exitCode = exit_code
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["exitCode"] = self.get_exit_code()
        return kwargs
    
    def get_exit_code(self):
        return self.exitCode
    
    def set_exit_code(self, exit_code):
        self.exitCode = exit_code
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: exitCode
        if "exitCode" not in override:
            self.serialize_scalar(me, "exitCode", self.exitCode)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: exitCode
        if "exitCode" not in override:
            used_args.append("exitCode")
            args.append(cls.deserialize_scalar(me["exitCode"]))



class DAPTerminatedEvent(DAPEvent):
    """
    
    """
    @staticmethod
    def create(seq, body=__undefined__):
        return DAPTerminatedEvent(seq, "event", "terminated", body=body)
    
    def __init__(self, seq, type, event, body=__undefined__):
        DAPEvent.__init__(self, seq, type, event, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["event"] = self.get_event()
        if self.has_body():
            kwargs["body"] = self.get_body()
        return kwargs
    
    def _serialize(self, me, override):
        DAPEvent._serialize(self, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            self.serialize_scalar(me, "event", self.event)
        # property: body
        if "body" not in override:
            if self.body is not __undefined__:
                me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPEvent._deserialize(args, kwargs, used_args, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            used_args.append("event")
            args.append(cls.deserialize_scalar(me["event"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            if me is not None and "body" in me:
                kwargs["body"] = cls.deserialize_as(me["body"], DAPTerminatedEventBody)


class DAPTerminatedEventBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(restart=__undefined__):
        return DAPTerminatedEventBody(restart=restart)
    
    def __init__(self, restart=__undefined__):
        DAPObject.__init__(self)
        self.restart = restart
    
    def as_current_kwargs(self):
        kwargs = {}
        if self.has_restart():
            kwargs["restart"] = self.get_restart()
        return kwargs
    
    def get_restart(self):
        if self.restart is __undefined__:
            raise ValueError("restart is not defined")
        return self.restart
    
    def get_restart_or_default(self, default=None):
        if self.restart is __undefined__:
            return default
        return self.restart
    
    def has_restart(self):
        return self.restart is not __undefined__
    
    def set_restart(self, restart):
        self.restart = restart
        return self
    
    def clear_restart(self):
        self.restart = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: restart
        if "restart" not in override:
            if self.restart is not __undefined__:
                self.serialize_scalar(me, "restart", self.restart)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: restart
        if "restart" not in override:
            used_args.append("restart")
            if me is not None and "restart" in me:
                kwargs["restart"] = cls.deserialize_scalar(me["restart"])



class DAPThreadEvent(DAPEvent):
    """
    
    """
    @staticmethod
    def create(seq, body):
        return DAPThreadEvent(seq, "event", "thread", body=body)
    
    def __init__(self, seq, type, event, body):
        DAPEvent.__init__(self, seq, type, event, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["event"] = self.get_event()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPEvent._serialize(self, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            self.serialize_scalar(me, "event", self.event)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPEvent._deserialize(args, kwargs, used_args, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            used_args.append("event")
            args.append(cls.deserialize_scalar(me["event"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPThreadEventBody))


class DAPThreadEventBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(reason, thread_id):
        return DAPThreadEventBody(reason, thread_id)
    
    def __init__(self, reason, thread_id):
        DAPObject.__init__(self)
        self.reason = reason
        self.threadId = thread_id
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["reason"] = self.get_reason()
        kwargs["threadId"] = self.get_thread_id()
        return kwargs
    
    def get_reason(self):
        return self.reason
    
    def set_reason(self, reason):
        self.reason = reason
        return self
    
    def get_thread_id(self):
        return self.threadId
    
    def set_thread_id(self, thread_id):
        self.threadId = thread_id
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: reason
        if "reason" not in override:
            self.serialize_scalar(me, "reason", self.reason)
        # property: threadId
        if "threadId" not in override:
            self.serialize_scalar(me, "threadId", self.threadId)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: reason
        if "reason" not in override:
            used_args.append("reason")
            args.append(cls.deserialize_scalar(me["reason"]))
        # property: threadId
        if "threadId" not in override:
            used_args.append("threadId")
            args.append(cls.deserialize_scalar(me["threadId"]))



class DAPOutputEvent(DAPEvent):
    """
    
    """
    @staticmethod
    def create(seq, body):
        return DAPOutputEvent(seq, "event", "output", body=body)
    
    def __init__(self, seq, type, event, body):
        DAPEvent.__init__(self, seq, type, event, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["event"] = self.get_event()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPEvent._serialize(self, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            self.serialize_scalar(me, "event", self.event)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPEvent._deserialize(args, kwargs, used_args, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            used_args.append("event")
            args.append(cls.deserialize_scalar(me["event"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPOutputEventBody))


class DAPOutputEventBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(output, category=__undefined__, variables_reference=__undefined__, source=__undefined__, line=__undefined__, column=__undefined__, data=__undefined__):
        return DAPOutputEventBody(output, category=category, variables_reference=variables_reference, source=source, line=line, column=column, data=data)
    
    def __init__(self, output, category=__undefined__, variables_reference=__undefined__, source=__undefined__, line=__undefined__, column=__undefined__, data=__undefined__):
        DAPObject.__init__(self)
        self.category = category
        self.output = output
        self.variablesReference = variables_reference
        self.source = source
        self.line = line
        self.column = column
        self.data = data
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["output"] = self.get_output()
        if self.has_category():
            kwargs["category"] = self.get_category()
        if self.has_variables_reference():
            kwargs["variablesReference"] = self.get_variables_reference()
        if self.has_source():
            kwargs["source"] = self.get_source()
        if self.has_line():
            kwargs["line"] = self.get_line()
        if self.has_column():
            kwargs["column"] = self.get_column()
        if self.has_data():
            kwargs["data"] = self.get_data()
        return kwargs
    
    def get_category(self):
        if self.category is __undefined__:
            raise ValueError("category is not defined")
        return self.category
    
    def get_category_or_default(self, default=None):
        if self.category is __undefined__:
            return default
        return self.category
    
    def has_category(self):
        return self.category is not __undefined__
    
    def set_category(self, category):
        self.category = category
        return self
    
    def clear_category(self):
        self.category = __undefined__
        return self
    
    def get_output(self):
        return self.output
    
    def set_output(self, output):
        self.output = output
        return self
    
    def get_variables_reference(self):
        if self.variablesReference is __undefined__:
            raise ValueError("variablesReference is not defined")
        return self.variablesReference
    
    def get_variables_reference_or_default(self, default=None):
        if self.variablesReference is __undefined__:
            return default
        return self.variablesReference
    
    def has_variables_reference(self):
        return self.variablesReference is not __undefined__
    
    def set_variables_reference(self, variables_reference):
        self.variablesReference = variables_reference
        return self
    
    def clear_variables_reference(self):
        self.variablesReference = __undefined__
        return self
    
    def get_source(self):
        if self.source is __undefined__:
            raise ValueError("source is not defined")
        return self.source
    
    def get_source_or_default(self, default=None):
        if self.source is __undefined__:
            return default
        return self.source
    
    def has_source(self):
        return self.source is not __undefined__
    
    def set_source(self, source):
        self.source = source
        return self
    
    def clear_source(self):
        self.source = __undefined__
        return self
    
    def get_line(self):
        if self.line is __undefined__:
            raise ValueError("line is not defined")
        return self.line
    
    def get_line_or_default(self, default=None):
        if self.line is __undefined__:
            return default
        return self.line
    
    def has_line(self):
        return self.line is not __undefined__
    
    def set_line(self, line):
        self.line = line
        return self
    
    def clear_line(self):
        self.line = __undefined__
        return self
    
    def get_column(self):
        if self.column is __undefined__:
            raise ValueError("column is not defined")
        return self.column
    
    def get_column_or_default(self, default=None):
        if self.column is __undefined__:
            return default
        return self.column
    
    def has_column(self):
        return self.column is not __undefined__
    
    def set_column(self, column):
        self.column = column
        return self
    
    def clear_column(self):
        self.column = __undefined__
        return self
    
    def get_data(self):
        if self.data is __undefined__:
            raise ValueError("data is not defined")
        return self.data
    
    def get_data_or_default(self, default=None):
        if self.data is __undefined__:
            return default
        return self.data
    
    def has_data(self):
        return self.data is not __undefined__
    
    def set_data(self, data):
        self.data = data
        return self
    
    def clear_data(self):
        self.data = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: category
        if "category" not in override:
            if self.category is not __undefined__:
                self.serialize_scalar(me, "category", self.category)
        # property: output
        if "output" not in override:
            self.serialize_scalar(me, "output", self.output)
        # property: variablesReference
        if "variablesReference" not in override:
            if self.variablesReference is not __undefined__:
                self.serialize_scalar(me, "variablesReference", self.variablesReference)
        # property: source
        if "source" not in override:
            if self.source is not __undefined__:
                me["source"] = self.source.serialize()
        # property: line
        if "line" not in override:
            if self.line is not __undefined__:
                self.serialize_scalar(me, "line", self.line)
        # property: column
        if "column" not in override:
            if self.column is not __undefined__:
                self.serialize_scalar(me, "column", self.column)
        # property: data
        if "data" not in override:
            if self.data is not __undefined__:
                self.serialize_scalar(me, "data", self.data)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: category
        if "category" not in override:
            used_args.append("category")
            if me is not None and "category" in me:
                kwargs["category"] = cls.deserialize_scalar(me["category"])
        # property: output
        if "output" not in override:
            used_args.append("output")
            args.append(cls.deserialize_scalar(me["output"]))
        # property: variablesReference
        if "variablesReference" not in override:
            used_args.append("variablesReference")
            if me is not None and "variablesReference" in me:
                kwargs["variables_reference"] = cls.deserialize_scalar(me["variablesReference"])
        # property: source
        if "source" not in override:
            used_args.append("source")
            if me is not None and "source" in me:
                kwargs["source"] = cls.deserialize_as(me["source"], DAPSource)
        # property: line
        if "line" not in override:
            used_args.append("line")
            if me is not None and "line" in me:
                kwargs["line"] = cls.deserialize_scalar(me["line"])
        # property: column
        if "column" not in override:
            used_args.append("column")
            if me is not None and "column" in me:
                kwargs["column"] = cls.deserialize_scalar(me["column"])
        # property: data
        if "data" not in override:
            used_args.append("data")
            if me is not None and "data" in me:
                kwargs["data"] = cls.deserialize_scalar(me["data"])



class DAPBreakpointEvent(DAPEvent):
    """
    
    """
    @staticmethod
    def create(seq, body):
        return DAPBreakpointEvent(seq, "event", "breakpoint", body=body)
    
    def __init__(self, seq, type, event, body):
        DAPEvent.__init__(self, seq, type, event, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["event"] = self.get_event()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPEvent._serialize(self, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            self.serialize_scalar(me, "event", self.event)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPEvent._deserialize(args, kwargs, used_args, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            used_args.append("event")
            args.append(cls.deserialize_scalar(me["event"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPBreakpointEventBody))


class DAPBreakpointEventBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(reason, breakpoint):
        return DAPBreakpointEventBody(reason, breakpoint)
    
    def __init__(self, reason, breakpoint):
        DAPObject.__init__(self)
        self.reason = reason
        self.breakpoint = breakpoint
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["reason"] = self.get_reason()
        kwargs["breakpoint"] = self.get_breakpoint()
        return kwargs
    
    def get_reason(self):
        return self.reason
    
    def set_reason(self, reason):
        self.reason = reason
        return self
    
    def get_breakpoint(self):
        return self.breakpoint
    
    def set_breakpoint(self, breakpoint):
        self.breakpoint = breakpoint
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: reason
        if "reason" not in override:
            self.serialize_scalar(me, "reason", self.reason)
        # property: breakpoint
        if "breakpoint" not in override:
            me["breakpoint"] = self.breakpoint.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: reason
        if "reason" not in override:
            used_args.append("reason")
            args.append(cls.deserialize_scalar(me["reason"]))
        # property: breakpoint
        if "breakpoint" not in override:
            used_args.append("breakpoint")
            args.append(cls.deserialize_as(me["breakpoint"], DAPBreakpoint))



class DAPModuleEvent(DAPEvent):
    """
    
    """
    @staticmethod
    def create(seq, body):
        return DAPModuleEvent(seq, "event", "module", body=body)
    
    def __init__(self, seq, type, event, body):
        DAPEvent.__init__(self, seq, type, event, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["event"] = self.get_event()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPEvent._serialize(self, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            self.serialize_scalar(me, "event", self.event)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPEvent._deserialize(args, kwargs, used_args, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            used_args.append("event")
            args.append(cls.deserialize_scalar(me["event"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPModuleEventBody))


class DAPModuleEventBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(reason, module):
        return DAPModuleEventBody(reason, module)
    
    def __init__(self, reason, module):
        DAPObject.__init__(self)
        self.reason = reason
        self.module = module
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["reason"] = self.get_reason()
        kwargs["module"] = self.get_module()
        return kwargs
    
    def get_reason(self):
        return self.reason
    
    def set_reason(self, reason):
        self.reason = reason
        return self
    
    def get_module(self):
        return self.module
    
    def set_module(self, module):
        self.module = module
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: reason
        if "reason" not in override:
            self.serialize_scalar(me, "reason", self.reason)
        # property: module
        if "module" not in override:
            me["module"] = self.module.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: reason
        if "reason" not in override:
            used_args.append("reason")
            args.append(cls.deserialize_scalar(me["reason"]))
        # property: module
        if "module" not in override:
            used_args.append("module")
            args.append(cls.deserialize_as(me["module"], DAPModule))



class DAPLoadedSourceEvent(DAPEvent):
    """
    
    """
    @staticmethod
    def create(seq, body):
        return DAPLoadedSourceEvent(seq, "event", "loadedSource", body=body)
    
    def __init__(self, seq, type, event, body):
        DAPEvent.__init__(self, seq, type, event, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["event"] = self.get_event()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPEvent._serialize(self, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            self.serialize_scalar(me, "event", self.event)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPEvent._deserialize(args, kwargs, used_args, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            used_args.append("event")
            args.append(cls.deserialize_scalar(me["event"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPLoadedSourceEventBody))


class DAPLoadedSourceEventBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(reason, source):
        return DAPLoadedSourceEventBody(reason, source)
    
    def __init__(self, reason, source):
        DAPObject.__init__(self)
        self.reason = reason
        self.source = source
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["reason"] = self.get_reason()
        kwargs["source"] = self.get_source()
        return kwargs
    
    def get_reason(self):
        return self.reason
    
    def set_reason(self, reason):
        self.reason = reason
        return self
    
    def get_source(self):
        return self.source
    
    def set_source(self, source):
        self.source = source
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: reason
        if "reason" not in override:
            self.serialize_scalar(me, "reason", self.reason)
        # property: source
        if "source" not in override:
            me["source"] = self.source.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: reason
        if "reason" not in override:
            used_args.append("reason")
            args.append(cls.deserialize_scalar(me["reason"]))
        # property: source
        if "source" not in override:
            used_args.append("source")
            args.append(cls.deserialize_as(me["source"], DAPSource))



class DAPProcessEvent(DAPEvent):
    """
    
    """
    @staticmethod
    def create(seq, body):
        return DAPProcessEvent(seq, "event", "process", body=body)
    
    def __init__(self, seq, type, event, body):
        DAPEvent.__init__(self, seq, type, event, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["event"] = self.get_event()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPEvent._serialize(self, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            self.serialize_scalar(me, "event", self.event)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPEvent._deserialize(args, kwargs, used_args, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            used_args.append("event")
            args.append(cls.deserialize_scalar(me["event"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPProcessEventBody))


class DAPProcessEventBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(name, system_process_id=__undefined__, is_local_process=__undefined__, start_method=__undefined__):
        return DAPProcessEventBody(name, system_process_id=system_process_id, is_local_process=is_local_process, start_method=start_method)
    
    def __init__(self, name, system_process_id=__undefined__, is_local_process=__undefined__, start_method=__undefined__):
        DAPObject.__init__(self)
        self.name = name
        self.systemProcessId = system_process_id
        self.isLocalProcess = is_local_process
        self.startMethod = start_method
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["name"] = self.get_name()
        if self.has_system_process_id():
            kwargs["systemProcessId"] = self.get_system_process_id()
        if self.has_is_local_process():
            kwargs["isLocalProcess"] = self.get_is_local_process()
        if self.has_start_method():
            kwargs["startMethod"] = self.get_start_method()
        return kwargs
    
    def get_name(self):
        return self.name
    
    def set_name(self, name):
        self.name = name
        return self
    
    def get_system_process_id(self):
        if self.systemProcessId is __undefined__:
            raise ValueError("systemProcessId is not defined")
        return self.systemProcessId
    
    def get_system_process_id_or_default(self, default=None):
        if self.systemProcessId is __undefined__:
            return default
        return self.systemProcessId
    
    def has_system_process_id(self):
        return self.systemProcessId is not __undefined__
    
    def set_system_process_id(self, system_process_id):
        self.systemProcessId = system_process_id
        return self
    
    def clear_system_process_id(self):
        self.systemProcessId = __undefined__
        return self
    
    def get_is_local_process(self):
        if self.isLocalProcess is __undefined__:
            raise ValueError("isLocalProcess is not defined")
        return self.isLocalProcess
    
    def get_is_local_process_or_default(self, default=None):
        if self.isLocalProcess is __undefined__:
            return default
        return self.isLocalProcess
    
    def has_is_local_process(self):
        return self.isLocalProcess is not __undefined__
    
    def set_is_local_process(self, is_local_process):
        self.isLocalProcess = is_local_process
        return self
    
    def clear_is_local_process(self):
        self.isLocalProcess = __undefined__
        return self
    
    def get_start_method(self):
        if self.startMethod is __undefined__:
            raise ValueError("startMethod is not defined")
        return self.startMethod
    
    def get_start_method_or_default(self, default=None):
        if self.startMethod is __undefined__:
            return default
        return self.startMethod
    
    def has_start_method(self):
        return self.startMethod is not __undefined__
    
    def set_start_method(self, start_method):
        self.startMethod = start_method
        return self
    
    def clear_start_method(self):
        self.startMethod = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: name
        if "name" not in override:
            self.serialize_scalar(me, "name", self.name)
        # property: systemProcessId
        if "systemProcessId" not in override:
            if self.systemProcessId is not __undefined__:
                self.serialize_scalar(me, "systemProcessId", self.systemProcessId)
        # property: isLocalProcess
        if "isLocalProcess" not in override:
            if self.isLocalProcess is not __undefined__:
                self.serialize_scalar(me, "isLocalProcess", self.isLocalProcess)
        # property: startMethod
        if "startMethod" not in override:
            if self.startMethod is not __undefined__:
                self.serialize_scalar(me, "startMethod", self.startMethod)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: name
        if "name" not in override:
            used_args.append("name")
            args.append(cls.deserialize_scalar(me["name"]))
        # property: systemProcessId
        if "systemProcessId" not in override:
            used_args.append("systemProcessId")
            if me is not None and "systemProcessId" in me:
                kwargs["system_process_id"] = cls.deserialize_scalar(me["systemProcessId"])
        # property: isLocalProcess
        if "isLocalProcess" not in override:
            used_args.append("isLocalProcess")
            if me is not None and "isLocalProcess" in me:
                kwargs["is_local_process"] = cls.deserialize_scalar(me["isLocalProcess"])
        # property: startMethod
        if "startMethod" not in override:
            used_args.append("startMethod")
            if me is not None and "startMethod" in me:
                kwargs["start_method"] = cls.deserialize_scalar(me["startMethod"])



class DAPCapabilitiesEvent(DAPEvent):
    """
    
    """
    @staticmethod
    def create(seq, body):
        return DAPCapabilitiesEvent(seq, "event", "capabilities", body=body)
    
    def __init__(self, seq, type, event, body):
        DAPEvent.__init__(self, seq, type, event, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["event"] = self.get_event()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPEvent._serialize(self, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            self.serialize_scalar(me, "event", self.event)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPEvent._deserialize(args, kwargs, used_args, me, ['body', 'event'])
        
        # property: event
        if "event" not in override:
            used_args.append("event")
            args.append(cls.deserialize_scalar(me["event"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPCapabilitiesEventBody))


class DAPCapabilitiesEventBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(capabilities):
        return DAPCapabilitiesEventBody(capabilities)
    
    def __init__(self, capabilities):
        DAPObject.__init__(self)
        self.capabilities = capabilities
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["capabilities"] = self.get_capabilities()
        return kwargs
    
    def get_capabilities(self):
        return self.capabilities
    
    def set_capabilities(self, capabilities):
        self.capabilities = capabilities
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: capabilities
        if "capabilities" not in override:
            me["capabilities"] = self.capabilities.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: capabilities
        if "capabilities" not in override:
            used_args.append("capabilities")
            args.append(cls.deserialize_as(me["capabilities"], DAPCapabilities))



class DAPRunInTerminalRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPRunInTerminalRequest(seq, "request", "runInTerminal", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPRunInTerminalRequestArguments))


class DAPRunInTerminalRequestArguments(DAPObject):
    """
    Arguments for 'runInTerminal' request.
    """
    @staticmethod
    def create(cwd, args, kind=__undefined__, title=__undefined__, env=__undefined__):
        return DAPRunInTerminalRequestArguments(cwd, args, kind=kind, title=title, env=env)
    
    def __init__(self, cwd, args, kind=__undefined__, title=__undefined__, env=__undefined__):
        DAPObject.__init__(self)
        self.kind = kind
        self.title = title
        self.cwd = cwd
        self.args = args
        self.env = env
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["cwd"] = self.get_cwd()
        kwargs["args"] = self.get_args()
        if self.has_kind():
            kwargs["kind"] = self.get_kind()
        if self.has_title():
            kwargs["title"] = self.get_title()
        if self.has_env():
            kwargs["env"] = self.get_env()
        return kwargs
    
    def get_kind(self):
        if self.kind is __undefined__:
            raise ValueError("kind is not defined")
        return self.kind
    
    def get_kind_or_default(self, default=None):
        if self.kind is __undefined__:
            return default
        return self.kind
    
    def has_kind(self):
        return self.kind is not __undefined__
    
    def set_kind(self, kind):
        self.kind = kind
        return self
    
    def clear_kind(self):
        self.kind = __undefined__
        return self
    
    def get_title(self):
        if self.title is __undefined__:
            raise ValueError("title is not defined")
        return self.title
    
    def get_title_or_default(self, default=None):
        if self.title is __undefined__:
            return default
        return self.title
    
    def has_title(self):
        return self.title is not __undefined__
    
    def set_title(self, title):
        self.title = title
        return self
    
    def clear_title(self):
        self.title = __undefined__
        return self
    
    def get_cwd(self):
        return self.cwd
    
    def set_cwd(self, cwd):
        self.cwd = cwd
        return self
    
    def get_args(self):
        return self.args
    
    def set_args(self, args):
        self.args = args
        return self
    
    def get_env(self):
        if self.env is __undefined__:
            raise ValueError("env is not defined")
        return self.env
    
    def get_env_or_default(self, default=None):
        if self.env is __undefined__:
            return default
        return self.env
    
    def has_env(self):
        return self.env is not __undefined__
    
    def set_env(self, env):
        self.env = env
        return self
    
    def clear_env(self):
        self.env = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: kind
        if "kind" not in override:
            if self.kind is not __undefined__:
                self.serialize_scalar(me, "kind", self.kind)
        # property: title
        if "title" not in override:
            if self.title is not __undefined__:
                self.serialize_scalar(me, "title", self.title)
        # property: cwd
        if "cwd" not in override:
            self.serialize_scalar(me, "cwd", self.cwd)
        # property: args
        if "args" not in override:
            self.serialize_scalar(me, "args", self.args)
        # property: env
        if "env" not in override:
            if self.env is not __undefined__:
                me["env"] = self.env.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: kind
        if "kind" not in override:
            used_args.append("kind")
            if me is not None and "kind" in me:
                kwargs["kind"] = cls.deserialize_scalar(me["kind"])
        # property: title
        if "title" not in override:
            used_args.append("title")
            if me is not None and "title" in me:
                kwargs["title"] = cls.deserialize_scalar(me["title"])
        # property: cwd
        if "cwd" not in override:
            used_args.append("cwd")
            args.append(cls.deserialize_scalar(me["cwd"]))
        # property: args
        if "args" not in override:
            used_args.append("args")
            args.append(cls.deserialize_scalar(me["args"]))
        # property: env
        if "env" not in override:
            used_args.append("env")
            if me is not None and "env" in me:
                kwargs["env"] = cls.deserialize_as(me["env"], DAPRunInTerminalRequestArgumentsEnv)


class DAPRunInTerminalRequestArgumentsEnv(DAPObject):
    """
    Environment key-value pairs that are added to or removed from the default environment.
    """
    @staticmethod
    def create(**kwargs):
        return DAPRunInTerminalRequestArgumentsEnv(**kwargs)
    
    def __init__(self, **kwargs):
        DAPObject.__init__(self)
        self.additionalProperties = kwargs
    
    def as_current_kwargs(self):
        kwargs = {}
        return kwargs
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # additionalProperties
        for key in self.kwargs:
            self.serialize_scalar(me, key, self.kwargs[key])
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # additionalProperties
        if me is not None:
            for key in me:
                if key not in used_args:
                    kwargs[key] = cls.deserialize_scalar(me[key])



class DAPRunInTerminalResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPRunInTerminalResponse(seq, "response", request_seq, success, "runInTerminal", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPRunInTerminalResponseBody))


class DAPRunInTerminalResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(process_id=__undefined__, shell_process_id=__undefined__):
        return DAPRunInTerminalResponseBody(process_id=process_id, shell_process_id=shell_process_id)
    
    def __init__(self, process_id=__undefined__, shell_process_id=__undefined__):
        DAPObject.__init__(self)
        self.processId = process_id
        self.shellProcessId = shell_process_id
    
    def as_current_kwargs(self):
        kwargs = {}
        if self.has_process_id():
            kwargs["processId"] = self.get_process_id()
        if self.has_shell_process_id():
            kwargs["shellProcessId"] = self.get_shell_process_id()
        return kwargs
    
    def get_process_id(self):
        if self.processId is __undefined__:
            raise ValueError("processId is not defined")
        return self.processId
    
    def get_process_id_or_default(self, default=None):
        if self.processId is __undefined__:
            return default
        return self.processId
    
    def has_process_id(self):
        return self.processId is not __undefined__
    
    def set_process_id(self, process_id):
        self.processId = process_id
        return self
    
    def clear_process_id(self):
        self.processId = __undefined__
        return self
    
    def get_shell_process_id(self):
        if self.shellProcessId is __undefined__:
            raise ValueError("shellProcessId is not defined")
        return self.shellProcessId
    
    def get_shell_process_id_or_default(self, default=None):
        if self.shellProcessId is __undefined__:
            return default
        return self.shellProcessId
    
    def has_shell_process_id(self):
        return self.shellProcessId is not __undefined__
    
    def set_shell_process_id(self, shell_process_id):
        self.shellProcessId = shell_process_id
        return self
    
    def clear_shell_process_id(self):
        self.shellProcessId = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: processId
        if "processId" not in override:
            if self.processId is not __undefined__:
                self.serialize_scalar(me, "processId", self.processId)
        # property: shellProcessId
        if "shellProcessId" not in override:
            if self.shellProcessId is not __undefined__:
                self.serialize_scalar(me, "shellProcessId", self.shellProcessId)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: processId
        if "processId" not in override:
            used_args.append("processId")
            if me is not None and "processId" in me:
                kwargs["process_id"] = cls.deserialize_scalar(me["processId"])
        # property: shellProcessId
        if "shellProcessId" not in override:
            used_args.append("shellProcessId")
            if me is not None and "shellProcessId" in me:
                kwargs["shell_process_id"] = cls.deserialize_scalar(me["shellProcessId"])



class DAPInitializeRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPInitializeRequest(seq, "request", "initialize", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPInitializeRequestArguments))


class DAPInitializeRequestArguments(DAPObject):
    """
    Arguments for 'initialize' request.
    """
    @staticmethod
    def create(adapter_id, client_id=__undefined__, client_name=__undefined__, locale=__undefined__, lines_start_at1=__undefined__, columns_start_at1=__undefined__, path_format=__undefined__, supports_variable_type=__undefined__, supports_variable_paging=__undefined__, supports_run_in_terminal_request=__undefined__):
        return DAPInitializeRequestArguments(adapter_id, client_id=client_id, client_name=client_name, locale=locale, lines_start_at1=lines_start_at1, columns_start_at1=columns_start_at1, path_format=path_format, supports_variable_type=supports_variable_type, supports_variable_paging=supports_variable_paging, supports_run_in_terminal_request=supports_run_in_terminal_request)
    
    def __init__(self, adapter_id, client_id=__undefined__, client_name=__undefined__, locale=__undefined__, lines_start_at1=__undefined__, columns_start_at1=__undefined__, path_format=__undefined__, supports_variable_type=__undefined__, supports_variable_paging=__undefined__, supports_run_in_terminal_request=__undefined__):
        DAPObject.__init__(self)
        self.clientID = client_id
        self.clientName = client_name
        self.adapterID = adapter_id
        self.locale = locale
        self.linesStartAt1 = lines_start_at1
        self.columnsStartAt1 = columns_start_at1
        self.pathFormat = path_format
        self.supportsVariableType = supports_variable_type
        self.supportsVariablePaging = supports_variable_paging
        self.supportsRunInTerminalRequest = supports_run_in_terminal_request
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["adapterID"] = self.get_adapter_id()
        if self.has_client_id():
            kwargs["clientID"] = self.get_client_id()
        if self.has_client_name():
            kwargs["clientName"] = self.get_client_name()
        if self.has_locale():
            kwargs["locale"] = self.get_locale()
        if self.has_lines_start_at1():
            kwargs["linesStartAt1"] = self.get_lines_start_at1()
        if self.has_columns_start_at1():
            kwargs["columnsStartAt1"] = self.get_columns_start_at1()
        if self.has_path_format():
            kwargs["pathFormat"] = self.get_path_format()
        if self.has_supports_variable_type():
            kwargs["supportsVariableType"] = self.get_supports_variable_type()
        if self.has_supports_variable_paging():
            kwargs["supportsVariablePaging"] = self.get_supports_variable_paging()
        if self.has_supports_run_in_terminal_request():
            kwargs["supportsRunInTerminalRequest"] = self.get_supports_run_in_terminal_request()
        return kwargs
    
    def get_client_id(self):
        if self.clientID is __undefined__:
            raise ValueError("clientID is not defined")
        return self.clientID
    
    def get_client_id_or_default(self, default=None):
        if self.clientID is __undefined__:
            return default
        return self.clientID
    
    def has_client_id(self):
        return self.clientID is not __undefined__
    
    def set_client_id(self, client_id):
        self.clientID = client_id
        return self
    
    def clear_client_id(self):
        self.clientID = __undefined__
        return self
    
    def get_client_name(self):
        if self.clientName is __undefined__:
            raise ValueError("clientName is not defined")
        return self.clientName
    
    def get_client_name_or_default(self, default=None):
        if self.clientName is __undefined__:
            return default
        return self.clientName
    
    def has_client_name(self):
        return self.clientName is not __undefined__
    
    def set_client_name(self, client_name):
        self.clientName = client_name
        return self
    
    def clear_client_name(self):
        self.clientName = __undefined__
        return self
    
    def get_adapter_id(self):
        return self.adapterID
    
    def set_adapter_id(self, adapter_id):
        self.adapterID = adapter_id
        return self
    
    def get_locale(self):
        if self.locale is __undefined__:
            raise ValueError("locale is not defined")
        return self.locale
    
    def get_locale_or_default(self, default=None):
        if self.locale is __undefined__:
            return default
        return self.locale
    
    def has_locale(self):
        return self.locale is not __undefined__
    
    def set_locale(self, locale):
        self.locale = locale
        return self
    
    def clear_locale(self):
        self.locale = __undefined__
        return self
    
    def get_lines_start_at1(self):
        if self.linesStartAt1 is __undefined__:
            raise ValueError("linesStartAt1 is not defined")
        return self.linesStartAt1
    
    def get_lines_start_at1_or_default(self, default=None):
        if self.linesStartAt1 is __undefined__:
            return default
        return self.linesStartAt1
    
    def has_lines_start_at1(self):
        return self.linesStartAt1 is not __undefined__
    
    def set_lines_start_at1(self, lines_start_at1):
        self.linesStartAt1 = lines_start_at1
        return self
    
    def clear_lines_start_at1(self):
        self.linesStartAt1 = __undefined__
        return self
    
    def get_columns_start_at1(self):
        if self.columnsStartAt1 is __undefined__:
            raise ValueError("columnsStartAt1 is not defined")
        return self.columnsStartAt1
    
    def get_columns_start_at1_or_default(self, default=None):
        if self.columnsStartAt1 is __undefined__:
            return default
        return self.columnsStartAt1
    
    def has_columns_start_at1(self):
        return self.columnsStartAt1 is not __undefined__
    
    def set_columns_start_at1(self, columns_start_at1):
        self.columnsStartAt1 = columns_start_at1
        return self
    
    def clear_columns_start_at1(self):
        self.columnsStartAt1 = __undefined__
        return self
    
    def get_path_format(self):
        if self.pathFormat is __undefined__:
            raise ValueError("pathFormat is not defined")
        return self.pathFormat
    
    def get_path_format_or_default(self, default=None):
        if self.pathFormat is __undefined__:
            return default
        return self.pathFormat
    
    def has_path_format(self):
        return self.pathFormat is not __undefined__
    
    def set_path_format(self, path_format):
        self.pathFormat = path_format
        return self
    
    def clear_path_format(self):
        self.pathFormat = __undefined__
        return self
    
    def get_supports_variable_type(self):
        if self.supportsVariableType is __undefined__:
            raise ValueError("supportsVariableType is not defined")
        return self.supportsVariableType
    
    def get_supports_variable_type_or_default(self, default=None):
        if self.supportsVariableType is __undefined__:
            return default
        return self.supportsVariableType
    
    def has_supports_variable_type(self):
        return self.supportsVariableType is not __undefined__
    
    def set_supports_variable_type(self, supports_variable_type):
        self.supportsVariableType = supports_variable_type
        return self
    
    def clear_supports_variable_type(self):
        self.supportsVariableType = __undefined__
        return self
    
    def get_supports_variable_paging(self):
        if self.supportsVariablePaging is __undefined__:
            raise ValueError("supportsVariablePaging is not defined")
        return self.supportsVariablePaging
    
    def get_supports_variable_paging_or_default(self, default=None):
        if self.supportsVariablePaging is __undefined__:
            return default
        return self.supportsVariablePaging
    
    def has_supports_variable_paging(self):
        return self.supportsVariablePaging is not __undefined__
    
    def set_supports_variable_paging(self, supports_variable_paging):
        self.supportsVariablePaging = supports_variable_paging
        return self
    
    def clear_supports_variable_paging(self):
        self.supportsVariablePaging = __undefined__
        return self
    
    def get_supports_run_in_terminal_request(self):
        if self.supportsRunInTerminalRequest is __undefined__:
            raise ValueError("supportsRunInTerminalRequest is not defined")
        return self.supportsRunInTerminalRequest
    
    def get_supports_run_in_terminal_request_or_default(self, default=None):
        if self.supportsRunInTerminalRequest is __undefined__:
            return default
        return self.supportsRunInTerminalRequest
    
    def has_supports_run_in_terminal_request(self):
        return self.supportsRunInTerminalRequest is not __undefined__
    
    def set_supports_run_in_terminal_request(self, supports_run_in_terminal_request):
        self.supportsRunInTerminalRequest = supports_run_in_terminal_request
        return self
    
    def clear_supports_run_in_terminal_request(self):
        self.supportsRunInTerminalRequest = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: clientID
        if "clientID" not in override:
            if self.clientID is not __undefined__:
                self.serialize_scalar(me, "clientID", self.clientID)
        # property: clientName
        if "clientName" not in override:
            if self.clientName is not __undefined__:
                self.serialize_scalar(me, "clientName", self.clientName)
        # property: adapterID
        if "adapterID" not in override:
            self.serialize_scalar(me, "adapterID", self.adapterID)
        # property: locale
        if "locale" not in override:
            if self.locale is not __undefined__:
                self.serialize_scalar(me, "locale", self.locale)
        # property: linesStartAt1
        if "linesStartAt1" not in override:
            if self.linesStartAt1 is not __undefined__:
                self.serialize_scalar(me, "linesStartAt1", self.linesStartAt1)
        # property: columnsStartAt1
        if "columnsStartAt1" not in override:
            if self.columnsStartAt1 is not __undefined__:
                self.serialize_scalar(me, "columnsStartAt1", self.columnsStartAt1)
        # property: pathFormat
        if "pathFormat" not in override:
            if self.pathFormat is not __undefined__:
                self.serialize_scalar(me, "pathFormat", self.pathFormat)
        # property: supportsVariableType
        if "supportsVariableType" not in override:
            if self.supportsVariableType is not __undefined__:
                self.serialize_scalar(me, "supportsVariableType", self.supportsVariableType)
        # property: supportsVariablePaging
        if "supportsVariablePaging" not in override:
            if self.supportsVariablePaging is not __undefined__:
                self.serialize_scalar(me, "supportsVariablePaging", self.supportsVariablePaging)
        # property: supportsRunInTerminalRequest
        if "supportsRunInTerminalRequest" not in override:
            if self.supportsRunInTerminalRequest is not __undefined__:
                self.serialize_scalar(me, "supportsRunInTerminalRequest", self.supportsRunInTerminalRequest)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: clientID
        if "clientID" not in override:
            used_args.append("clientID")
            if me is not None and "clientID" in me:
                kwargs["client_id"] = cls.deserialize_scalar(me["clientID"])
        # property: clientName
        if "clientName" not in override:
            used_args.append("clientName")
            if me is not None and "clientName" in me:
                kwargs["client_name"] = cls.deserialize_scalar(me["clientName"])
        # property: adapterID
        if "adapterID" not in override:
            used_args.append("adapterID")
            args.append(cls.deserialize_scalar(me["adapterID"]))
        # property: locale
        if "locale" not in override:
            used_args.append("locale")
            if me is not None and "locale" in me:
                kwargs["locale"] = cls.deserialize_scalar(me["locale"])
        # property: linesStartAt1
        if "linesStartAt1" not in override:
            used_args.append("linesStartAt1")
            if me is not None and "linesStartAt1" in me:
                kwargs["lines_start_at1"] = cls.deserialize_scalar(me["linesStartAt1"])
        # property: columnsStartAt1
        if "columnsStartAt1" not in override:
            used_args.append("columnsStartAt1")
            if me is not None and "columnsStartAt1" in me:
                kwargs["columns_start_at1"] = cls.deserialize_scalar(me["columnsStartAt1"])
        # property: pathFormat
        if "pathFormat" not in override:
            used_args.append("pathFormat")
            if me is not None and "pathFormat" in me:
                kwargs["path_format"] = cls.deserialize_scalar(me["pathFormat"])
        # property: supportsVariableType
        if "supportsVariableType" not in override:
            used_args.append("supportsVariableType")
            if me is not None and "supportsVariableType" in me:
                kwargs["supports_variable_type"] = cls.deserialize_scalar(me["supportsVariableType"])
        # property: supportsVariablePaging
        if "supportsVariablePaging" not in override:
            used_args.append("supportsVariablePaging")
            if me is not None and "supportsVariablePaging" in me:
                kwargs["supports_variable_paging"] = cls.deserialize_scalar(me["supportsVariablePaging"])
        # property: supportsRunInTerminalRequest
        if "supportsRunInTerminalRequest" not in override:
            used_args.append("supportsRunInTerminalRequest")
            if me is not None and "supportsRunInTerminalRequest" in me:
                kwargs["supports_run_in_terminal_request"] = cls.deserialize_scalar(me["supportsRunInTerminalRequest"])


class DAPInitializeResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, message=__undefined__, body=__undefined__):
        return DAPInitializeResponse(seq, "response", request_seq, success, "initialize", message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        if self.has_body():
            kwargs["body"] = self.get_body()
        return kwargs
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            if self.body is not __undefined__:
                me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            if me is not None and "body" in me:
                kwargs["body"] = cls.deserialize_as(me["body"], DAPCapabilities)


class DAPConfigurationDoneRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments=__undefined__):
        return DAPConfigurationDoneRequest(seq, "request", "configurationDone", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments=__undefined__):
        DAPRequest.__init__(self, seq, type, command, arguments)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        if self.has_arguments():
            kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            if self.arguments is not __undefined__:
                me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            if me is not None and "arguments" in me:
                kwargs["arguments"] = cls.deserialize_as(me["arguments"], DAPConfigurationDoneArguments)


class DAPConfigurationDoneArguments(DAPObject):
    """
    Arguments for 'configurationDone' request.
    """
    @staticmethod
    def create():
        return DAPConfigurationDoneArguments()
    
    def __init__(self):
        DAPObject.__init__(self)
    
    def as_current_kwargs(self):
        kwargs = {}
        return kwargs
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        


class DAPConfigurationDoneResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, message=__undefined__, body=__undefined__):
        return DAPConfigurationDoneResponse(seq, "response", request_seq, success, "configurationDone", message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        return kwargs
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))


class DAPLaunchRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPLaunchRequest(seq, "request", "launch", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPLaunchRequestArguments))


class DAPLaunchRequestArguments(DAPObject):
    """
    Arguments for 'launch' request. Additional attributes are implementation specific.
    """
    @staticmethod
    def create(no_debug=__undefined__, _restart=__undefined__):
        return DAPLaunchRequestArguments(no_debug=no_debug, _restart=_restart)
    
    def __init__(self, no_debug=__undefined__, _restart=__undefined__):
        DAPObject.__init__(self)
        self.noDebug = no_debug
        self.__restart = _restart
    
    def as_current_kwargs(self):
        kwargs = {}
        if self.has_no_debug():
            kwargs["noDebug"] = self.get_no_debug()
        if self.has__restart():
            kwargs["__restart"] = self.get__restart()
        return kwargs
    
    def get_no_debug(self):
        if self.noDebug is __undefined__:
            raise ValueError("noDebug is not defined")
        return self.noDebug
    
    def get_no_debug_or_default(self, default=None):
        if self.noDebug is __undefined__:
            return default
        return self.noDebug
    
    def has_no_debug(self):
        return self.noDebug is not __undefined__
    
    def set_no_debug(self, no_debug):
        self.noDebug = no_debug
        return self
    
    def clear_no_debug(self):
        self.noDebug = __undefined__
        return self
    
    def get__restart(self):
        if self.__restart is __undefined__:
            raise ValueError("__restart is not defined")
        return self.__restart
    
    def get__restart_or_default(self, default=None):
        if self.__restart is __undefined__:
            return default
        return self.__restart
    
    def has__restart(self):
        return self.__restart is not __undefined__
    
    def set__restart(self, _restart):
        self.__restart = _restart
        return self
    
    def clear__restart(self):
        self.__restart = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: noDebug
        if "noDebug" not in override:
            if self.noDebug is not __undefined__:
                self.serialize_scalar(me, "noDebug", self.noDebug)
        # property: __restart
        if "__restart" not in override:
            if self.__restart is not __undefined__:
                self.serialize_scalar(me, "__restart", self.__restart)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: noDebug
        if "noDebug" not in override:
            used_args.append("noDebug")
            if me is not None and "noDebug" in me:
                kwargs["no_debug"] = cls.deserialize_scalar(me["noDebug"])
        # property: __restart
        if "__restart" not in override:
            used_args.append("__restart")
            if me is not None and "__restart" in me:
                kwargs["_restart"] = cls.deserialize_scalar(me["__restart"])


class DAPLaunchResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, message=__undefined__, body=__undefined__):
        return DAPLaunchResponse(seq, "response", request_seq, success, "launch", message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        return kwargs
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))


class DAPAttachRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPAttachRequest(seq, "request", "attach", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPAttachRequestArguments))


class DAPAttachRequestArguments(DAPObject):
    """
    Arguments for 'attach' request. Additional attributes are implementation specific.
    """
    @staticmethod
    def create(_restart=__undefined__):
        return DAPAttachRequestArguments(_restart=_restart)
    
    def __init__(self, _restart=__undefined__):
        DAPObject.__init__(self)
        self.__restart = _restart
    
    def as_current_kwargs(self):
        kwargs = {}
        if self.has__restart():
            kwargs["__restart"] = self.get__restart()
        return kwargs
    
    def get__restart(self):
        if self.__restart is __undefined__:
            raise ValueError("__restart is not defined")
        return self.__restart
    
    def get__restart_or_default(self, default=None):
        if self.__restart is __undefined__:
            return default
        return self.__restart
    
    def has__restart(self):
        return self.__restart is not __undefined__
    
    def set__restart(self, _restart):
        self.__restart = _restart
        return self
    
    def clear__restart(self):
        self.__restart = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: __restart
        if "__restart" not in override:
            if self.__restart is not __undefined__:
                self.serialize_scalar(me, "__restart", self.__restart)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: __restart
        if "__restart" not in override:
            used_args.append("__restart")
            if me is not None and "__restart" in me:
                kwargs["_restart"] = cls.deserialize_scalar(me["__restart"])


class DAPAttachResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, message=__undefined__, body=__undefined__):
        return DAPAttachResponse(seq, "response", request_seq, success, "attach", message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        return kwargs
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))


class DAPRestartRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments=__undefined__):
        return DAPRestartRequest(seq, "request", "restart", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments=__undefined__):
        DAPRequest.__init__(self, seq, type, command, arguments)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        if self.has_arguments():
            kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            if self.arguments is not __undefined__:
                me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            if me is not None and "arguments" in me:
                kwargs["arguments"] = cls.deserialize_as(me["arguments"], DAPRestartArguments)


class DAPRestartArguments(DAPObject):
    """
    Arguments for 'restart' request.
    """
    @staticmethod
    def create():
        return DAPRestartArguments()
    
    def __init__(self):
        DAPObject.__init__(self)
    
    def as_current_kwargs(self):
        kwargs = {}
        return kwargs
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        


class DAPRestartResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, message=__undefined__, body=__undefined__):
        return DAPRestartResponse(seq, "response", request_seq, success, "restart", message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        return kwargs
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))


class DAPDisconnectRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments=__undefined__):
        return DAPDisconnectRequest(seq, "request", "disconnect", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments=__undefined__):
        DAPRequest.__init__(self, seq, type, command, arguments)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        if self.has_arguments():
            kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            if self.arguments is not __undefined__:
                me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            if me is not None and "arguments" in me:
                kwargs["arguments"] = cls.deserialize_as(me["arguments"], DAPDisconnectArguments)


class DAPDisconnectArguments(DAPObject):
    """
    Arguments for 'disconnect' request.
    """
    @staticmethod
    def create(restart=__undefined__, terminate_debuggee=__undefined__):
        return DAPDisconnectArguments(restart=restart, terminate_debuggee=terminate_debuggee)
    
    def __init__(self, restart=__undefined__, terminate_debuggee=__undefined__):
        DAPObject.__init__(self)
        self.restart = restart
        self.terminateDebuggee = terminate_debuggee
    
    def as_current_kwargs(self):
        kwargs = {}
        if self.has_restart():
            kwargs["restart"] = self.get_restart()
        if self.has_terminate_debuggee():
            kwargs["terminateDebuggee"] = self.get_terminate_debuggee()
        return kwargs
    
    def get_restart(self):
        if self.restart is __undefined__:
            raise ValueError("restart is not defined")
        return self.restart
    
    def get_restart_or_default(self, default=None):
        if self.restart is __undefined__:
            return default
        return self.restart
    
    def has_restart(self):
        return self.restart is not __undefined__
    
    def set_restart(self, restart):
        self.restart = restart
        return self
    
    def clear_restart(self):
        self.restart = __undefined__
        return self
    
    def get_terminate_debuggee(self):
        if self.terminateDebuggee is __undefined__:
            raise ValueError("terminateDebuggee is not defined")
        return self.terminateDebuggee
    
    def get_terminate_debuggee_or_default(self, default=None):
        if self.terminateDebuggee is __undefined__:
            return default
        return self.terminateDebuggee
    
    def has_terminate_debuggee(self):
        return self.terminateDebuggee is not __undefined__
    
    def set_terminate_debuggee(self, terminate_debuggee):
        self.terminateDebuggee = terminate_debuggee
        return self
    
    def clear_terminate_debuggee(self):
        self.terminateDebuggee = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: restart
        if "restart" not in override:
            if self.restart is not __undefined__:
                self.serialize_scalar(me, "restart", self.restart)
        # property: terminateDebuggee
        if "terminateDebuggee" not in override:
            if self.terminateDebuggee is not __undefined__:
                self.serialize_scalar(me, "terminateDebuggee", self.terminateDebuggee)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: restart
        if "restart" not in override:
            used_args.append("restart")
            if me is not None and "restart" in me:
                kwargs["restart"] = cls.deserialize_scalar(me["restart"])
        # property: terminateDebuggee
        if "terminateDebuggee" not in override:
            used_args.append("terminateDebuggee")
            if me is not None and "terminateDebuggee" in me:
                kwargs["terminate_debuggee"] = cls.deserialize_scalar(me["terminateDebuggee"])


class DAPDisconnectResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, message=__undefined__, body=__undefined__):
        return DAPDisconnectResponse(seq, "response", request_seq, success, "disconnect", message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        return kwargs
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))


class DAPTerminateRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments=__undefined__):
        return DAPTerminateRequest(seq, "request", "terminate", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments=__undefined__):
        DAPRequest.__init__(self, seq, type, command, arguments)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        if self.has_arguments():
            kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            if self.arguments is not __undefined__:
                me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            if me is not None and "arguments" in me:
                kwargs["arguments"] = cls.deserialize_as(me["arguments"], DAPTerminateArguments)


class DAPTerminateArguments(DAPObject):
    """
    Arguments for 'terminate' request.
    """
    @staticmethod
    def create(restart=__undefined__):
        return DAPTerminateArguments(restart=restart)
    
    def __init__(self, restart=__undefined__):
        DAPObject.__init__(self)
        self.restart = restart
    
    def as_current_kwargs(self):
        kwargs = {}
        if self.has_restart():
            kwargs["restart"] = self.get_restart()
        return kwargs
    
    def get_restart(self):
        if self.restart is __undefined__:
            raise ValueError("restart is not defined")
        return self.restart
    
    def get_restart_or_default(self, default=None):
        if self.restart is __undefined__:
            return default
        return self.restart
    
    def has_restart(self):
        return self.restart is not __undefined__
    
    def set_restart(self, restart):
        self.restart = restart
        return self
    
    def clear_restart(self):
        self.restart = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: restart
        if "restart" not in override:
            if self.restart is not __undefined__:
                self.serialize_scalar(me, "restart", self.restart)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: restart
        if "restart" not in override:
            used_args.append("restart")
            if me is not None and "restart" in me:
                kwargs["restart"] = cls.deserialize_scalar(me["restart"])


class DAPTerminateResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, message=__undefined__, body=__undefined__):
        return DAPTerminateResponse(seq, "response", request_seq, success, "terminate", message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        return kwargs
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))


class DAPSetBreakpointsRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPSetBreakpointsRequest(seq, "request", "setBreakpoints", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPSetBreakpointsArguments))


class DAPSetBreakpointsArguments(DAPObject):
    """
    Arguments for 'setBreakpoints' request.
    """
    @staticmethod
    def create(source, breakpoints=__undefined__, lines=__undefined__, source_modified=__undefined__):
        return DAPSetBreakpointsArguments(source, breakpoints=breakpoints, lines=lines, source_modified=source_modified)
    
    def __init__(self, source, breakpoints=__undefined__, lines=__undefined__, source_modified=__undefined__):
        DAPObject.__init__(self)
        self.source = source
        self.breakpoints = breakpoints
        self.lines = lines
        self.sourceModified = source_modified
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["source"] = self.get_source()
        if self.has_breakpoints():
            kwargs["breakpoints"] = self.get_breakpoints()
        if self.has_lines():
            kwargs["lines"] = self.get_lines()
        if self.has_source_modified():
            kwargs["sourceModified"] = self.get_source_modified()
        return kwargs
    
    def get_source(self):
        return self.source
    
    def set_source(self, source):
        self.source = source
        return self
    
    def get_breakpoints(self):
        if self.breakpoints is __undefined__:
            raise ValueError("breakpoints is not defined")
        return self.breakpoints
    
    def get_breakpoints_or_default(self, default=None):
        if self.breakpoints is __undefined__:
            return default
        return self.breakpoints
    
    def has_breakpoints(self):
        return self.breakpoints is not __undefined__
    
    def set_breakpoints(self, breakpoints):
        self.breakpoints = breakpoints
        return self
    
    def clear_breakpoints(self):
        self.breakpoints = __undefined__
        return self
    
    def get_lines(self):
        if self.lines is __undefined__:
            raise ValueError("lines is not defined")
        return self.lines
    
    def get_lines_or_default(self, default=None):
        if self.lines is __undefined__:
            return default
        return self.lines
    
    def has_lines(self):
        return self.lines is not __undefined__
    
    def set_lines(self, lines):
        self.lines = lines
        return self
    
    def clear_lines(self):
        self.lines = __undefined__
        return self
    
    def get_source_modified(self):
        if self.sourceModified is __undefined__:
            raise ValueError("sourceModified is not defined")
        return self.sourceModified
    
    def get_source_modified_or_default(self, default=None):
        if self.sourceModified is __undefined__:
            return default
        return self.sourceModified
    
    def has_source_modified(self):
        return self.sourceModified is not __undefined__
    
    def set_source_modified(self, source_modified):
        self.sourceModified = source_modified
        return self
    
    def clear_source_modified(self):
        self.sourceModified = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: source
        if "source" not in override:
            me["source"] = self.source.serialize()
        # property: breakpoints
        if "breakpoints" not in override:
            if self.breakpoints is not __undefined__:
                self.serialize_scalar(me, "breakpoints", self.breakpoints, hint=DAPSourceBreakpoint)
        # property: lines
        if "lines" not in override:
            if self.lines is not __undefined__:
                self.serialize_scalar(me, "lines", self.lines)
        # property: sourceModified
        if "sourceModified" not in override:
            if self.sourceModified is not __undefined__:
                self.serialize_scalar(me, "sourceModified", self.sourceModified)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: source
        if "source" not in override:
            used_args.append("source")
            args.append(cls.deserialize_as(me["source"], DAPSource))
        # property: breakpoints
        if "breakpoints" not in override:
            used_args.append("breakpoints")
            if me is not None and "breakpoints" in me:
                kwargs["breakpoints"] = cls.deserialize_scalar(me["breakpoints"], hint=DAPSourceBreakpoint)
        # property: lines
        if "lines" not in override:
            used_args.append("lines")
            if me is not None and "lines" in me:
                kwargs["lines"] = cls.deserialize_scalar(me["lines"])
        # property: sourceModified
        if "sourceModified" not in override:
            used_args.append("sourceModified")
            if me is not None and "sourceModified" in me:
                kwargs["source_modified"] = cls.deserialize_scalar(me["sourceModified"])


class DAPSetBreakpointsResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPSetBreakpointsResponse(seq, "response", request_seq, success, "setBreakpoints", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPSetBreakpointsResponseBody))


class DAPSetBreakpointsResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(breakpoints):
        return DAPSetBreakpointsResponseBody(breakpoints)
    
    def __init__(self, breakpoints):
        DAPObject.__init__(self)
        self.breakpoints = breakpoints
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["breakpoints"] = self.get_breakpoints()
        return kwargs
    
    def get_breakpoints(self):
        return self.breakpoints
    
    def set_breakpoints(self, breakpoints):
        self.breakpoints = breakpoints
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: breakpoints
        if "breakpoints" not in override:
            self.serialize_scalar(me, "breakpoints", self.breakpoints, hint=DAPBreakpoint)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: breakpoints
        if "breakpoints" not in override:
            used_args.append("breakpoints")
            args.append(cls.deserialize_scalar(me["breakpoints"], hint=DAPBreakpoint))



class DAPSetFunctionBreakpointsRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPSetFunctionBreakpointsRequest(seq, "request", "setFunctionBreakpoints", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPSetFunctionBreakpointsArguments))


class DAPSetFunctionBreakpointsArguments(DAPObject):
    """
    Arguments for 'setFunctionBreakpoints' request.
    """
    @staticmethod
    def create(breakpoints):
        return DAPSetFunctionBreakpointsArguments(breakpoints)
    
    def __init__(self, breakpoints):
        DAPObject.__init__(self)
        self.breakpoints = breakpoints
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["breakpoints"] = self.get_breakpoints()
        return kwargs
    
    def get_breakpoints(self):
        return self.breakpoints
    
    def set_breakpoints(self, breakpoints):
        self.breakpoints = breakpoints
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: breakpoints
        if "breakpoints" not in override:
            self.serialize_scalar(me, "breakpoints", self.breakpoints, hint=DAPFunctionBreakpoint)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: breakpoints
        if "breakpoints" not in override:
            used_args.append("breakpoints")
            args.append(cls.deserialize_scalar(me["breakpoints"], hint=DAPFunctionBreakpoint))


class DAPSetFunctionBreakpointsResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPSetFunctionBreakpointsResponse(seq, "response", request_seq, success, "setFunctionBreakpoints", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPSetFunctionBreakpointsResponseBody))


class DAPSetFunctionBreakpointsResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(breakpoints):
        return DAPSetFunctionBreakpointsResponseBody(breakpoints)
    
    def __init__(self, breakpoints):
        DAPObject.__init__(self)
        self.breakpoints = breakpoints
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["breakpoints"] = self.get_breakpoints()
        return kwargs
    
    def get_breakpoints(self):
        return self.breakpoints
    
    def set_breakpoints(self, breakpoints):
        self.breakpoints = breakpoints
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: breakpoints
        if "breakpoints" not in override:
            self.serialize_scalar(me, "breakpoints", self.breakpoints, hint=DAPBreakpoint)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: breakpoints
        if "breakpoints" not in override:
            used_args.append("breakpoints")
            args.append(cls.deserialize_scalar(me["breakpoints"], hint=DAPBreakpoint))



class DAPSetExceptionBreakpointsRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPSetExceptionBreakpointsRequest(seq, "request", "setExceptionBreakpoints", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPSetExceptionBreakpointsArguments))


class DAPSetExceptionBreakpointsArguments(DAPObject):
    """
    Arguments for 'setExceptionBreakpoints' request.
    """
    @staticmethod
    def create(filters, exception_options=__undefined__):
        return DAPSetExceptionBreakpointsArguments(filters, exception_options=exception_options)
    
    def __init__(self, filters, exception_options=__undefined__):
        DAPObject.__init__(self)
        self.filters = filters
        self.exceptionOptions = exception_options
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["filters"] = self.get_filters()
        if self.has_exception_options():
            kwargs["exceptionOptions"] = self.get_exception_options()
        return kwargs
    
    def get_filters(self):
        return self.filters
    
    def set_filters(self, filters):
        self.filters = filters
        return self
    
    def get_exception_options(self):
        if self.exceptionOptions is __undefined__:
            raise ValueError("exceptionOptions is not defined")
        return self.exceptionOptions
    
    def get_exception_options_or_default(self, default=None):
        if self.exceptionOptions is __undefined__:
            return default
        return self.exceptionOptions
    
    def has_exception_options(self):
        return self.exceptionOptions is not __undefined__
    
    def set_exception_options(self, exception_options):
        self.exceptionOptions = exception_options
        return self
    
    def clear_exception_options(self):
        self.exceptionOptions = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: filters
        if "filters" not in override:
            self.serialize_scalar(me, "filters", self.filters)
        # property: exceptionOptions
        if "exceptionOptions" not in override:
            if self.exceptionOptions is not __undefined__:
                self.serialize_scalar(me, "exceptionOptions", self.exceptionOptions, hint=DAPExceptionOptions)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: filters
        if "filters" not in override:
            used_args.append("filters")
            args.append(cls.deserialize_scalar(me["filters"]))
        # property: exceptionOptions
        if "exceptionOptions" not in override:
            used_args.append("exceptionOptions")
            if me is not None and "exceptionOptions" in me:
                kwargs["exception_options"] = cls.deserialize_scalar(me["exceptionOptions"], hint=DAPExceptionOptions)


class DAPSetExceptionBreakpointsResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, message=__undefined__, body=__undefined__):
        return DAPSetExceptionBreakpointsResponse(seq, "response", request_seq, success, "setExceptionBreakpoints", message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        return kwargs
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))


class DAPDataBreakpointInfoRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPDataBreakpointInfoRequest(seq, "request", "dataBreakpointInfo", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPDataBreakpointInfoArguments))


class DAPDataBreakpointInfoArguments(DAPObject):
    """
    Arguments for 'dataBreakpointInfo' request.
    """
    @staticmethod
    def create(name, variables_reference=__undefined__):
        return DAPDataBreakpointInfoArguments(name, variables_reference=variables_reference)
    
    def __init__(self, name, variables_reference=__undefined__):
        DAPObject.__init__(self)
        self.variablesReference = variables_reference
        self.name = name
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["name"] = self.get_name()
        if self.has_variables_reference():
            kwargs["variablesReference"] = self.get_variables_reference()
        return kwargs
    
    def get_variables_reference(self):
        if self.variablesReference is __undefined__:
            raise ValueError("variablesReference is not defined")
        return self.variablesReference
    
    def get_variables_reference_or_default(self, default=None):
        if self.variablesReference is __undefined__:
            return default
        return self.variablesReference
    
    def has_variables_reference(self):
        return self.variablesReference is not __undefined__
    
    def set_variables_reference(self, variables_reference):
        self.variablesReference = variables_reference
        return self
    
    def clear_variables_reference(self):
        self.variablesReference = __undefined__
        return self
    
    def get_name(self):
        return self.name
    
    def set_name(self, name):
        self.name = name
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: variablesReference
        if "variablesReference" not in override:
            if self.variablesReference is not __undefined__:
                self.serialize_scalar(me, "variablesReference", self.variablesReference)
        # property: name
        if "name" not in override:
            self.serialize_scalar(me, "name", self.name)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: variablesReference
        if "variablesReference" not in override:
            used_args.append("variablesReference")
            if me is not None and "variablesReference" in me:
                kwargs["variables_reference"] = cls.deserialize_scalar(me["variablesReference"])
        # property: name
        if "name" not in override:
            used_args.append("name")
            args.append(cls.deserialize_scalar(me["name"]))


class DAPDataBreakpointInfoResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPDataBreakpointInfoResponse(seq, "response", request_seq, success, "dataBreakpointInfo", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPDataBreakpointInfoResponseBody))


class DAPDataBreakpointInfoResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(data_id, description, access_types=__undefined__, can_persist=__undefined__):
        return DAPDataBreakpointInfoResponseBody(data_id, description, access_types=access_types, can_persist=can_persist)
    
    def __init__(self, data_id, description, access_types=__undefined__, can_persist=__undefined__):
        DAPObject.__init__(self)
        self.dataId = data_id
        self.description = description
        self.accessTypes = access_types
        self.canPersist = can_persist
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["dataId"] = self.get_data_id()
        kwargs["description"] = self.get_description()
        if self.has_access_types():
            kwargs["accessTypes"] = self.get_access_types()
        if self.has_can_persist():
            kwargs["canPersist"] = self.get_can_persist()
        return kwargs
    
    def get_data_id(self):
        return self.dataId
    
    def set_data_id(self, data_id):
        self.dataId = data_id
        return self
    
    def get_description(self):
        return self.description
    
    def set_description(self, description):
        self.description = description
        return self
    
    def get_access_types(self):
        if self.accessTypes is __undefined__:
            raise ValueError("accessTypes is not defined")
        return self.accessTypes
    
    def get_access_types_or_default(self, default=None):
        if self.accessTypes is __undefined__:
            return default
        return self.accessTypes
    
    def has_access_types(self):
        return self.accessTypes is not __undefined__
    
    def set_access_types(self, access_types):
        self.accessTypes = access_types
        return self
    
    def clear_access_types(self):
        self.accessTypes = __undefined__
        return self
    
    def get_can_persist(self):
        if self.canPersist is __undefined__:
            raise ValueError("canPersist is not defined")
        return self.canPersist
    
    def get_can_persist_or_default(self, default=None):
        if self.canPersist is __undefined__:
            return default
        return self.canPersist
    
    def has_can_persist(self):
        return self.canPersist is not __undefined__
    
    def set_can_persist(self, can_persist):
        self.canPersist = can_persist
        return self
    
    def clear_can_persist(self):
        self.canPersist = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: dataId
        if "dataId" not in override:
            self.serialize_scalar(me, "dataId", self.dataId)
        # property: description
        if "description" not in override:
            self.serialize_scalar(me, "description", self.description)
        # property: accessTypes
        if "accessTypes" not in override:
            if self.accessTypes is not __undefined__:
                self.serialize_scalar(me, "accessTypes", self.accessTypes, hint=DAPDataBreakpointAccessType)
        # property: canPersist
        if "canPersist" not in override:
            if self.canPersist is not __undefined__:
                self.serialize_scalar(me, "canPersist", self.canPersist)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: dataId
        if "dataId" not in override:
            used_args.append("dataId")
            args.append(cls.deserialize_scalar(me["dataId"]))
        # property: description
        if "description" not in override:
            used_args.append("description")
            args.append(cls.deserialize_scalar(me["description"]))
        # property: accessTypes
        if "accessTypes" not in override:
            used_args.append("accessTypes")
            if me is not None and "accessTypes" in me:
                kwargs["access_types"] = cls.deserialize_scalar(me["accessTypes"], hint=DAPDataBreakpointAccessType)
        # property: canPersist
        if "canPersist" not in override:
            used_args.append("canPersist")
            if me is not None and "canPersist" in me:
                kwargs["can_persist"] = cls.deserialize_scalar(me["canPersist"])



class DAPSetDataBreakpointsRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPSetDataBreakpointsRequest(seq, "request", "setDataBreakpoints", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPSetDataBreakpointsArguments))


class DAPSetDataBreakpointsArguments(DAPObject):
    """
    Arguments for 'setDataBreakpoints' request.
    """
    @staticmethod
    def create(breakpoints):
        return DAPSetDataBreakpointsArguments(breakpoints)
    
    def __init__(self, breakpoints):
        DAPObject.__init__(self)
        self.breakpoints = breakpoints
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["breakpoints"] = self.get_breakpoints()
        return kwargs
    
    def get_breakpoints(self):
        return self.breakpoints
    
    def set_breakpoints(self, breakpoints):
        self.breakpoints = breakpoints
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: breakpoints
        if "breakpoints" not in override:
            self.serialize_scalar(me, "breakpoints", self.breakpoints, hint=DAPDataBreakpoint)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: breakpoints
        if "breakpoints" not in override:
            used_args.append("breakpoints")
            args.append(cls.deserialize_scalar(me["breakpoints"], hint=DAPDataBreakpoint))


class DAPSetDataBreakpointsResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPSetDataBreakpointsResponse(seq, "response", request_seq, success, "setDataBreakpoints", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPSetDataBreakpointsResponseBody))


class DAPSetDataBreakpointsResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(breakpoints):
        return DAPSetDataBreakpointsResponseBody(breakpoints)
    
    def __init__(self, breakpoints):
        DAPObject.__init__(self)
        self.breakpoints = breakpoints
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["breakpoints"] = self.get_breakpoints()
        return kwargs
    
    def get_breakpoints(self):
        return self.breakpoints
    
    def set_breakpoints(self, breakpoints):
        self.breakpoints = breakpoints
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: breakpoints
        if "breakpoints" not in override:
            self.serialize_scalar(me, "breakpoints", self.breakpoints, hint=DAPBreakpoint)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: breakpoints
        if "breakpoints" not in override:
            used_args.append("breakpoints")
            args.append(cls.deserialize_scalar(me["breakpoints"], hint=DAPBreakpoint))



class DAPContinueRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPContinueRequest(seq, "request", "continue", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPContinueArguments))


class DAPContinueArguments(DAPObject):
    """
    Arguments for 'continue' request.
    """
    @staticmethod
    def create(thread_id):
        return DAPContinueArguments(thread_id)
    
    def __init__(self, thread_id):
        DAPObject.__init__(self)
        self.threadId = thread_id
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["threadId"] = self.get_thread_id()
        return kwargs
    
    def get_thread_id(self):
        return self.threadId
    
    def set_thread_id(self, thread_id):
        self.threadId = thread_id
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: threadId
        if "threadId" not in override:
            self.serialize_scalar(me, "threadId", self.threadId)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: threadId
        if "threadId" not in override:
            used_args.append("threadId")
            args.append(cls.deserialize_scalar(me["threadId"]))


class DAPContinueResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPContinueResponse(seq, "response", request_seq, success, "continue", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPContinueResponseBody))


class DAPContinueResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(all_threads_continued=__undefined__):
        return DAPContinueResponseBody(all_threads_continued=all_threads_continued)
    
    def __init__(self, all_threads_continued=__undefined__):
        DAPObject.__init__(self)
        self.allThreadsContinued = all_threads_continued
    
    def as_current_kwargs(self):
        kwargs = {}
        if self.has_all_threads_continued():
            kwargs["allThreadsContinued"] = self.get_all_threads_continued()
        return kwargs
    
    def get_all_threads_continued(self):
        if self.allThreadsContinued is __undefined__:
            raise ValueError("allThreadsContinued is not defined")
        return self.allThreadsContinued
    
    def get_all_threads_continued_or_default(self, default=None):
        if self.allThreadsContinued is __undefined__:
            return default
        return self.allThreadsContinued
    
    def has_all_threads_continued(self):
        return self.allThreadsContinued is not __undefined__
    
    def set_all_threads_continued(self, all_threads_continued):
        self.allThreadsContinued = all_threads_continued
        return self
    
    def clear_all_threads_continued(self):
        self.allThreadsContinued = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: allThreadsContinued
        if "allThreadsContinued" not in override:
            if self.allThreadsContinued is not __undefined__:
                self.serialize_scalar(me, "allThreadsContinued", self.allThreadsContinued)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: allThreadsContinued
        if "allThreadsContinued" not in override:
            used_args.append("allThreadsContinued")
            if me is not None and "allThreadsContinued" in me:
                kwargs["all_threads_continued"] = cls.deserialize_scalar(me["allThreadsContinued"])



class DAPNextRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPNextRequest(seq, "request", "next", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPNextArguments))


class DAPNextArguments(DAPObject):
    """
    Arguments for 'next' request.
    """
    @staticmethod
    def create(thread_id):
        return DAPNextArguments(thread_id)
    
    def __init__(self, thread_id):
        DAPObject.__init__(self)
        self.threadId = thread_id
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["threadId"] = self.get_thread_id()
        return kwargs
    
    def get_thread_id(self):
        return self.threadId
    
    def set_thread_id(self, thread_id):
        self.threadId = thread_id
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: threadId
        if "threadId" not in override:
            self.serialize_scalar(me, "threadId", self.threadId)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: threadId
        if "threadId" not in override:
            used_args.append("threadId")
            args.append(cls.deserialize_scalar(me["threadId"]))


class DAPNextResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, message=__undefined__, body=__undefined__):
        return DAPNextResponse(seq, "response", request_seq, success, "next", message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        return kwargs
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))


class DAPSetStepGranularityRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPSetStepGranularityRequest(seq, "request", "setStepGranularity", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPSetStepGranularityArguments))


class DAPSetStepGranularityArguments(DAPObject):
    """
    Arguments for 'setStepGranularity' request.
    """
    @staticmethod
    def create(granularity):
        return DAPSetStepGranularityArguments(granularity)
    
    def __init__(self, granularity):
        DAPObject.__init__(self)
        self.granularity = granularity
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["granularity"] = self.get_granularity()
        return kwargs
    
    def get_granularity(self):
        return self.granularity
    
    def set_granularity(self, granularity):
        self.granularity = granularity
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: granularity
        if "granularity" not in override:
            self.serialize_scalar(me, "granularity", self.granularity)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: granularity
        if "granularity" not in override:
            used_args.append("granularity")
            args.append(cls.deserialize_scalar(me["granularity"]))


class DAPSetStepGranularityResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPSetStepGranularityResponse(seq, "response", request_seq, success, "setStepGranularity", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPSetStepGranularityResponseBody))


class DAPSetStepGranularityResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(granularity):
        return DAPSetStepGranularityResponseBody(granularity)
    
    def __init__(self, granularity):
        DAPObject.__init__(self)
        self.granularity = granularity
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["granularity"] = self.get_granularity()
        return kwargs
    
    def get_granularity(self):
        return self.granularity
    
    def set_granularity(self, granularity):
        self.granularity = granularity
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: granularity
        if "granularity" not in override:
            self.serialize_scalar(me, "granularity", self.granularity)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: granularity
        if "granularity" not in override:
            used_args.append("granularity")
            args.append(cls.deserialize_scalar(me["granularity"]))



class DAPStepInRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPStepInRequest(seq, "request", "stepIn", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPStepInArguments))


class DAPStepInArguments(DAPObject):
    """
    Arguments for 'stepIn' request.
    """
    @staticmethod
    def create(thread_id, target_id=__undefined__):
        return DAPStepInArguments(thread_id, target_id=target_id)
    
    def __init__(self, thread_id, target_id=__undefined__):
        DAPObject.__init__(self)
        self.threadId = thread_id
        self.targetId = target_id
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["threadId"] = self.get_thread_id()
        if self.has_target_id():
            kwargs["targetId"] = self.get_target_id()
        return kwargs
    
    def get_thread_id(self):
        return self.threadId
    
    def set_thread_id(self, thread_id):
        self.threadId = thread_id
        return self
    
    def get_target_id(self):
        if self.targetId is __undefined__:
            raise ValueError("targetId is not defined")
        return self.targetId
    
    def get_target_id_or_default(self, default=None):
        if self.targetId is __undefined__:
            return default
        return self.targetId
    
    def has_target_id(self):
        return self.targetId is not __undefined__
    
    def set_target_id(self, target_id):
        self.targetId = target_id
        return self
    
    def clear_target_id(self):
        self.targetId = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: threadId
        if "threadId" not in override:
            self.serialize_scalar(me, "threadId", self.threadId)
        # property: targetId
        if "targetId" not in override:
            if self.targetId is not __undefined__:
                self.serialize_scalar(me, "targetId", self.targetId)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: threadId
        if "threadId" not in override:
            used_args.append("threadId")
            args.append(cls.deserialize_scalar(me["threadId"]))
        # property: targetId
        if "targetId" not in override:
            used_args.append("targetId")
            if me is not None and "targetId" in me:
                kwargs["target_id"] = cls.deserialize_scalar(me["targetId"])


class DAPStepInResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, message=__undefined__, body=__undefined__):
        return DAPStepInResponse(seq, "response", request_seq, success, "stepIn", message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        return kwargs
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))


class DAPStepOutRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPStepOutRequest(seq, "request", "stepOut", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPStepOutArguments))


class DAPStepOutArguments(DAPObject):
    """
    Arguments for 'stepOut' request.
    """
    @staticmethod
    def create(thread_id):
        return DAPStepOutArguments(thread_id)
    
    def __init__(self, thread_id):
        DAPObject.__init__(self)
        self.threadId = thread_id
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["threadId"] = self.get_thread_id()
        return kwargs
    
    def get_thread_id(self):
        return self.threadId
    
    def set_thread_id(self, thread_id):
        self.threadId = thread_id
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: threadId
        if "threadId" not in override:
            self.serialize_scalar(me, "threadId", self.threadId)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: threadId
        if "threadId" not in override:
            used_args.append("threadId")
            args.append(cls.deserialize_scalar(me["threadId"]))


class DAPStepOutResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, message=__undefined__, body=__undefined__):
        return DAPStepOutResponse(seq, "response", request_seq, success, "stepOut", message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        return kwargs
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))


class DAPStepBackRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPStepBackRequest(seq, "request", "stepBack", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPStepBackArguments))


class DAPStepBackArguments(DAPObject):
    """
    Arguments for 'stepBack' request.
    """
    @staticmethod
    def create(thread_id):
        return DAPStepBackArguments(thread_id)
    
    def __init__(self, thread_id):
        DAPObject.__init__(self)
        self.threadId = thread_id
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["threadId"] = self.get_thread_id()
        return kwargs
    
    def get_thread_id(self):
        return self.threadId
    
    def set_thread_id(self, thread_id):
        self.threadId = thread_id
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: threadId
        if "threadId" not in override:
            self.serialize_scalar(me, "threadId", self.threadId)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: threadId
        if "threadId" not in override:
            used_args.append("threadId")
            args.append(cls.deserialize_scalar(me["threadId"]))


class DAPStepBackResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, message=__undefined__, body=__undefined__):
        return DAPStepBackResponse(seq, "response", request_seq, success, "stepBack", message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        return kwargs
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))


class DAPReverseContinueRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPReverseContinueRequest(seq, "request", "reverseContinue", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPReverseContinueArguments))


class DAPReverseContinueArguments(DAPObject):
    """
    Arguments for 'reverseContinue' request.
    """
    @staticmethod
    def create(thread_id):
        return DAPReverseContinueArguments(thread_id)
    
    def __init__(self, thread_id):
        DAPObject.__init__(self)
        self.threadId = thread_id
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["threadId"] = self.get_thread_id()
        return kwargs
    
    def get_thread_id(self):
        return self.threadId
    
    def set_thread_id(self, thread_id):
        self.threadId = thread_id
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: threadId
        if "threadId" not in override:
            self.serialize_scalar(me, "threadId", self.threadId)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: threadId
        if "threadId" not in override:
            used_args.append("threadId")
            args.append(cls.deserialize_scalar(me["threadId"]))


class DAPReverseContinueResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, message=__undefined__, body=__undefined__):
        return DAPReverseContinueResponse(seq, "response", request_seq, success, "reverseContinue", message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        return kwargs
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))


class DAPRestartFrameRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPRestartFrameRequest(seq, "request", "restartFrame", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPRestartFrameArguments))


class DAPRestartFrameArguments(DAPObject):
    """
    Arguments for 'restartFrame' request.
    """
    @staticmethod
    def create(frame_id):
        return DAPRestartFrameArguments(frame_id)
    
    def __init__(self, frame_id):
        DAPObject.__init__(self)
        self.frameId = frame_id
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["frameId"] = self.get_frame_id()
        return kwargs
    
    def get_frame_id(self):
        return self.frameId
    
    def set_frame_id(self, frame_id):
        self.frameId = frame_id
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: frameId
        if "frameId" not in override:
            self.serialize_scalar(me, "frameId", self.frameId)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: frameId
        if "frameId" not in override:
            used_args.append("frameId")
            args.append(cls.deserialize_scalar(me["frameId"]))


class DAPRestartFrameResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, message=__undefined__, body=__undefined__):
        return DAPRestartFrameResponse(seq, "response", request_seq, success, "restartFrame", message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        return kwargs
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))


class DAPGotoRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPGotoRequest(seq, "request", "goto", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPGotoArguments))


class DAPGotoArguments(DAPObject):
    """
    Arguments for 'goto' request.
    """
    @staticmethod
    def create(thread_id, target_id):
        return DAPGotoArguments(thread_id, target_id)
    
    def __init__(self, thread_id, target_id):
        DAPObject.__init__(self)
        self.threadId = thread_id
        self.targetId = target_id
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["threadId"] = self.get_thread_id()
        kwargs["targetId"] = self.get_target_id()
        return kwargs
    
    def get_thread_id(self):
        return self.threadId
    
    def set_thread_id(self, thread_id):
        self.threadId = thread_id
        return self
    
    def get_target_id(self):
        return self.targetId
    
    def set_target_id(self, target_id):
        self.targetId = target_id
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: threadId
        if "threadId" not in override:
            self.serialize_scalar(me, "threadId", self.threadId)
        # property: targetId
        if "targetId" not in override:
            self.serialize_scalar(me, "targetId", self.targetId)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: threadId
        if "threadId" not in override:
            used_args.append("threadId")
            args.append(cls.deserialize_scalar(me["threadId"]))
        # property: targetId
        if "targetId" not in override:
            used_args.append("targetId")
            args.append(cls.deserialize_scalar(me["targetId"]))


class DAPGotoResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, message=__undefined__, body=__undefined__):
        return DAPGotoResponse(seq, "response", request_seq, success, "goto", message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        return kwargs
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))


class DAPPauseRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPPauseRequest(seq, "request", "pause", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPPauseArguments))


class DAPPauseArguments(DAPObject):
    """
    Arguments for 'pause' request.
    """
    @staticmethod
    def create(thread_id):
        return DAPPauseArguments(thread_id)
    
    def __init__(self, thread_id):
        DAPObject.__init__(self)
        self.threadId = thread_id
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["threadId"] = self.get_thread_id()
        return kwargs
    
    def get_thread_id(self):
        return self.threadId
    
    def set_thread_id(self, thread_id):
        self.threadId = thread_id
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: threadId
        if "threadId" not in override:
            self.serialize_scalar(me, "threadId", self.threadId)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: threadId
        if "threadId" not in override:
            used_args.append("threadId")
            args.append(cls.deserialize_scalar(me["threadId"]))


class DAPPauseResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, message=__undefined__, body=__undefined__):
        return DAPPauseResponse(seq, "response", request_seq, success, "pause", message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        return kwargs
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))


class DAPStackTraceRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPStackTraceRequest(seq, "request", "stackTrace", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPStackTraceArguments))


class DAPStackTraceArguments(DAPObject):
    """
    Arguments for 'stackTrace' request.
    """
    @staticmethod
    def create(thread_id, start_frame=__undefined__, levels=__undefined__, format=__undefined__):
        return DAPStackTraceArguments(thread_id, start_frame=start_frame, levels=levels, format=format)
    
    def __init__(self, thread_id, start_frame=__undefined__, levels=__undefined__, format=__undefined__):
        DAPObject.__init__(self)
        self.threadId = thread_id
        self.startFrame = start_frame
        self.levels = levels
        self.format = format
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["threadId"] = self.get_thread_id()
        if self.has_start_frame():
            kwargs["startFrame"] = self.get_start_frame()
        if self.has_levels():
            kwargs["levels"] = self.get_levels()
        if self.has_format():
            kwargs["format"] = self.get_format()
        return kwargs
    
    def get_thread_id(self):
        return self.threadId
    
    def set_thread_id(self, thread_id):
        self.threadId = thread_id
        return self
    
    def get_start_frame(self):
        if self.startFrame is __undefined__:
            raise ValueError("startFrame is not defined")
        return self.startFrame
    
    def get_start_frame_or_default(self, default=None):
        if self.startFrame is __undefined__:
            return default
        return self.startFrame
    
    def has_start_frame(self):
        return self.startFrame is not __undefined__
    
    def set_start_frame(self, start_frame):
        self.startFrame = start_frame
        return self
    
    def clear_start_frame(self):
        self.startFrame = __undefined__
        return self
    
    def get_levels(self):
        if self.levels is __undefined__:
            raise ValueError("levels is not defined")
        return self.levels
    
    def get_levels_or_default(self, default=None):
        if self.levels is __undefined__:
            return default
        return self.levels
    
    def has_levels(self):
        return self.levels is not __undefined__
    
    def set_levels(self, levels):
        self.levels = levels
        return self
    
    def clear_levels(self):
        self.levels = __undefined__
        return self
    
    def get_format(self):
        if self.format is __undefined__:
            raise ValueError("format is not defined")
        return self.format
    
    def get_format_or_default(self, default=None):
        if self.format is __undefined__:
            return default
        return self.format
    
    def has_format(self):
        return self.format is not __undefined__
    
    def set_format(self, format):
        self.format = format
        return self
    
    def clear_format(self):
        self.format = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: threadId
        if "threadId" not in override:
            self.serialize_scalar(me, "threadId", self.threadId)
        # property: startFrame
        if "startFrame" not in override:
            if self.startFrame is not __undefined__:
                self.serialize_scalar(me, "startFrame", self.startFrame)
        # property: levels
        if "levels" not in override:
            if self.levels is not __undefined__:
                self.serialize_scalar(me, "levels", self.levels)
        # property: format
        if "format" not in override:
            if self.format is not __undefined__:
                me["format"] = self.format.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: threadId
        if "threadId" not in override:
            used_args.append("threadId")
            args.append(cls.deserialize_scalar(me["threadId"]))
        # property: startFrame
        if "startFrame" not in override:
            used_args.append("startFrame")
            if me is not None and "startFrame" in me:
                kwargs["start_frame"] = cls.deserialize_scalar(me["startFrame"])
        # property: levels
        if "levels" not in override:
            used_args.append("levels")
            if me is not None and "levels" in me:
                kwargs["levels"] = cls.deserialize_scalar(me["levels"])
        # property: format
        if "format" not in override:
            used_args.append("format")
            if me is not None and "format" in me:
                kwargs["format"] = cls.deserialize_as(me["format"], DAPStackFrameFormat)


class DAPStackTraceResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPStackTraceResponse(seq, "response", request_seq, success, "stackTrace", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPStackTraceResponseBody))


class DAPStackTraceResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(stack_frames, total_frames=__undefined__):
        return DAPStackTraceResponseBody(stack_frames, total_frames=total_frames)
    
    def __init__(self, stack_frames, total_frames=__undefined__):
        DAPObject.__init__(self)
        self.stackFrames = stack_frames
        self.totalFrames = total_frames
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["stackFrames"] = self.get_stack_frames()
        if self.has_total_frames():
            kwargs["totalFrames"] = self.get_total_frames()
        return kwargs
    
    def get_stack_frames(self):
        return self.stackFrames
    
    def set_stack_frames(self, stack_frames):
        self.stackFrames = stack_frames
        return self
    
    def get_total_frames(self):
        if self.totalFrames is __undefined__:
            raise ValueError("totalFrames is not defined")
        return self.totalFrames
    
    def get_total_frames_or_default(self, default=None):
        if self.totalFrames is __undefined__:
            return default
        return self.totalFrames
    
    def has_total_frames(self):
        return self.totalFrames is not __undefined__
    
    def set_total_frames(self, total_frames):
        self.totalFrames = total_frames
        return self
    
    def clear_total_frames(self):
        self.totalFrames = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: stackFrames
        if "stackFrames" not in override:
            self.serialize_scalar(me, "stackFrames", self.stackFrames, hint=DAPStackFrame)
        # property: totalFrames
        if "totalFrames" not in override:
            if self.totalFrames is not __undefined__:
                self.serialize_scalar(me, "totalFrames", self.totalFrames)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: stackFrames
        if "stackFrames" not in override:
            used_args.append("stackFrames")
            args.append(cls.deserialize_scalar(me["stackFrames"], hint=DAPStackFrame))
        # property: totalFrames
        if "totalFrames" not in override:
            used_args.append("totalFrames")
            if me is not None and "totalFrames" in me:
                kwargs["total_frames"] = cls.deserialize_scalar(me["totalFrames"])



class DAPScopesRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPScopesRequest(seq, "request", "scopes", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPScopesArguments))


class DAPScopesArguments(DAPObject):
    """
    Arguments for 'scopes' request.
    """
    @staticmethod
    def create(frame_id):
        return DAPScopesArguments(frame_id)
    
    def __init__(self, frame_id):
        DAPObject.__init__(self)
        self.frameId = frame_id
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["frameId"] = self.get_frame_id()
        return kwargs
    
    def get_frame_id(self):
        return self.frameId
    
    def set_frame_id(self, frame_id):
        self.frameId = frame_id
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: frameId
        if "frameId" not in override:
            self.serialize_scalar(me, "frameId", self.frameId)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: frameId
        if "frameId" not in override:
            used_args.append("frameId")
            args.append(cls.deserialize_scalar(me["frameId"]))


class DAPScopesResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPScopesResponse(seq, "response", request_seq, success, "scopes", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPScopesResponseBody))


class DAPScopesResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(scopes):
        return DAPScopesResponseBody(scopes)
    
    def __init__(self, scopes):
        DAPObject.__init__(self)
        self.scopes = scopes
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["scopes"] = self.get_scopes()
        return kwargs
    
    def get_scopes(self):
        return self.scopes
    
    def set_scopes(self, scopes):
        self.scopes = scopes
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: scopes
        if "scopes" not in override:
            self.serialize_scalar(me, "scopes", self.scopes, hint=DAPScope)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: scopes
        if "scopes" not in override:
            used_args.append("scopes")
            args.append(cls.deserialize_scalar(me["scopes"], hint=DAPScope))



class DAPVariablesRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPVariablesRequest(seq, "request", "variables", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPVariablesArguments))


class DAPVariablesArguments(DAPObject):
    """
    Arguments for 'variables' request.
    """
    @staticmethod
    def create(variables_reference, filter=__undefined__, start=__undefined__, count=__undefined__, format=__undefined__):
        return DAPVariablesArguments(variables_reference, filter=filter, start=start, count=count, format=format)
    
    def __init__(self, variables_reference, filter=__undefined__, start=__undefined__, count=__undefined__, format=__undefined__):
        DAPObject.__init__(self)
        self.variablesReference = variables_reference
        self.filter = filter
        self.start = start
        self.count = count
        self.format = format
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["variablesReference"] = self.get_variables_reference()
        if self.has_filter():
            kwargs["filter"] = self.get_filter()
        if self.has_start():
            kwargs["start"] = self.get_start()
        if self.has_count():
            kwargs["count"] = self.get_count()
        if self.has_format():
            kwargs["format"] = self.get_format()
        return kwargs
    
    def get_variables_reference(self):
        return self.variablesReference
    
    def set_variables_reference(self, variables_reference):
        self.variablesReference = variables_reference
        return self
    
    def get_filter(self):
        if self.filter is __undefined__:
            raise ValueError("filter is not defined")
        return self.filter
    
    def get_filter_or_default(self, default=None):
        if self.filter is __undefined__:
            return default
        return self.filter
    
    def has_filter(self):
        return self.filter is not __undefined__
    
    def set_filter(self, filter):
        self.filter = filter
        return self
    
    def clear_filter(self):
        self.filter = __undefined__
        return self
    
    def get_start(self):
        if self.start is __undefined__:
            raise ValueError("start is not defined")
        return self.start
    
    def get_start_or_default(self, default=None):
        if self.start is __undefined__:
            return default
        return self.start
    
    def has_start(self):
        return self.start is not __undefined__
    
    def set_start(self, start):
        self.start = start
        return self
    
    def clear_start(self):
        self.start = __undefined__
        return self
    
    def get_count(self):
        if self.count is __undefined__:
            raise ValueError("count is not defined")
        return self.count
    
    def get_count_or_default(self, default=None):
        if self.count is __undefined__:
            return default
        return self.count
    
    def has_count(self):
        return self.count is not __undefined__
    
    def set_count(self, count):
        self.count = count
        return self
    
    def clear_count(self):
        self.count = __undefined__
        return self
    
    def get_format(self):
        if self.format is __undefined__:
            raise ValueError("format is not defined")
        return self.format
    
    def get_format_or_default(self, default=None):
        if self.format is __undefined__:
            return default
        return self.format
    
    def has_format(self):
        return self.format is not __undefined__
    
    def set_format(self, format):
        self.format = format
        return self
    
    def clear_format(self):
        self.format = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: variablesReference
        if "variablesReference" not in override:
            self.serialize_scalar(me, "variablesReference", self.variablesReference)
        # property: filter
        if "filter" not in override:
            if self.filter is not __undefined__:
                self.serialize_scalar(me, "filter", self.filter)
        # property: start
        if "start" not in override:
            if self.start is not __undefined__:
                self.serialize_scalar(me, "start", self.start)
        # property: count
        if "count" not in override:
            if self.count is not __undefined__:
                self.serialize_scalar(me, "count", self.count)
        # property: format
        if "format" not in override:
            if self.format is not __undefined__:
                me["format"] = self.format.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: variablesReference
        if "variablesReference" not in override:
            used_args.append("variablesReference")
            args.append(cls.deserialize_scalar(me["variablesReference"]))
        # property: filter
        if "filter" not in override:
            used_args.append("filter")
            if me is not None and "filter" in me:
                kwargs["filter"] = cls.deserialize_scalar(me["filter"])
        # property: start
        if "start" not in override:
            used_args.append("start")
            if me is not None and "start" in me:
                kwargs["start"] = cls.deserialize_scalar(me["start"])
        # property: count
        if "count" not in override:
            used_args.append("count")
            if me is not None and "count" in me:
                kwargs["count"] = cls.deserialize_scalar(me["count"])
        # property: format
        if "format" not in override:
            used_args.append("format")
            if me is not None and "format" in me:
                kwargs["format"] = cls.deserialize_as(me["format"], DAPValueFormat)


class DAPVariablesResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPVariablesResponse(seq, "response", request_seq, success, "variables", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPVariablesResponseBody))


class DAPVariablesResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(variables):
        return DAPVariablesResponseBody(variables)
    
    def __init__(self, variables):
        DAPObject.__init__(self)
        self.variables = variables
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["variables"] = self.get_variables()
        return kwargs
    
    def get_variables(self):
        return self.variables
    
    def set_variables(self, variables):
        self.variables = variables
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: variables
        if "variables" not in override:
            self.serialize_scalar(me, "variables", self.variables, hint=DAPVariable)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: variables
        if "variables" not in override:
            used_args.append("variables")
            args.append(cls.deserialize_scalar(me["variables"], hint=DAPVariable))



class DAPSetVariableRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPSetVariableRequest(seq, "request", "setVariable", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPSetVariableArguments))


class DAPSetVariableArguments(DAPObject):
    """
    Arguments for 'setVariable' request.
    """
    @staticmethod
    def create(variables_reference, name, value, format=__undefined__):
        return DAPSetVariableArguments(variables_reference, name, value, format=format)
    
    def __init__(self, variables_reference, name, value, format=__undefined__):
        DAPObject.__init__(self)
        self.variablesReference = variables_reference
        self.name = name
        self.value = value
        self.format = format
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["variablesReference"] = self.get_variables_reference()
        kwargs["name"] = self.get_name()
        kwargs["value"] = self.get_value()
        if self.has_format():
            kwargs["format"] = self.get_format()
        return kwargs
    
    def get_variables_reference(self):
        return self.variablesReference
    
    def set_variables_reference(self, variables_reference):
        self.variablesReference = variables_reference
        return self
    
    def get_name(self):
        return self.name
    
    def set_name(self, name):
        self.name = name
        return self
    
    def get_value(self):
        return self.value
    
    def set_value(self, value):
        self.value = value
        return self
    
    def get_format(self):
        if self.format is __undefined__:
            raise ValueError("format is not defined")
        return self.format
    
    def get_format_or_default(self, default=None):
        if self.format is __undefined__:
            return default
        return self.format
    
    def has_format(self):
        return self.format is not __undefined__
    
    def set_format(self, format):
        self.format = format
        return self
    
    def clear_format(self):
        self.format = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: variablesReference
        if "variablesReference" not in override:
            self.serialize_scalar(me, "variablesReference", self.variablesReference)
        # property: name
        if "name" not in override:
            self.serialize_scalar(me, "name", self.name)
        # property: value
        if "value" not in override:
            self.serialize_scalar(me, "value", self.value)
        # property: format
        if "format" not in override:
            if self.format is not __undefined__:
                me["format"] = self.format.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: variablesReference
        if "variablesReference" not in override:
            used_args.append("variablesReference")
            args.append(cls.deserialize_scalar(me["variablesReference"]))
        # property: name
        if "name" not in override:
            used_args.append("name")
            args.append(cls.deserialize_scalar(me["name"]))
        # property: value
        if "value" not in override:
            used_args.append("value")
            args.append(cls.deserialize_scalar(me["value"]))
        # property: format
        if "format" not in override:
            used_args.append("format")
            if me is not None and "format" in me:
                kwargs["format"] = cls.deserialize_as(me["format"], DAPValueFormat)


class DAPSetVariableResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPSetVariableResponse(seq, "response", request_seq, success, "setVariable", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPSetVariableResponseBody))


class DAPSetVariableResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(value, type=__undefined__, variables_reference=__undefined__, named_variables=__undefined__, indexed_variables=__undefined__):
        return DAPSetVariableResponseBody(value, type=type, variables_reference=variables_reference, named_variables=named_variables, indexed_variables=indexed_variables)
    
    def __init__(self, value, type=__undefined__, variables_reference=__undefined__, named_variables=__undefined__, indexed_variables=__undefined__):
        DAPObject.__init__(self)
        self.value = value
        self.type = type
        self.variablesReference = variables_reference
        self.namedVariables = named_variables
        self.indexedVariables = indexed_variables
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["value"] = self.get_value()
        if self.has_type():
            kwargs["type"] = self.get_type()
        if self.has_variables_reference():
            kwargs["variablesReference"] = self.get_variables_reference()
        if self.has_named_variables():
            kwargs["namedVariables"] = self.get_named_variables()
        if self.has_indexed_variables():
            kwargs["indexedVariables"] = self.get_indexed_variables()
        return kwargs
    
    def get_value(self):
        return self.value
    
    def set_value(self, value):
        self.value = value
        return self
    
    def get_type(self):
        if self.type is __undefined__:
            raise ValueError("type is not defined")
        return self.type
    
    def get_type_or_default(self, default=None):
        if self.type is __undefined__:
            return default
        return self.type
    
    def has_type(self):
        return self.type is not __undefined__
    
    def set_type(self, type):
        self.type = type
        return self
    
    def clear_type(self):
        self.type = __undefined__
        return self
    
    def get_variables_reference(self):
        if self.variablesReference is __undefined__:
            raise ValueError("variablesReference is not defined")
        return self.variablesReference
    
    def get_variables_reference_or_default(self, default=None):
        if self.variablesReference is __undefined__:
            return default
        return self.variablesReference
    
    def has_variables_reference(self):
        return self.variablesReference is not __undefined__
    
    def set_variables_reference(self, variables_reference):
        self.variablesReference = variables_reference
        return self
    
    def clear_variables_reference(self):
        self.variablesReference = __undefined__
        return self
    
    def get_named_variables(self):
        if self.namedVariables is __undefined__:
            raise ValueError("namedVariables is not defined")
        return self.namedVariables
    
    def get_named_variables_or_default(self, default=None):
        if self.namedVariables is __undefined__:
            return default
        return self.namedVariables
    
    def has_named_variables(self):
        return self.namedVariables is not __undefined__
    
    def set_named_variables(self, named_variables):
        self.namedVariables = named_variables
        return self
    
    def clear_named_variables(self):
        self.namedVariables = __undefined__
        return self
    
    def get_indexed_variables(self):
        if self.indexedVariables is __undefined__:
            raise ValueError("indexedVariables is not defined")
        return self.indexedVariables
    
    def get_indexed_variables_or_default(self, default=None):
        if self.indexedVariables is __undefined__:
            return default
        return self.indexedVariables
    
    def has_indexed_variables(self):
        return self.indexedVariables is not __undefined__
    
    def set_indexed_variables(self, indexed_variables):
        self.indexedVariables = indexed_variables
        return self
    
    def clear_indexed_variables(self):
        self.indexedVariables = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: value
        if "value" not in override:
            self.serialize_scalar(me, "value", self.value)
        # property: type
        if "type" not in override:
            if self.type is not __undefined__:
                self.serialize_scalar(me, "type", self.type)
        # property: variablesReference
        if "variablesReference" not in override:
            if self.variablesReference is not __undefined__:
                self.serialize_scalar(me, "variablesReference", self.variablesReference)
        # property: namedVariables
        if "namedVariables" not in override:
            if self.namedVariables is not __undefined__:
                self.serialize_scalar(me, "namedVariables", self.namedVariables)
        # property: indexedVariables
        if "indexedVariables" not in override:
            if self.indexedVariables is not __undefined__:
                self.serialize_scalar(me, "indexedVariables", self.indexedVariables)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: value
        if "value" not in override:
            used_args.append("value")
            args.append(cls.deserialize_scalar(me["value"]))
        # property: type
        if "type" not in override:
            used_args.append("type")
            if me is not None and "type" in me:
                kwargs["type"] = cls.deserialize_scalar(me["type"])
        # property: variablesReference
        if "variablesReference" not in override:
            used_args.append("variablesReference")
            if me is not None and "variablesReference" in me:
                kwargs["variables_reference"] = cls.deserialize_scalar(me["variablesReference"])
        # property: namedVariables
        if "namedVariables" not in override:
            used_args.append("namedVariables")
            if me is not None and "namedVariables" in me:
                kwargs["named_variables"] = cls.deserialize_scalar(me["namedVariables"])
        # property: indexedVariables
        if "indexedVariables" not in override:
            used_args.append("indexedVariables")
            if me is not None and "indexedVariables" in me:
                kwargs["indexed_variables"] = cls.deserialize_scalar(me["indexedVariables"])



class DAPSourceRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPSourceRequest(seq, "request", "source", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPSourceArguments))


class DAPSourceArguments(DAPObject):
    """
    Arguments for 'source' request.
    """
    @staticmethod
    def create(source_reference, source=__undefined__):
        return DAPSourceArguments(source_reference, source=source)
    
    def __init__(self, source_reference, source=__undefined__):
        DAPObject.__init__(self)
        self.source = source
        self.sourceReference = source_reference
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["sourceReference"] = self.get_source_reference()
        if self.has_source():
            kwargs["source"] = self.get_source()
        return kwargs
    
    def get_source(self):
        if self.source is __undefined__:
            raise ValueError("source is not defined")
        return self.source
    
    def get_source_or_default(self, default=None):
        if self.source is __undefined__:
            return default
        return self.source
    
    def has_source(self):
        return self.source is not __undefined__
    
    def set_source(self, source):
        self.source = source
        return self
    
    def clear_source(self):
        self.source = __undefined__
        return self
    
    def get_source_reference(self):
        return self.sourceReference
    
    def set_source_reference(self, source_reference):
        self.sourceReference = source_reference
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: source
        if "source" not in override:
            if self.source is not __undefined__:
                me["source"] = self.source.serialize()
        # property: sourceReference
        if "sourceReference" not in override:
            self.serialize_scalar(me, "sourceReference", self.sourceReference)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: source
        if "source" not in override:
            used_args.append("source")
            if me is not None and "source" in me:
                kwargs["source"] = cls.deserialize_as(me["source"], DAPSource)
        # property: sourceReference
        if "sourceReference" not in override:
            used_args.append("sourceReference")
            args.append(cls.deserialize_scalar(me["sourceReference"]))


class DAPSourceResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPSourceResponse(seq, "response", request_seq, success, "sourceReference", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPSourceResponseBody))


class DAPSourceResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(content, mime_type=__undefined__):
        return DAPSourceResponseBody(content, mime_type=mime_type)
    
    def __init__(self, content, mime_type=__undefined__):
        DAPObject.__init__(self)
        self.content = content
        self.mimeType = mime_type
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["content"] = self.get_content()
        if self.has_mime_type():
            kwargs["mimeType"] = self.get_mime_type()
        return kwargs
    
    def get_content(self):
        return self.content
    
    def set_content(self, content):
        self.content = content
        return self
    
    def get_mime_type(self):
        if self.mimeType is __undefined__:
            raise ValueError("mimeType is not defined")
        return self.mimeType
    
    def get_mime_type_or_default(self, default=None):
        if self.mimeType is __undefined__:
            return default
        return self.mimeType
    
    def has_mime_type(self):
        return self.mimeType is not __undefined__
    
    def set_mime_type(self, mime_type):
        self.mimeType = mime_type
        return self
    
    def clear_mime_type(self):
        self.mimeType = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: content
        if "content" not in override:
            self.serialize_scalar(me, "content", self.content)
        # property: mimeType
        if "mimeType" not in override:
            if self.mimeType is not __undefined__:
                self.serialize_scalar(me, "mimeType", self.mimeType)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: content
        if "content" not in override:
            used_args.append("content")
            args.append(cls.deserialize_scalar(me["content"]))
        # property: mimeType
        if "mimeType" not in override:
            used_args.append("mimeType")
            if me is not None and "mimeType" in me:
                kwargs["mime_type"] = cls.deserialize_scalar(me["mimeType"])



class DAPThreadsRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments=__undefined__):
        return DAPThreadsRequest(seq, "request", "threads", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments=__undefined__):
        DAPRequest.__init__(self, seq, type, command, arguments)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        return kwargs
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))


class DAPThreadsResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPThreadsResponse(seq, "response", request_seq, success, "threads", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPThreadsResponseBody))


class DAPThreadsResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(threads):
        return DAPThreadsResponseBody(threads)
    
    def __init__(self, threads):
        DAPObject.__init__(self)
        self.threads = threads
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["threads"] = self.get_threads()
        return kwargs
    
    def get_threads(self):
        return self.threads
    
    def set_threads(self, threads):
        self.threads = threads
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: threads
        if "threads" not in override:
            self.serialize_scalar(me, "threads", self.threads, hint=DAPThread)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: threads
        if "threads" not in override:
            used_args.append("threads")
            args.append(cls.deserialize_scalar(me["threads"], hint=DAPThread))



class DAPTerminateThreadsRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPTerminateThreadsRequest(seq, "request", "terminateThreads", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPTerminateThreadsArguments))


class DAPTerminateThreadsArguments(DAPObject):
    """
    Arguments for 'terminateThreads' request.
    """
    @staticmethod
    def create(thread_ids=__undefined__):
        return DAPTerminateThreadsArguments(thread_ids=thread_ids)
    
    def __init__(self, thread_ids=__undefined__):
        DAPObject.__init__(self)
        self.threadIds = thread_ids
    
    def as_current_kwargs(self):
        kwargs = {}
        if self.has_thread_ids():
            kwargs["threadIds"] = self.get_thread_ids()
        return kwargs
    
    def get_thread_ids(self):
        if self.threadIds is __undefined__:
            raise ValueError("threadIds is not defined")
        return self.threadIds
    
    def get_thread_ids_or_default(self, default=None):
        if self.threadIds is __undefined__:
            return default
        return self.threadIds
    
    def has_thread_ids(self):
        return self.threadIds is not __undefined__
    
    def set_thread_ids(self, thread_ids):
        self.threadIds = thread_ids
        return self
    
    def clear_thread_ids(self):
        self.threadIds = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: threadIds
        if "threadIds" not in override:
            if self.threadIds is not __undefined__:
                self.serialize_scalar(me, "threadIds", self.threadIds)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: threadIds
        if "threadIds" not in override:
            used_args.append("threadIds")
            if me is not None and "threadIds" in me:
                kwargs["thread_ids"] = cls.deserialize_scalar(me["threadIds"])


class DAPTerminateThreadsResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, message=__undefined__, body=__undefined__):
        return DAPTerminateThreadsResponse(seq, "response", request_seq, success, "launch", message=message, body=body)
    
    def __init__(self, seq, type, request_seq, success, command, message=__undefined__, body=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        return kwargs
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))


class DAPModulesRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPModulesRequest(seq, "request", "modules", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPModulesArguments))


class DAPModulesArguments(DAPObject):
    """
    Arguments for 'modules' request.
    """
    @staticmethod
    def create(start_module=__undefined__, module_count=__undefined__):
        return DAPModulesArguments(start_module=start_module, module_count=module_count)
    
    def __init__(self, start_module=__undefined__, module_count=__undefined__):
        DAPObject.__init__(self)
        self.startModule = start_module
        self.moduleCount = module_count
    
    def as_current_kwargs(self):
        kwargs = {}
        if self.has_start_module():
            kwargs["startModule"] = self.get_start_module()
        if self.has_module_count():
            kwargs["moduleCount"] = self.get_module_count()
        return kwargs
    
    def get_start_module(self):
        if self.startModule is __undefined__:
            raise ValueError("startModule is not defined")
        return self.startModule
    
    def get_start_module_or_default(self, default=None):
        if self.startModule is __undefined__:
            return default
        return self.startModule
    
    def has_start_module(self):
        return self.startModule is not __undefined__
    
    def set_start_module(self, start_module):
        self.startModule = start_module
        return self
    
    def clear_start_module(self):
        self.startModule = __undefined__
        return self
    
    def get_module_count(self):
        if self.moduleCount is __undefined__:
            raise ValueError("moduleCount is not defined")
        return self.moduleCount
    
    def get_module_count_or_default(self, default=None):
        if self.moduleCount is __undefined__:
            return default
        return self.moduleCount
    
    def has_module_count(self):
        return self.moduleCount is not __undefined__
    
    def set_module_count(self, module_count):
        self.moduleCount = module_count
        return self
    
    def clear_module_count(self):
        self.moduleCount = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: startModule
        if "startModule" not in override:
            if self.startModule is not __undefined__:
                self.serialize_scalar(me, "startModule", self.startModule)
        # property: moduleCount
        if "moduleCount" not in override:
            if self.moduleCount is not __undefined__:
                self.serialize_scalar(me, "moduleCount", self.moduleCount)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: startModule
        if "startModule" not in override:
            used_args.append("startModule")
            if me is not None and "startModule" in me:
                kwargs["start_module"] = cls.deserialize_scalar(me["startModule"])
        # property: moduleCount
        if "moduleCount" not in override:
            used_args.append("moduleCount")
            if me is not None and "moduleCount" in me:
                kwargs["module_count"] = cls.deserialize_scalar(me["moduleCount"])


class DAPModulesResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPModulesResponse(seq, "response", request_seq, success, "modules", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPModulesResponseBody))


class DAPModulesResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(modules, total_modules=__undefined__):
        return DAPModulesResponseBody(modules, total_modules=total_modules)
    
    def __init__(self, modules, total_modules=__undefined__):
        DAPObject.__init__(self)
        self.modules = modules
        self.totalModules = total_modules
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["modules"] = self.get_modules()
        if self.has_total_modules():
            kwargs["totalModules"] = self.get_total_modules()
        return kwargs
    
    def get_modules(self):
        return self.modules
    
    def set_modules(self, modules):
        self.modules = modules
        return self
    
    def get_total_modules(self):
        if self.totalModules is __undefined__:
            raise ValueError("totalModules is not defined")
        return self.totalModules
    
    def get_total_modules_or_default(self, default=None):
        if self.totalModules is __undefined__:
            return default
        return self.totalModules
    
    def has_total_modules(self):
        return self.totalModules is not __undefined__
    
    def set_total_modules(self, total_modules):
        self.totalModules = total_modules
        return self
    
    def clear_total_modules(self):
        self.totalModules = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: modules
        if "modules" not in override:
            self.serialize_scalar(me, "modules", self.modules, hint=DAPModule)
        # property: totalModules
        if "totalModules" not in override:
            if self.totalModules is not __undefined__:
                self.serialize_scalar(me, "totalModules", self.totalModules)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: modules
        if "modules" not in override:
            used_args.append("modules")
            args.append(cls.deserialize_scalar(me["modules"], hint=DAPModule))
        # property: totalModules
        if "totalModules" not in override:
            used_args.append("totalModules")
            if me is not None and "totalModules" in me:
                kwargs["total_modules"] = cls.deserialize_scalar(me["totalModules"])



class DAPLoadedSourcesRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments=__undefined__):
        return DAPLoadedSourcesRequest(seq, "request", "loadedSources", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments=__undefined__):
        DAPRequest.__init__(self, seq, type, command, arguments)
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        if self.has_arguments():
            kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            if self.arguments is not __undefined__:
                me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            if me is not None and "arguments" in me:
                kwargs["arguments"] = cls.deserialize_as(me["arguments"], DAPLoadedSourcesArguments)


class DAPLoadedSourcesArguments(DAPObject):
    """
    Arguments for 'loadedSources' request.
    """
    @staticmethod
    def create():
        return DAPLoadedSourcesArguments()
    
    def __init__(self):
        DAPObject.__init__(self)
    
    def as_current_kwargs(self):
        kwargs = {}
        return kwargs
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        


class DAPLoadedSourcesResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPLoadedSourcesResponse(seq, "response", request_seq, success, "loadedSources", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPLoadedSourcesResponseBody))


class DAPLoadedSourcesResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(sources):
        return DAPLoadedSourcesResponseBody(sources)
    
    def __init__(self, sources):
        DAPObject.__init__(self)
        self.sources = sources
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["sources"] = self.get_sources()
        return kwargs
    
    def get_sources(self):
        return self.sources
    
    def set_sources(self, sources):
        self.sources = sources
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: sources
        if "sources" not in override:
            self.serialize_scalar(me, "sources", self.sources, hint=DAPSource)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: sources
        if "sources" not in override:
            used_args.append("sources")
            args.append(cls.deserialize_scalar(me["sources"], hint=DAPSource))



class DAPEvaluateRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPEvaluateRequest(seq, "request", "evaluate", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPEvaluateArguments))


class DAPEvaluateArguments(DAPObject):
    """
    Arguments for 'evaluate' request.
    """
    @staticmethod
    def create(expression, frame_id=__undefined__, context=__undefined__, format=__undefined__):
        return DAPEvaluateArguments(expression, frame_id=frame_id, context=context, format=format)
    
    def __init__(self, expression, frame_id=__undefined__, context=__undefined__, format=__undefined__):
        DAPObject.__init__(self)
        self.expression = expression
        self.frameId = frame_id
        self.context = context
        self.format = format
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["expression"] = self.get_expression()
        if self.has_frame_id():
            kwargs["frameId"] = self.get_frame_id()
        if self.has_context():
            kwargs["context"] = self.get_context()
        if self.has_format():
            kwargs["format"] = self.get_format()
        return kwargs
    
    def get_expression(self):
        return self.expression
    
    def set_expression(self, expression):
        self.expression = expression
        return self
    
    def get_frame_id(self):
        if self.frameId is __undefined__:
            raise ValueError("frameId is not defined")
        return self.frameId
    
    def get_frame_id_or_default(self, default=None):
        if self.frameId is __undefined__:
            return default
        return self.frameId
    
    def has_frame_id(self):
        return self.frameId is not __undefined__
    
    def set_frame_id(self, frame_id):
        self.frameId = frame_id
        return self
    
    def clear_frame_id(self):
        self.frameId = __undefined__
        return self
    
    def get_context(self):
        if self.context is __undefined__:
            raise ValueError("context is not defined")
        return self.context
    
    def get_context_or_default(self, default=None):
        if self.context is __undefined__:
            return default
        return self.context
    
    def has_context(self):
        return self.context is not __undefined__
    
    def set_context(self, context):
        self.context = context
        return self
    
    def clear_context(self):
        self.context = __undefined__
        return self
    
    def get_format(self):
        if self.format is __undefined__:
            raise ValueError("format is not defined")
        return self.format
    
    def get_format_or_default(self, default=None):
        if self.format is __undefined__:
            return default
        return self.format
    
    def has_format(self):
        return self.format is not __undefined__
    
    def set_format(self, format):
        self.format = format
        return self
    
    def clear_format(self):
        self.format = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: expression
        if "expression" not in override:
            self.serialize_scalar(me, "expression", self.expression)
        # property: frameId
        if "frameId" not in override:
            if self.frameId is not __undefined__:
                self.serialize_scalar(me, "frameId", self.frameId)
        # property: context
        if "context" not in override:
            if self.context is not __undefined__:
                self.serialize_scalar(me, "context", self.context)
        # property: format
        if "format" not in override:
            if self.format is not __undefined__:
                me["format"] = self.format.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: expression
        if "expression" not in override:
            used_args.append("expression")
            args.append(cls.deserialize_scalar(me["expression"]))
        # property: frameId
        if "frameId" not in override:
            used_args.append("frameId")
            if me is not None and "frameId" in me:
                kwargs["frame_id"] = cls.deserialize_scalar(me["frameId"])
        # property: context
        if "context" not in override:
            used_args.append("context")
            if me is not None and "context" in me:
                kwargs["context"] = cls.deserialize_scalar(me["context"])
        # property: format
        if "format" not in override:
            used_args.append("format")
            if me is not None and "format" in me:
                kwargs["format"] = cls.deserialize_as(me["format"], DAPValueFormat)


class DAPEvaluateResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPEvaluateResponse(seq, "response", request_seq, success, "evaluate", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPEvaluateResponseBody))


class DAPEvaluateResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(result, variables_reference, type=__undefined__, presentation_hint=__undefined__, named_variables=__undefined__, indexed_variables=__undefined__):
        return DAPEvaluateResponseBody(result, variables_reference, type=type, presentation_hint=presentation_hint, named_variables=named_variables, indexed_variables=indexed_variables)
    
    def __init__(self, result, variables_reference, type=__undefined__, presentation_hint=__undefined__, named_variables=__undefined__, indexed_variables=__undefined__):
        DAPObject.__init__(self)
        self.result = result
        self.type = type
        self.presentationHint = presentation_hint
        self.variablesReference = variables_reference
        self.namedVariables = named_variables
        self.indexedVariables = indexed_variables
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["result"] = self.get_result()
        kwargs["variablesReference"] = self.get_variables_reference()
        if self.has_type():
            kwargs["type"] = self.get_type()
        if self.has_presentation_hint():
            kwargs["presentationHint"] = self.get_presentation_hint()
        if self.has_named_variables():
            kwargs["namedVariables"] = self.get_named_variables()
        if self.has_indexed_variables():
            kwargs["indexedVariables"] = self.get_indexed_variables()
        return kwargs
    
    def get_result(self):
        return self.result
    
    def set_result(self, result):
        self.result = result
        return self
    
    def get_type(self):
        if self.type is __undefined__:
            raise ValueError("type is not defined")
        return self.type
    
    def get_type_or_default(self, default=None):
        if self.type is __undefined__:
            return default
        return self.type
    
    def has_type(self):
        return self.type is not __undefined__
    
    def set_type(self, type):
        self.type = type
        return self
    
    def clear_type(self):
        self.type = __undefined__
        return self
    
    def get_presentation_hint(self):
        if self.presentationHint is __undefined__:
            raise ValueError("presentationHint is not defined")
        return self.presentationHint
    
    def get_presentation_hint_or_default(self, default=None):
        if self.presentationHint is __undefined__:
            return default
        return self.presentationHint
    
    def has_presentation_hint(self):
        return self.presentationHint is not __undefined__
    
    def set_presentation_hint(self, presentation_hint):
        self.presentationHint = presentation_hint
        return self
    
    def clear_presentation_hint(self):
        self.presentationHint = __undefined__
        return self
    
    def get_variables_reference(self):
        return self.variablesReference
    
    def set_variables_reference(self, variables_reference):
        self.variablesReference = variables_reference
        return self
    
    def get_named_variables(self):
        if self.namedVariables is __undefined__:
            raise ValueError("namedVariables is not defined")
        return self.namedVariables
    
    def get_named_variables_or_default(self, default=None):
        if self.namedVariables is __undefined__:
            return default
        return self.namedVariables
    
    def has_named_variables(self):
        return self.namedVariables is not __undefined__
    
    def set_named_variables(self, named_variables):
        self.namedVariables = named_variables
        return self
    
    def clear_named_variables(self):
        self.namedVariables = __undefined__
        return self
    
    def get_indexed_variables(self):
        if self.indexedVariables is __undefined__:
            raise ValueError("indexedVariables is not defined")
        return self.indexedVariables
    
    def get_indexed_variables_or_default(self, default=None):
        if self.indexedVariables is __undefined__:
            return default
        return self.indexedVariables
    
    def has_indexed_variables(self):
        return self.indexedVariables is not __undefined__
    
    def set_indexed_variables(self, indexed_variables):
        self.indexedVariables = indexed_variables
        return self
    
    def clear_indexed_variables(self):
        self.indexedVariables = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: result
        if "result" not in override:
            self.serialize_scalar(me, "result", self.result)
        # property: type
        if "type" not in override:
            if self.type is not __undefined__:
                self.serialize_scalar(me, "type", self.type)
        # property: presentationHint
        if "presentationHint" not in override:
            if self.presentationHint is not __undefined__:
                me["presentationHint"] = self.presentationHint.serialize()
        # property: variablesReference
        if "variablesReference" not in override:
            self.serialize_scalar(me, "variablesReference", self.variablesReference)
        # property: namedVariables
        if "namedVariables" not in override:
            if self.namedVariables is not __undefined__:
                self.serialize_scalar(me, "namedVariables", self.namedVariables)
        # property: indexedVariables
        if "indexedVariables" not in override:
            if self.indexedVariables is not __undefined__:
                self.serialize_scalar(me, "indexedVariables", self.indexedVariables)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: result
        if "result" not in override:
            used_args.append("result")
            args.append(cls.deserialize_scalar(me["result"]))
        # property: type
        if "type" not in override:
            used_args.append("type")
            if me is not None and "type" in me:
                kwargs["type"] = cls.deserialize_scalar(me["type"])
        # property: presentationHint
        if "presentationHint" not in override:
            used_args.append("presentationHint")
            if me is not None and "presentationHint" in me:
                kwargs["presentation_hint"] = cls.deserialize_as(me["presentationHint"], DAPVariablePresentationHint)
        # property: variablesReference
        if "variablesReference" not in override:
            used_args.append("variablesReference")
            args.append(cls.deserialize_scalar(me["variablesReference"]))
        # property: namedVariables
        if "namedVariables" not in override:
            used_args.append("namedVariables")
            if me is not None and "namedVariables" in me:
                kwargs["named_variables"] = cls.deserialize_scalar(me["namedVariables"])
        # property: indexedVariables
        if "indexedVariables" not in override:
            used_args.append("indexedVariables")
            if me is not None and "indexedVariables" in me:
                kwargs["indexed_variables"] = cls.deserialize_scalar(me["indexedVariables"])



class DAPSetExpressionRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPSetExpressionRequest(seq, "request", "setExpression", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPSetExpressionArguments))


class DAPSetExpressionArguments(DAPObject):
    """
    Arguments for 'setExpression' request.
    """
    @staticmethod
    def create(expression, value, frame_id=__undefined__, format=__undefined__):
        return DAPSetExpressionArguments(expression, value, frame_id=frame_id, format=format)
    
    def __init__(self, expression, value, frame_id=__undefined__, format=__undefined__):
        DAPObject.__init__(self)
        self.expression = expression
        self.value = value
        self.frameId = frame_id
        self.format = format
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["expression"] = self.get_expression()
        kwargs["value"] = self.get_value()
        if self.has_frame_id():
            kwargs["frameId"] = self.get_frame_id()
        if self.has_format():
            kwargs["format"] = self.get_format()
        return kwargs
    
    def get_expression(self):
        return self.expression
    
    def set_expression(self, expression):
        self.expression = expression
        return self
    
    def get_value(self):
        return self.value
    
    def set_value(self, value):
        self.value = value
        return self
    
    def get_frame_id(self):
        if self.frameId is __undefined__:
            raise ValueError("frameId is not defined")
        return self.frameId
    
    def get_frame_id_or_default(self, default=None):
        if self.frameId is __undefined__:
            return default
        return self.frameId
    
    def has_frame_id(self):
        return self.frameId is not __undefined__
    
    def set_frame_id(self, frame_id):
        self.frameId = frame_id
        return self
    
    def clear_frame_id(self):
        self.frameId = __undefined__
        return self
    
    def get_format(self):
        if self.format is __undefined__:
            raise ValueError("format is not defined")
        return self.format
    
    def get_format_or_default(self, default=None):
        if self.format is __undefined__:
            return default
        return self.format
    
    def has_format(self):
        return self.format is not __undefined__
    
    def set_format(self, format):
        self.format = format
        return self
    
    def clear_format(self):
        self.format = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: expression
        if "expression" not in override:
            self.serialize_scalar(me, "expression", self.expression)
        # property: value
        if "value" not in override:
            self.serialize_scalar(me, "value", self.value)
        # property: frameId
        if "frameId" not in override:
            if self.frameId is not __undefined__:
                self.serialize_scalar(me, "frameId", self.frameId)
        # property: format
        if "format" not in override:
            if self.format is not __undefined__:
                me["format"] = self.format.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: expression
        if "expression" not in override:
            used_args.append("expression")
            args.append(cls.deserialize_scalar(me["expression"]))
        # property: value
        if "value" not in override:
            used_args.append("value")
            args.append(cls.deserialize_scalar(me["value"]))
        # property: frameId
        if "frameId" not in override:
            used_args.append("frameId")
            if me is not None and "frameId" in me:
                kwargs["frame_id"] = cls.deserialize_scalar(me["frameId"])
        # property: format
        if "format" not in override:
            used_args.append("format")
            if me is not None and "format" in me:
                kwargs["format"] = cls.deserialize_as(me["format"], DAPValueFormat)


class DAPSetExpressionResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPSetExpressionResponse(seq, "response", request_seq, success, "setExpression", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPSetExpressionResponseBody))


class DAPSetExpressionResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(value, type=__undefined__, presentation_hint=__undefined__, variables_reference=__undefined__, named_variables=__undefined__, indexed_variables=__undefined__):
        return DAPSetExpressionResponseBody(value, type=type, presentation_hint=presentation_hint, variables_reference=variables_reference, named_variables=named_variables, indexed_variables=indexed_variables)
    
    def __init__(self, value, type=__undefined__, presentation_hint=__undefined__, variables_reference=__undefined__, named_variables=__undefined__, indexed_variables=__undefined__):
        DAPObject.__init__(self)
        self.value = value
        self.type = type
        self.presentationHint = presentation_hint
        self.variablesReference = variables_reference
        self.namedVariables = named_variables
        self.indexedVariables = indexed_variables
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["value"] = self.get_value()
        if self.has_type():
            kwargs["type"] = self.get_type()
        if self.has_presentation_hint():
            kwargs["presentationHint"] = self.get_presentation_hint()
        if self.has_variables_reference():
            kwargs["variablesReference"] = self.get_variables_reference()
        if self.has_named_variables():
            kwargs["namedVariables"] = self.get_named_variables()
        if self.has_indexed_variables():
            kwargs["indexedVariables"] = self.get_indexed_variables()
        return kwargs
    
    def get_value(self):
        return self.value
    
    def set_value(self, value):
        self.value = value
        return self
    
    def get_type(self):
        if self.type is __undefined__:
            raise ValueError("type is not defined")
        return self.type
    
    def get_type_or_default(self, default=None):
        if self.type is __undefined__:
            return default
        return self.type
    
    def has_type(self):
        return self.type is not __undefined__
    
    def set_type(self, type):
        self.type = type
        return self
    
    def clear_type(self):
        self.type = __undefined__
        return self
    
    def get_presentation_hint(self):
        if self.presentationHint is __undefined__:
            raise ValueError("presentationHint is not defined")
        return self.presentationHint
    
    def get_presentation_hint_or_default(self, default=None):
        if self.presentationHint is __undefined__:
            return default
        return self.presentationHint
    
    def has_presentation_hint(self):
        return self.presentationHint is not __undefined__
    
    def set_presentation_hint(self, presentation_hint):
        self.presentationHint = presentation_hint
        return self
    
    def clear_presentation_hint(self):
        self.presentationHint = __undefined__
        return self
    
    def get_variables_reference(self):
        if self.variablesReference is __undefined__:
            raise ValueError("variablesReference is not defined")
        return self.variablesReference
    
    def get_variables_reference_or_default(self, default=None):
        if self.variablesReference is __undefined__:
            return default
        return self.variablesReference
    
    def has_variables_reference(self):
        return self.variablesReference is not __undefined__
    
    def set_variables_reference(self, variables_reference):
        self.variablesReference = variables_reference
        return self
    
    def clear_variables_reference(self):
        self.variablesReference = __undefined__
        return self
    
    def get_named_variables(self):
        if self.namedVariables is __undefined__:
            raise ValueError("namedVariables is not defined")
        return self.namedVariables
    
    def get_named_variables_or_default(self, default=None):
        if self.namedVariables is __undefined__:
            return default
        return self.namedVariables
    
    def has_named_variables(self):
        return self.namedVariables is not __undefined__
    
    def set_named_variables(self, named_variables):
        self.namedVariables = named_variables
        return self
    
    def clear_named_variables(self):
        self.namedVariables = __undefined__
        return self
    
    def get_indexed_variables(self):
        if self.indexedVariables is __undefined__:
            raise ValueError("indexedVariables is not defined")
        return self.indexedVariables
    
    def get_indexed_variables_or_default(self, default=None):
        if self.indexedVariables is __undefined__:
            return default
        return self.indexedVariables
    
    def has_indexed_variables(self):
        return self.indexedVariables is not __undefined__
    
    def set_indexed_variables(self, indexed_variables):
        self.indexedVariables = indexed_variables
        return self
    
    def clear_indexed_variables(self):
        self.indexedVariables = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: value
        if "value" not in override:
            self.serialize_scalar(me, "value", self.value)
        # property: type
        if "type" not in override:
            if self.type is not __undefined__:
                self.serialize_scalar(me, "type", self.type)
        # property: presentationHint
        if "presentationHint" not in override:
            if self.presentationHint is not __undefined__:
                me["presentationHint"] = self.presentationHint.serialize()
        # property: variablesReference
        if "variablesReference" not in override:
            if self.variablesReference is not __undefined__:
                self.serialize_scalar(me, "variablesReference", self.variablesReference)
        # property: namedVariables
        if "namedVariables" not in override:
            if self.namedVariables is not __undefined__:
                self.serialize_scalar(me, "namedVariables", self.namedVariables)
        # property: indexedVariables
        if "indexedVariables" not in override:
            if self.indexedVariables is not __undefined__:
                self.serialize_scalar(me, "indexedVariables", self.indexedVariables)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: value
        if "value" not in override:
            used_args.append("value")
            args.append(cls.deserialize_scalar(me["value"]))
        # property: type
        if "type" not in override:
            used_args.append("type")
            if me is not None and "type" in me:
                kwargs["type"] = cls.deserialize_scalar(me["type"])
        # property: presentationHint
        if "presentationHint" not in override:
            used_args.append("presentationHint")
            if me is not None and "presentationHint" in me:
                kwargs["presentation_hint"] = cls.deserialize_as(me["presentationHint"], DAPVariablePresentationHint)
        # property: variablesReference
        if "variablesReference" not in override:
            used_args.append("variablesReference")
            if me is not None and "variablesReference" in me:
                kwargs["variables_reference"] = cls.deserialize_scalar(me["variablesReference"])
        # property: namedVariables
        if "namedVariables" not in override:
            used_args.append("namedVariables")
            if me is not None and "namedVariables" in me:
                kwargs["named_variables"] = cls.deserialize_scalar(me["namedVariables"])
        # property: indexedVariables
        if "indexedVariables" not in override:
            used_args.append("indexedVariables")
            if me is not None and "indexedVariables" in me:
                kwargs["indexed_variables"] = cls.deserialize_scalar(me["indexedVariables"])



class DAPStepInTargetsRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPStepInTargetsRequest(seq, "request", "stepInTargets", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPStepInTargetsArguments))


class DAPStepInTargetsArguments(DAPObject):
    """
    Arguments for 'stepInTargets' request.
    """
    @staticmethod
    def create(frame_id):
        return DAPStepInTargetsArguments(frame_id)
    
    def __init__(self, frame_id):
        DAPObject.__init__(self)
        self.frameId = frame_id
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["frameId"] = self.get_frame_id()
        return kwargs
    
    def get_frame_id(self):
        return self.frameId
    
    def set_frame_id(self, frame_id):
        self.frameId = frame_id
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: frameId
        if "frameId" not in override:
            self.serialize_scalar(me, "frameId", self.frameId)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: frameId
        if "frameId" not in override:
            used_args.append("frameId")
            args.append(cls.deserialize_scalar(me["frameId"]))


class DAPStepInTargetsResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPStepInTargetsResponse(seq, "response", request_seq, success, "stepInTargets", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPStepInTargetsResponseBody))


class DAPStepInTargetsResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(targets):
        return DAPStepInTargetsResponseBody(targets)
    
    def __init__(self, targets):
        DAPObject.__init__(self)
        self.targets = targets
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["targets"] = self.get_targets()
        return kwargs
    
    def get_targets(self):
        return self.targets
    
    def set_targets(self, targets):
        self.targets = targets
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: targets
        if "targets" not in override:
            self.serialize_scalar(me, "targets", self.targets, hint=DAPStepInTarget)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: targets
        if "targets" not in override:
            used_args.append("targets")
            args.append(cls.deserialize_scalar(me["targets"], hint=DAPStepInTarget))



class DAPGotoTargetsRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPGotoTargetsRequest(seq, "request", "gotoTargets", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPGotoTargetsArguments))


class DAPGotoTargetsArguments(DAPObject):
    """
    Arguments for 'gotoTargets' request.
    """
    @staticmethod
    def create(source, line, column=__undefined__):
        return DAPGotoTargetsArguments(source, line, column=column)
    
    def __init__(self, source, line, column=__undefined__):
        DAPObject.__init__(self)
        self.source = source
        self.line = line
        self.column = column
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["source"] = self.get_source()
        kwargs["line"] = self.get_line()
        if self.has_column():
            kwargs["column"] = self.get_column()
        return kwargs
    
    def get_source(self):
        return self.source
    
    def set_source(self, source):
        self.source = source
        return self
    
    def get_line(self):
        return self.line
    
    def set_line(self, line):
        self.line = line
        return self
    
    def get_column(self):
        if self.column is __undefined__:
            raise ValueError("column is not defined")
        return self.column
    
    def get_column_or_default(self, default=None):
        if self.column is __undefined__:
            return default
        return self.column
    
    def has_column(self):
        return self.column is not __undefined__
    
    def set_column(self, column):
        self.column = column
        return self
    
    def clear_column(self):
        self.column = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: source
        if "source" not in override:
            me["source"] = self.source.serialize()
        # property: line
        if "line" not in override:
            self.serialize_scalar(me, "line", self.line)
        # property: column
        if "column" not in override:
            if self.column is not __undefined__:
                self.serialize_scalar(me, "column", self.column)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: source
        if "source" not in override:
            used_args.append("source")
            args.append(cls.deserialize_as(me["source"], DAPSource))
        # property: line
        if "line" not in override:
            used_args.append("line")
            args.append(cls.deserialize_scalar(me["line"]))
        # property: column
        if "column" not in override:
            used_args.append("column")
            if me is not None and "column" in me:
                kwargs["column"] = cls.deserialize_scalar(me["column"])


class DAPGotoTargetsResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPGotoTargetsResponse(seq, "response", request_seq, success, "gotoTargets", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPGotoTargetsResponseBody))


class DAPGotoTargetsResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(targets):
        return DAPGotoTargetsResponseBody(targets)
    
    def __init__(self, targets):
        DAPObject.__init__(self)
        self.targets = targets
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["targets"] = self.get_targets()
        return kwargs
    
    def get_targets(self):
        return self.targets
    
    def set_targets(self, targets):
        self.targets = targets
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: targets
        if "targets" not in override:
            self.serialize_scalar(me, "targets", self.targets, hint=DAPGotoTarget)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: targets
        if "targets" not in override:
            used_args.append("targets")
            args.append(cls.deserialize_scalar(me["targets"], hint=DAPGotoTarget))



class DAPCompletionsRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPCompletionsRequest(seq, "request", "completions", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPCompletionsArguments))


class DAPCompletionsArguments(DAPObject):
    """
    Arguments for 'completions' request.
    """
    @staticmethod
    def create(text, column, frame_id=__undefined__, line=__undefined__):
        return DAPCompletionsArguments(text, column, frame_id=frame_id, line=line)
    
    def __init__(self, text, column, frame_id=__undefined__, line=__undefined__):
        DAPObject.__init__(self)
        self.frameId = frame_id
        self.text = text
        self.column = column
        self.line = line
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["text"] = self.get_text()
        kwargs["column"] = self.get_column()
        if self.has_frame_id():
            kwargs["frameId"] = self.get_frame_id()
        if self.has_line():
            kwargs["line"] = self.get_line()
        return kwargs
    
    def get_frame_id(self):
        if self.frameId is __undefined__:
            raise ValueError("frameId is not defined")
        return self.frameId
    
    def get_frame_id_or_default(self, default=None):
        if self.frameId is __undefined__:
            return default
        return self.frameId
    
    def has_frame_id(self):
        return self.frameId is not __undefined__
    
    def set_frame_id(self, frame_id):
        self.frameId = frame_id
        return self
    
    def clear_frame_id(self):
        self.frameId = __undefined__
        return self
    
    def get_text(self):
        return self.text
    
    def set_text(self, text):
        self.text = text
        return self
    
    def get_column(self):
        return self.column
    
    def set_column(self, column):
        self.column = column
        return self
    
    def get_line(self):
        if self.line is __undefined__:
            raise ValueError("line is not defined")
        return self.line
    
    def get_line_or_default(self, default=None):
        if self.line is __undefined__:
            return default
        return self.line
    
    def has_line(self):
        return self.line is not __undefined__
    
    def set_line(self, line):
        self.line = line
        return self
    
    def clear_line(self):
        self.line = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: frameId
        if "frameId" not in override:
            if self.frameId is not __undefined__:
                self.serialize_scalar(me, "frameId", self.frameId)
        # property: text
        if "text" not in override:
            self.serialize_scalar(me, "text", self.text)
        # property: column
        if "column" not in override:
            self.serialize_scalar(me, "column", self.column)
        # property: line
        if "line" not in override:
            if self.line is not __undefined__:
                self.serialize_scalar(me, "line", self.line)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: frameId
        if "frameId" not in override:
            used_args.append("frameId")
            if me is not None and "frameId" in me:
                kwargs["frame_id"] = cls.deserialize_scalar(me["frameId"])
        # property: text
        if "text" not in override:
            used_args.append("text")
            args.append(cls.deserialize_scalar(me["text"]))
        # property: column
        if "column" not in override:
            used_args.append("column")
            args.append(cls.deserialize_scalar(me["column"]))
        # property: line
        if "line" not in override:
            used_args.append("line")
            if me is not None and "line" in me:
                kwargs["line"] = cls.deserialize_scalar(me["line"])


class DAPCompletionsResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPCompletionsResponse(seq, "response", request_seq, success, "completions", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPCompletionsResponseBody))


class DAPCompletionsResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(targets):
        return DAPCompletionsResponseBody(targets)
    
    def __init__(self, targets):
        DAPObject.__init__(self)
        self.targets = targets
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["targets"] = self.get_targets()
        return kwargs
    
    def get_targets(self):
        return self.targets
    
    def set_targets(self, targets):
        self.targets = targets
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: targets
        if "targets" not in override:
            self.serialize_scalar(me, "targets", self.targets, hint=DAPCompletionItem)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: targets
        if "targets" not in override:
            used_args.append("targets")
            args.append(cls.deserialize_scalar(me["targets"], hint=DAPCompletionItem))



class DAPExceptionInfoRequest(DAPRequest):
    """
    
    """
    @staticmethod
    def create(seq, arguments):
        return DAPExceptionInfoRequest(seq, "request", "exceptionInfo", arguments=arguments)
    
    def __init__(self, seq, type, command, arguments):
        DAPRequest.__init__(self, seq, type, command, arguments=arguments)
        self.arguments = arguments
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["arguments"] = self.get_arguments()
        return kwargs
    
    def get_arguments(self):
        return self.arguments
    
    def set_arguments(self, arguments):
        self.arguments = arguments
        return self
    
    def _serialize(self, me, override):
        DAPRequest._serialize(self, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: arguments
        if "arguments" not in override:
            me["arguments"] = self.arguments.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPRequest._deserialize(args, kwargs, used_args, me, ['arguments', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: arguments
        if "arguments" not in override:
            used_args.append("arguments")
            args.append(cls.deserialize_as(me["arguments"], DAPExceptionInfoArguments))


class DAPExceptionInfoArguments(DAPObject):
    """
    Arguments for 'exceptionInfo' request.
    """
    @staticmethod
    def create(thread_id):
        return DAPExceptionInfoArguments(thread_id)
    
    def __init__(self, thread_id):
        DAPObject.__init__(self)
        self.threadId = thread_id
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["threadId"] = self.get_thread_id()
        return kwargs
    
    def get_thread_id(self):
        return self.threadId
    
    def set_thread_id(self, thread_id):
        self.threadId = thread_id
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: threadId
        if "threadId" not in override:
            self.serialize_scalar(me, "threadId", self.threadId)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: threadId
        if "threadId" not in override:
            used_args.append("threadId")
            args.append(cls.deserialize_scalar(me["threadId"]))


class DAPExceptionInfoResponse(DAPResponse):
    """
    
    """
    @staticmethod
    def create(seq, request_seq, success, body, message=__undefined__):
        return DAPExceptionInfoResponse(seq, "response", request_seq, success, "exceptionInfo", body=body, message=message)
    
    def __init__(self, seq, type, request_seq, success, command, body, message=__undefined__):
        DAPResponse.__init__(self, seq, type, request_seq, success, command, message, body=body)
        self.body = body
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["command"] = self.get_command()
        kwargs["body"] = self.get_body()
        return kwargs
    
    def get_body(self):
        return self.body
    
    def set_body(self, body):
        self.body = body
        return self
    
    def _serialize(self, me, override):
        DAPResponse._serialize(self, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            self.serialize_scalar(me, "command", self.command)
        # property: body
        if "body" not in override:
            me["body"] = self.body.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPResponse._deserialize(args, kwargs, used_args, me, ['body', 'command'])
        
        # property: command
        if "command" not in override:
            used_args.append("command")
            args.append(cls.deserialize_scalar(me["command"]))
        # property: body
        if "body" not in override:
            used_args.append("body")
            args.append(cls.deserialize_as(me["body"], DAPExceptionInfoResponseBody))


class DAPExceptionInfoResponseBody(DAPObject):
    """
    None
    """
    @staticmethod
    def create(exception_id, break_mode, description=__undefined__, details=__undefined__):
        return DAPExceptionInfoResponseBody(exception_id, break_mode, description=description, details=details)
    
    def __init__(self, exception_id, break_mode, description=__undefined__, details=__undefined__):
        DAPObject.__init__(self)
        self.exceptionId = exception_id
        self.description = description
        self.breakMode = break_mode
        self.details = details
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["exceptionId"] = self.get_exception_id()
        kwargs["breakMode"] = self.get_break_mode()
        if self.has_description():
            kwargs["description"] = self.get_description()
        if self.has_details():
            kwargs["details"] = self.get_details()
        return kwargs
    
    def get_exception_id(self):
        return self.exceptionId
    
    def set_exception_id(self, exception_id):
        self.exceptionId = exception_id
        return self
    
    def get_description(self):
        if self.description is __undefined__:
            raise ValueError("description is not defined")
        return self.description
    
    def get_description_or_default(self, default=None):
        if self.description is __undefined__:
            return default
        return self.description
    
    def has_description(self):
        return self.description is not __undefined__
    
    def set_description(self, description):
        self.description = description
        return self
    
    def clear_description(self):
        self.description = __undefined__
        return self
    
    def get_break_mode(self):
        return self.breakMode
    
    def set_break_mode(self, break_mode):
        self.breakMode = break_mode
        return self
    
    def get_details(self):
        if self.details is __undefined__:
            raise ValueError("details is not defined")
        return self.details
    
    def get_details_or_default(self, default=None):
        if self.details is __undefined__:
            return default
        return self.details
    
    def has_details(self):
        return self.details is not __undefined__
    
    def set_details(self, details):
        self.details = details
        return self
    
    def clear_details(self):
        self.details = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: exceptionId
        if "exceptionId" not in override:
            self.serialize_scalar(me, "exceptionId", self.exceptionId)
        # property: description
        if "description" not in override:
            if self.description is not __undefined__:
                self.serialize_scalar(me, "description", self.description)
        # property: breakMode
        if "breakMode" not in override:
            me["breakMode"] = self.breakMode.serialize()
        # property: details
        if "details" not in override:
            if self.details is not __undefined__:
                me["details"] = self.details.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: exceptionId
        if "exceptionId" not in override:
            used_args.append("exceptionId")
            args.append(cls.deserialize_scalar(me["exceptionId"]))
        # property: description
        if "description" not in override:
            used_args.append("description")
            if me is not None and "description" in me:
                kwargs["description"] = cls.deserialize_scalar(me["description"])
        # property: breakMode
        if "breakMode" not in override:
            used_args.append("breakMode")
            args.append(cls.deserialize_as(me["breakMode"], DAPExceptionBreakMode))
        # property: details
        if "details" not in override:
            used_args.append("details")
            if me is not None and "details" in me:
                kwargs["details"] = cls.deserialize_as(me["details"], DAPExceptionDetails)



class DAPCapabilities(DAPObject):
    """
    Information about the capabilities of a debug adapter.
    """
    @staticmethod
    def create(supports_configuration_done_request=__undefined__, supports_function_breakpoints=__undefined__, supports_conditional_breakpoints=__undefined__, supports_hit_conditional_breakpoints=__undefined__, supports_evaluate_for_hovers=__undefined__, exception_breakpoint_filters=__undefined__, supports_step_back=__undefined__, supports_set_variable=__undefined__, supports_restart_frame=__undefined__, supports_goto_targets_request=__undefined__, supports_step_in_targets_request=__undefined__, supports_completions_request=__undefined__, supports_modules_request=__undefined__, additional_module_columns=__undefined__, supported_checksum_algorithms=__undefined__, supports_restart_request=__undefined__, supports_exception_options=__undefined__, supports_value_formatting_options=__undefined__, supports_exception_info_request=__undefined__, support_terminate_debuggee=__undefined__, supports_delayed_stack_trace_loading=__undefined__, supports_loaded_sources_request=__undefined__, supports_log_points=__undefined__, supports_terminate_threads_request=__undefined__, supports_set_expression=__undefined__, supports_terminate_request=__undefined__, supports_data_breakpoints=__undefined__):
        return DAPCapabilities(supports_configuration_done_request=supports_configuration_done_request, supports_function_breakpoints=supports_function_breakpoints, supports_conditional_breakpoints=supports_conditional_breakpoints, supports_hit_conditional_breakpoints=supports_hit_conditional_breakpoints, supports_evaluate_for_hovers=supports_evaluate_for_hovers, exception_breakpoint_filters=exception_breakpoint_filters, supports_step_back=supports_step_back, supports_set_variable=supports_set_variable, supports_restart_frame=supports_restart_frame, supports_goto_targets_request=supports_goto_targets_request, supports_step_in_targets_request=supports_step_in_targets_request, supports_completions_request=supports_completions_request, supports_modules_request=supports_modules_request, additional_module_columns=additional_module_columns, supported_checksum_algorithms=supported_checksum_algorithms, supports_restart_request=supports_restart_request, supports_exception_options=supports_exception_options, supports_value_formatting_options=supports_value_formatting_options, supports_exception_info_request=supports_exception_info_request, support_terminate_debuggee=support_terminate_debuggee, supports_delayed_stack_trace_loading=supports_delayed_stack_trace_loading, supports_loaded_sources_request=supports_loaded_sources_request, supports_log_points=supports_log_points, supports_terminate_threads_request=supports_terminate_threads_request, supports_set_expression=supports_set_expression, supports_terminate_request=supports_terminate_request, supports_data_breakpoints=supports_data_breakpoints)
    
    def __init__(self, supports_configuration_done_request=__undefined__, supports_function_breakpoints=__undefined__, supports_conditional_breakpoints=__undefined__, supports_hit_conditional_breakpoints=__undefined__, supports_evaluate_for_hovers=__undefined__, exception_breakpoint_filters=__undefined__, supports_step_back=__undefined__, supports_set_variable=__undefined__, supports_restart_frame=__undefined__, supports_goto_targets_request=__undefined__, supports_step_in_targets_request=__undefined__, supports_completions_request=__undefined__, supports_modules_request=__undefined__, additional_module_columns=__undefined__, supported_checksum_algorithms=__undefined__, supports_restart_request=__undefined__, supports_exception_options=__undefined__, supports_value_formatting_options=__undefined__, supports_exception_info_request=__undefined__, support_terminate_debuggee=__undefined__, supports_delayed_stack_trace_loading=__undefined__, supports_loaded_sources_request=__undefined__, supports_log_points=__undefined__, supports_terminate_threads_request=__undefined__, supports_set_expression=__undefined__, supports_terminate_request=__undefined__, supports_data_breakpoints=__undefined__):
        DAPObject.__init__(self)
        self.supportsConfigurationDoneRequest = supports_configuration_done_request
        self.supportsFunctionBreakpoints = supports_function_breakpoints
        self.supportsConditionalBreakpoints = supports_conditional_breakpoints
        self.supportsHitConditionalBreakpoints = supports_hit_conditional_breakpoints
        self.supportsEvaluateForHovers = supports_evaluate_for_hovers
        self.exceptionBreakpointFilters = exception_breakpoint_filters
        self.supportsStepBack = supports_step_back
        self.supportsSetVariable = supports_set_variable
        self.supportsRestartFrame = supports_restart_frame
        self.supportsGotoTargetsRequest = supports_goto_targets_request
        self.supportsStepInTargetsRequest = supports_step_in_targets_request
        self.supportsCompletionsRequest = supports_completions_request
        self.supportsModulesRequest = supports_modules_request
        self.additionalModuleColumns = additional_module_columns
        self.supportedChecksumAlgorithms = supported_checksum_algorithms
        self.supportsRestartRequest = supports_restart_request
        self.supportsExceptionOptions = supports_exception_options
        self.supportsValueFormattingOptions = supports_value_formatting_options
        self.supportsExceptionInfoRequest = supports_exception_info_request
        self.supportTerminateDebuggee = support_terminate_debuggee
        self.supportsDelayedStackTraceLoading = supports_delayed_stack_trace_loading
        self.supportsLoadedSourcesRequest = supports_loaded_sources_request
        self.supportsLogPoints = supports_log_points
        self.supportsTerminateThreadsRequest = supports_terminate_threads_request
        self.supportsSetExpression = supports_set_expression
        self.supportsTerminateRequest = supports_terminate_request
        self.supportsDataBreakpoints = supports_data_breakpoints
    
    def as_current_kwargs(self):
        kwargs = {}
        if self.has_supports_configuration_done_request():
            kwargs["supportsConfigurationDoneRequest"] = self.get_supports_configuration_done_request()
        if self.has_supports_function_breakpoints():
            kwargs["supportsFunctionBreakpoints"] = self.get_supports_function_breakpoints()
        if self.has_supports_conditional_breakpoints():
            kwargs["supportsConditionalBreakpoints"] = self.get_supports_conditional_breakpoints()
        if self.has_supports_hit_conditional_breakpoints():
            kwargs["supportsHitConditionalBreakpoints"] = self.get_supports_hit_conditional_breakpoints()
        if self.has_supports_evaluate_for_hovers():
            kwargs["supportsEvaluateForHovers"] = self.get_supports_evaluate_for_hovers()
        if self.has_exception_breakpoint_filters():
            kwargs["exceptionBreakpointFilters"] = self.get_exception_breakpoint_filters()
        if self.has_supports_step_back():
            kwargs["supportsStepBack"] = self.get_supports_step_back()
        if self.has_supports_set_variable():
            kwargs["supportsSetVariable"] = self.get_supports_set_variable()
        if self.has_supports_restart_frame():
            kwargs["supportsRestartFrame"] = self.get_supports_restart_frame()
        if self.has_supports_goto_targets_request():
            kwargs["supportsGotoTargetsRequest"] = self.get_supports_goto_targets_request()
        if self.has_supports_step_in_targets_request():
            kwargs["supportsStepInTargetsRequest"] = self.get_supports_step_in_targets_request()
        if self.has_supports_completions_request():
            kwargs["supportsCompletionsRequest"] = self.get_supports_completions_request()
        if self.has_supports_modules_request():
            kwargs["supportsModulesRequest"] = self.get_supports_modules_request()
        if self.has_additional_module_columns():
            kwargs["additionalModuleColumns"] = self.get_additional_module_columns()
        if self.has_supported_checksum_algorithms():
            kwargs["supportedChecksumAlgorithms"] = self.get_supported_checksum_algorithms()
        if self.has_supports_restart_request():
            kwargs["supportsRestartRequest"] = self.get_supports_restart_request()
        if self.has_supports_exception_options():
            kwargs["supportsExceptionOptions"] = self.get_supports_exception_options()
        if self.has_supports_value_formatting_options():
            kwargs["supportsValueFormattingOptions"] = self.get_supports_value_formatting_options()
        if self.has_supports_exception_info_request():
            kwargs["supportsExceptionInfoRequest"] = self.get_supports_exception_info_request()
        if self.has_support_terminate_debuggee():
            kwargs["supportTerminateDebuggee"] = self.get_support_terminate_debuggee()
        if self.has_supports_delayed_stack_trace_loading():
            kwargs["supportsDelayedStackTraceLoading"] = self.get_supports_delayed_stack_trace_loading()
        if self.has_supports_loaded_sources_request():
            kwargs["supportsLoadedSourcesRequest"] = self.get_supports_loaded_sources_request()
        if self.has_supports_log_points():
            kwargs["supportsLogPoints"] = self.get_supports_log_points()
        if self.has_supports_terminate_threads_request():
            kwargs["supportsTerminateThreadsRequest"] = self.get_supports_terminate_threads_request()
        if self.has_supports_set_expression():
            kwargs["supportsSetExpression"] = self.get_supports_set_expression()
        if self.has_supports_terminate_request():
            kwargs["supportsTerminateRequest"] = self.get_supports_terminate_request()
        if self.has_supports_data_breakpoints():
            kwargs["supportsDataBreakpoints"] = self.get_supports_data_breakpoints()
        return kwargs
    
    def get_supports_configuration_done_request(self):
        if self.supportsConfigurationDoneRequest is __undefined__:
            raise ValueError("supportsConfigurationDoneRequest is not defined")
        return self.supportsConfigurationDoneRequest
    
    def get_supports_configuration_done_request_or_default(self, default=None):
        if self.supportsConfigurationDoneRequest is __undefined__:
            return default
        return self.supportsConfigurationDoneRequest
    
    def has_supports_configuration_done_request(self):
        return self.supportsConfigurationDoneRequest is not __undefined__
    
    def set_supports_configuration_done_request(self, supports_configuration_done_request):
        self.supportsConfigurationDoneRequest = supports_configuration_done_request
        return self
    
    def clear_supports_configuration_done_request(self):
        self.supportsConfigurationDoneRequest = __undefined__
        return self
    
    def get_supports_function_breakpoints(self):
        if self.supportsFunctionBreakpoints is __undefined__:
            raise ValueError("supportsFunctionBreakpoints is not defined")
        return self.supportsFunctionBreakpoints
    
    def get_supports_function_breakpoints_or_default(self, default=None):
        if self.supportsFunctionBreakpoints is __undefined__:
            return default
        return self.supportsFunctionBreakpoints
    
    def has_supports_function_breakpoints(self):
        return self.supportsFunctionBreakpoints is not __undefined__
    
    def set_supports_function_breakpoints(self, supports_function_breakpoints):
        self.supportsFunctionBreakpoints = supports_function_breakpoints
        return self
    
    def clear_supports_function_breakpoints(self):
        self.supportsFunctionBreakpoints = __undefined__
        return self
    
    def get_supports_conditional_breakpoints(self):
        if self.supportsConditionalBreakpoints is __undefined__:
            raise ValueError("supportsConditionalBreakpoints is not defined")
        return self.supportsConditionalBreakpoints
    
    def get_supports_conditional_breakpoints_or_default(self, default=None):
        if self.supportsConditionalBreakpoints is __undefined__:
            return default
        return self.supportsConditionalBreakpoints
    
    def has_supports_conditional_breakpoints(self):
        return self.supportsConditionalBreakpoints is not __undefined__
    
    def set_supports_conditional_breakpoints(self, supports_conditional_breakpoints):
        self.supportsConditionalBreakpoints = supports_conditional_breakpoints
        return self
    
    def clear_supports_conditional_breakpoints(self):
        self.supportsConditionalBreakpoints = __undefined__
        return self
    
    def get_supports_hit_conditional_breakpoints(self):
        if self.supportsHitConditionalBreakpoints is __undefined__:
            raise ValueError("supportsHitConditionalBreakpoints is not defined")
        return self.supportsHitConditionalBreakpoints
    
    def get_supports_hit_conditional_breakpoints_or_default(self, default=None):
        if self.supportsHitConditionalBreakpoints is __undefined__:
            return default
        return self.supportsHitConditionalBreakpoints
    
    def has_supports_hit_conditional_breakpoints(self):
        return self.supportsHitConditionalBreakpoints is not __undefined__
    
    def set_supports_hit_conditional_breakpoints(self, supports_hit_conditional_breakpoints):
        self.supportsHitConditionalBreakpoints = supports_hit_conditional_breakpoints
        return self
    
    def clear_supports_hit_conditional_breakpoints(self):
        self.supportsHitConditionalBreakpoints = __undefined__
        return self
    
    def get_supports_evaluate_for_hovers(self):
        if self.supportsEvaluateForHovers is __undefined__:
            raise ValueError("supportsEvaluateForHovers is not defined")
        return self.supportsEvaluateForHovers
    
    def get_supports_evaluate_for_hovers_or_default(self, default=None):
        if self.supportsEvaluateForHovers is __undefined__:
            return default
        return self.supportsEvaluateForHovers
    
    def has_supports_evaluate_for_hovers(self):
        return self.supportsEvaluateForHovers is not __undefined__
    
    def set_supports_evaluate_for_hovers(self, supports_evaluate_for_hovers):
        self.supportsEvaluateForHovers = supports_evaluate_for_hovers
        return self
    
    def clear_supports_evaluate_for_hovers(self):
        self.supportsEvaluateForHovers = __undefined__
        return self
    
    def get_exception_breakpoint_filters(self):
        if self.exceptionBreakpointFilters is __undefined__:
            raise ValueError("exceptionBreakpointFilters is not defined")
        return self.exceptionBreakpointFilters
    
    def get_exception_breakpoint_filters_or_default(self, default=None):
        if self.exceptionBreakpointFilters is __undefined__:
            return default
        return self.exceptionBreakpointFilters
    
    def has_exception_breakpoint_filters(self):
        return self.exceptionBreakpointFilters is not __undefined__
    
    def set_exception_breakpoint_filters(self, exception_breakpoint_filters):
        self.exceptionBreakpointFilters = exception_breakpoint_filters
        return self
    
    def clear_exception_breakpoint_filters(self):
        self.exceptionBreakpointFilters = __undefined__
        return self
    
    def get_supports_step_back(self):
        if self.supportsStepBack is __undefined__:
            raise ValueError("supportsStepBack is not defined")
        return self.supportsStepBack
    
    def get_supports_step_back_or_default(self, default=None):
        if self.supportsStepBack is __undefined__:
            return default
        return self.supportsStepBack
    
    def has_supports_step_back(self):
        return self.supportsStepBack is not __undefined__
    
    def set_supports_step_back(self, supports_step_back):
        self.supportsStepBack = supports_step_back
        return self
    
    def clear_supports_step_back(self):
        self.supportsStepBack = __undefined__
        return self
    
    def get_supports_set_variable(self):
        if self.supportsSetVariable is __undefined__:
            raise ValueError("supportsSetVariable is not defined")
        return self.supportsSetVariable
    
    def get_supports_set_variable_or_default(self, default=None):
        if self.supportsSetVariable is __undefined__:
            return default
        return self.supportsSetVariable
    
    def has_supports_set_variable(self):
        return self.supportsSetVariable is not __undefined__
    
    def set_supports_set_variable(self, supports_set_variable):
        self.supportsSetVariable = supports_set_variable
        return self
    
    def clear_supports_set_variable(self):
        self.supportsSetVariable = __undefined__
        return self
    
    def get_supports_restart_frame(self):
        if self.supportsRestartFrame is __undefined__:
            raise ValueError("supportsRestartFrame is not defined")
        return self.supportsRestartFrame
    
    def get_supports_restart_frame_or_default(self, default=None):
        if self.supportsRestartFrame is __undefined__:
            return default
        return self.supportsRestartFrame
    
    def has_supports_restart_frame(self):
        return self.supportsRestartFrame is not __undefined__
    
    def set_supports_restart_frame(self, supports_restart_frame):
        self.supportsRestartFrame = supports_restart_frame
        return self
    
    def clear_supports_restart_frame(self):
        self.supportsRestartFrame = __undefined__
        return self
    
    def get_supports_goto_targets_request(self):
        if self.supportsGotoTargetsRequest is __undefined__:
            raise ValueError("supportsGotoTargetsRequest is not defined")
        return self.supportsGotoTargetsRequest
    
    def get_supports_goto_targets_request_or_default(self, default=None):
        if self.supportsGotoTargetsRequest is __undefined__:
            return default
        return self.supportsGotoTargetsRequest
    
    def has_supports_goto_targets_request(self):
        return self.supportsGotoTargetsRequest is not __undefined__
    
    def set_supports_goto_targets_request(self, supports_goto_targets_request):
        self.supportsGotoTargetsRequest = supports_goto_targets_request
        return self
    
    def clear_supports_goto_targets_request(self):
        self.supportsGotoTargetsRequest = __undefined__
        return self
    
    def get_supports_step_in_targets_request(self):
        if self.supportsStepInTargetsRequest is __undefined__:
            raise ValueError("supportsStepInTargetsRequest is not defined")
        return self.supportsStepInTargetsRequest
    
    def get_supports_step_in_targets_request_or_default(self, default=None):
        if self.supportsStepInTargetsRequest is __undefined__:
            return default
        return self.supportsStepInTargetsRequest
    
    def has_supports_step_in_targets_request(self):
        return self.supportsStepInTargetsRequest is not __undefined__
    
    def set_supports_step_in_targets_request(self, supports_step_in_targets_request):
        self.supportsStepInTargetsRequest = supports_step_in_targets_request
        return self
    
    def clear_supports_step_in_targets_request(self):
        self.supportsStepInTargetsRequest = __undefined__
        return self
    
    def get_supports_completions_request(self):
        if self.supportsCompletionsRequest is __undefined__:
            raise ValueError("supportsCompletionsRequest is not defined")
        return self.supportsCompletionsRequest
    
    def get_supports_completions_request_or_default(self, default=None):
        if self.supportsCompletionsRequest is __undefined__:
            return default
        return self.supportsCompletionsRequest
    
    def has_supports_completions_request(self):
        return self.supportsCompletionsRequest is not __undefined__
    
    def set_supports_completions_request(self, supports_completions_request):
        self.supportsCompletionsRequest = supports_completions_request
        return self
    
    def clear_supports_completions_request(self):
        self.supportsCompletionsRequest = __undefined__
        return self
    
    def get_supports_modules_request(self):
        if self.supportsModulesRequest is __undefined__:
            raise ValueError("supportsModulesRequest is not defined")
        return self.supportsModulesRequest
    
    def get_supports_modules_request_or_default(self, default=None):
        if self.supportsModulesRequest is __undefined__:
            return default
        return self.supportsModulesRequest
    
    def has_supports_modules_request(self):
        return self.supportsModulesRequest is not __undefined__
    
    def set_supports_modules_request(self, supports_modules_request):
        self.supportsModulesRequest = supports_modules_request
        return self
    
    def clear_supports_modules_request(self):
        self.supportsModulesRequest = __undefined__
        return self
    
    def get_additional_module_columns(self):
        if self.additionalModuleColumns is __undefined__:
            raise ValueError("additionalModuleColumns is not defined")
        return self.additionalModuleColumns
    
    def get_additional_module_columns_or_default(self, default=None):
        if self.additionalModuleColumns is __undefined__:
            return default
        return self.additionalModuleColumns
    
    def has_additional_module_columns(self):
        return self.additionalModuleColumns is not __undefined__
    
    def set_additional_module_columns(self, additional_module_columns):
        self.additionalModuleColumns = additional_module_columns
        return self
    
    def clear_additional_module_columns(self):
        self.additionalModuleColumns = __undefined__
        return self
    
    def get_supported_checksum_algorithms(self):
        if self.supportedChecksumAlgorithms is __undefined__:
            raise ValueError("supportedChecksumAlgorithms is not defined")
        return self.supportedChecksumAlgorithms
    
    def get_supported_checksum_algorithms_or_default(self, default=None):
        if self.supportedChecksumAlgorithms is __undefined__:
            return default
        return self.supportedChecksumAlgorithms
    
    def has_supported_checksum_algorithms(self):
        return self.supportedChecksumAlgorithms is not __undefined__
    
    def set_supported_checksum_algorithms(self, supported_checksum_algorithms):
        self.supportedChecksumAlgorithms = supported_checksum_algorithms
        return self
    
    def clear_supported_checksum_algorithms(self):
        self.supportedChecksumAlgorithms = __undefined__
        return self
    
    def get_supports_restart_request(self):
        if self.supportsRestartRequest is __undefined__:
            raise ValueError("supportsRestartRequest is not defined")
        return self.supportsRestartRequest
    
    def get_supports_restart_request_or_default(self, default=None):
        if self.supportsRestartRequest is __undefined__:
            return default
        return self.supportsRestartRequest
    
    def has_supports_restart_request(self):
        return self.supportsRestartRequest is not __undefined__
    
    def set_supports_restart_request(self, supports_restart_request):
        self.supportsRestartRequest = supports_restart_request
        return self
    
    def clear_supports_restart_request(self):
        self.supportsRestartRequest = __undefined__
        return self
    
    def get_supports_exception_options(self):
        if self.supportsExceptionOptions is __undefined__:
            raise ValueError("supportsExceptionOptions is not defined")
        return self.supportsExceptionOptions
    
    def get_supports_exception_options_or_default(self, default=None):
        if self.supportsExceptionOptions is __undefined__:
            return default
        return self.supportsExceptionOptions
    
    def has_supports_exception_options(self):
        return self.supportsExceptionOptions is not __undefined__
    
    def set_supports_exception_options(self, supports_exception_options):
        self.supportsExceptionOptions = supports_exception_options
        return self
    
    def clear_supports_exception_options(self):
        self.supportsExceptionOptions = __undefined__
        return self
    
    def get_supports_value_formatting_options(self):
        if self.supportsValueFormattingOptions is __undefined__:
            raise ValueError("supportsValueFormattingOptions is not defined")
        return self.supportsValueFormattingOptions
    
    def get_supports_value_formatting_options_or_default(self, default=None):
        if self.supportsValueFormattingOptions is __undefined__:
            return default
        return self.supportsValueFormattingOptions
    
    def has_supports_value_formatting_options(self):
        return self.supportsValueFormattingOptions is not __undefined__
    
    def set_supports_value_formatting_options(self, supports_value_formatting_options):
        self.supportsValueFormattingOptions = supports_value_formatting_options
        return self
    
    def clear_supports_value_formatting_options(self):
        self.supportsValueFormattingOptions = __undefined__
        return self
    
    def get_supports_exception_info_request(self):
        if self.supportsExceptionInfoRequest is __undefined__:
            raise ValueError("supportsExceptionInfoRequest is not defined")
        return self.supportsExceptionInfoRequest
    
    def get_supports_exception_info_request_or_default(self, default=None):
        if self.supportsExceptionInfoRequest is __undefined__:
            return default
        return self.supportsExceptionInfoRequest
    
    def has_supports_exception_info_request(self):
        return self.supportsExceptionInfoRequest is not __undefined__
    
    def set_supports_exception_info_request(self, supports_exception_info_request):
        self.supportsExceptionInfoRequest = supports_exception_info_request
        return self
    
    def clear_supports_exception_info_request(self):
        self.supportsExceptionInfoRequest = __undefined__
        return self
    
    def get_support_terminate_debuggee(self):
        if self.supportTerminateDebuggee is __undefined__:
            raise ValueError("supportTerminateDebuggee is not defined")
        return self.supportTerminateDebuggee
    
    def get_support_terminate_debuggee_or_default(self, default=None):
        if self.supportTerminateDebuggee is __undefined__:
            return default
        return self.supportTerminateDebuggee
    
    def has_support_terminate_debuggee(self):
        return self.supportTerminateDebuggee is not __undefined__
    
    def set_support_terminate_debuggee(self, support_terminate_debuggee):
        self.supportTerminateDebuggee = support_terminate_debuggee
        return self
    
    def clear_support_terminate_debuggee(self):
        self.supportTerminateDebuggee = __undefined__
        return self
    
    def get_supports_delayed_stack_trace_loading(self):
        if self.supportsDelayedStackTraceLoading is __undefined__:
            raise ValueError("supportsDelayedStackTraceLoading is not defined")
        return self.supportsDelayedStackTraceLoading
    
    def get_supports_delayed_stack_trace_loading_or_default(self, default=None):
        if self.supportsDelayedStackTraceLoading is __undefined__:
            return default
        return self.supportsDelayedStackTraceLoading
    
    def has_supports_delayed_stack_trace_loading(self):
        return self.supportsDelayedStackTraceLoading is not __undefined__
    
    def set_supports_delayed_stack_trace_loading(self, supports_delayed_stack_trace_loading):
        self.supportsDelayedStackTraceLoading = supports_delayed_stack_trace_loading
        return self
    
    def clear_supports_delayed_stack_trace_loading(self):
        self.supportsDelayedStackTraceLoading = __undefined__
        return self
    
    def get_supports_loaded_sources_request(self):
        if self.supportsLoadedSourcesRequest is __undefined__:
            raise ValueError("supportsLoadedSourcesRequest is not defined")
        return self.supportsLoadedSourcesRequest
    
    def get_supports_loaded_sources_request_or_default(self, default=None):
        if self.supportsLoadedSourcesRequest is __undefined__:
            return default
        return self.supportsLoadedSourcesRequest
    
    def has_supports_loaded_sources_request(self):
        return self.supportsLoadedSourcesRequest is not __undefined__
    
    def set_supports_loaded_sources_request(self, supports_loaded_sources_request):
        self.supportsLoadedSourcesRequest = supports_loaded_sources_request
        return self
    
    def clear_supports_loaded_sources_request(self):
        self.supportsLoadedSourcesRequest = __undefined__
        return self
    
    def get_supports_log_points(self):
        if self.supportsLogPoints is __undefined__:
            raise ValueError("supportsLogPoints is not defined")
        return self.supportsLogPoints
    
    def get_supports_log_points_or_default(self, default=None):
        if self.supportsLogPoints is __undefined__:
            return default
        return self.supportsLogPoints
    
    def has_supports_log_points(self):
        return self.supportsLogPoints is not __undefined__
    
    def set_supports_log_points(self, supports_log_points):
        self.supportsLogPoints = supports_log_points
        return self
    
    def clear_supports_log_points(self):
        self.supportsLogPoints = __undefined__
        return self
    
    def get_supports_terminate_threads_request(self):
        if self.supportsTerminateThreadsRequest is __undefined__:
            raise ValueError("supportsTerminateThreadsRequest is not defined")
        return self.supportsTerminateThreadsRequest
    
    def get_supports_terminate_threads_request_or_default(self, default=None):
        if self.supportsTerminateThreadsRequest is __undefined__:
            return default
        return self.supportsTerminateThreadsRequest
    
    def has_supports_terminate_threads_request(self):
        return self.supportsTerminateThreadsRequest is not __undefined__
    
    def set_supports_terminate_threads_request(self, supports_terminate_threads_request):
        self.supportsTerminateThreadsRequest = supports_terminate_threads_request
        return self
    
    def clear_supports_terminate_threads_request(self):
        self.supportsTerminateThreadsRequest = __undefined__
        return self
    
    def get_supports_set_expression(self):
        if self.supportsSetExpression is __undefined__:
            raise ValueError("supportsSetExpression is not defined")
        return self.supportsSetExpression
    
    def get_supports_set_expression_or_default(self, default=None):
        if self.supportsSetExpression is __undefined__:
            return default
        return self.supportsSetExpression
    
    def has_supports_set_expression(self):
        return self.supportsSetExpression is not __undefined__
    
    def set_supports_set_expression(self, supports_set_expression):
        self.supportsSetExpression = supports_set_expression
        return self
    
    def clear_supports_set_expression(self):
        self.supportsSetExpression = __undefined__
        return self
    
    def get_supports_terminate_request(self):
        if self.supportsTerminateRequest is __undefined__:
            raise ValueError("supportsTerminateRequest is not defined")
        return self.supportsTerminateRequest
    
    def get_supports_terminate_request_or_default(self, default=None):
        if self.supportsTerminateRequest is __undefined__:
            return default
        return self.supportsTerminateRequest
    
    def has_supports_terminate_request(self):
        return self.supportsTerminateRequest is not __undefined__
    
    def set_supports_terminate_request(self, supports_terminate_request):
        self.supportsTerminateRequest = supports_terminate_request
        return self
    
    def clear_supports_terminate_request(self):
        self.supportsTerminateRequest = __undefined__
        return self
    
    def get_supports_data_breakpoints(self):
        if self.supportsDataBreakpoints is __undefined__:
            raise ValueError("supportsDataBreakpoints is not defined")
        return self.supportsDataBreakpoints
    
    def get_supports_data_breakpoints_or_default(self, default=None):
        if self.supportsDataBreakpoints is __undefined__:
            return default
        return self.supportsDataBreakpoints
    
    def has_supports_data_breakpoints(self):
        return self.supportsDataBreakpoints is not __undefined__
    
    def set_supports_data_breakpoints(self, supports_data_breakpoints):
        self.supportsDataBreakpoints = supports_data_breakpoints
        return self
    
    def clear_supports_data_breakpoints(self):
        self.supportsDataBreakpoints = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: supportsConfigurationDoneRequest
        if "supportsConfigurationDoneRequest" not in override:
            if self.supportsConfigurationDoneRequest is not __undefined__:
                self.serialize_scalar(me, "supportsConfigurationDoneRequest", self.supportsConfigurationDoneRequest)
        # property: supportsFunctionBreakpoints
        if "supportsFunctionBreakpoints" not in override:
            if self.supportsFunctionBreakpoints is not __undefined__:
                self.serialize_scalar(me, "supportsFunctionBreakpoints", self.supportsFunctionBreakpoints)
        # property: supportsConditionalBreakpoints
        if "supportsConditionalBreakpoints" not in override:
            if self.supportsConditionalBreakpoints is not __undefined__:
                self.serialize_scalar(me, "supportsConditionalBreakpoints", self.supportsConditionalBreakpoints)
        # property: supportsHitConditionalBreakpoints
        if "supportsHitConditionalBreakpoints" not in override:
            if self.supportsHitConditionalBreakpoints is not __undefined__:
                self.serialize_scalar(me, "supportsHitConditionalBreakpoints", self.supportsHitConditionalBreakpoints)
        # property: supportsEvaluateForHovers
        if "supportsEvaluateForHovers" not in override:
            if self.supportsEvaluateForHovers is not __undefined__:
                self.serialize_scalar(me, "supportsEvaluateForHovers", self.supportsEvaluateForHovers)
        # property: exceptionBreakpointFilters
        if "exceptionBreakpointFilters" not in override:
            if self.exceptionBreakpointFilters is not __undefined__:
                self.serialize_scalar(me, "exceptionBreakpointFilters", self.exceptionBreakpointFilters, hint=DAPExceptionBreakpointsFilter)
        # property: supportsStepBack
        if "supportsStepBack" not in override:
            if self.supportsStepBack is not __undefined__:
                self.serialize_scalar(me, "supportsStepBack", self.supportsStepBack)
        # property: supportsSetVariable
        if "supportsSetVariable" not in override:
            if self.supportsSetVariable is not __undefined__:
                self.serialize_scalar(me, "supportsSetVariable", self.supportsSetVariable)
        # property: supportsRestartFrame
        if "supportsRestartFrame" not in override:
            if self.supportsRestartFrame is not __undefined__:
                self.serialize_scalar(me, "supportsRestartFrame", self.supportsRestartFrame)
        # property: supportsGotoTargetsRequest
        if "supportsGotoTargetsRequest" not in override:
            if self.supportsGotoTargetsRequest is not __undefined__:
                self.serialize_scalar(me, "supportsGotoTargetsRequest", self.supportsGotoTargetsRequest)
        # property: supportsStepInTargetsRequest
        if "supportsStepInTargetsRequest" not in override:
            if self.supportsStepInTargetsRequest is not __undefined__:
                self.serialize_scalar(me, "supportsStepInTargetsRequest", self.supportsStepInTargetsRequest)
        # property: supportsCompletionsRequest
        if "supportsCompletionsRequest" not in override:
            if self.supportsCompletionsRequest is not __undefined__:
                self.serialize_scalar(me, "supportsCompletionsRequest", self.supportsCompletionsRequest)
        # property: supportsModulesRequest
        if "supportsModulesRequest" not in override:
            if self.supportsModulesRequest is not __undefined__:
                self.serialize_scalar(me, "supportsModulesRequest", self.supportsModulesRequest)
        # property: additionalModuleColumns
        if "additionalModuleColumns" not in override:
            if self.additionalModuleColumns is not __undefined__:
                self.serialize_scalar(me, "additionalModuleColumns", self.additionalModuleColumns, hint=DAPColumnDescriptor)
        # property: supportedChecksumAlgorithms
        if "supportedChecksumAlgorithms" not in override:
            if self.supportedChecksumAlgorithms is not __undefined__:
                self.serialize_scalar(me, "supportedChecksumAlgorithms", self.supportedChecksumAlgorithms, hint=DAPChecksumAlgorithm)
        # property: supportsRestartRequest
        if "supportsRestartRequest" not in override:
            if self.supportsRestartRequest is not __undefined__:
                self.serialize_scalar(me, "supportsRestartRequest", self.supportsRestartRequest)
        # property: supportsExceptionOptions
        if "supportsExceptionOptions" not in override:
            if self.supportsExceptionOptions is not __undefined__:
                self.serialize_scalar(me, "supportsExceptionOptions", self.supportsExceptionOptions)
        # property: supportsValueFormattingOptions
        if "supportsValueFormattingOptions" not in override:
            if self.supportsValueFormattingOptions is not __undefined__:
                self.serialize_scalar(me, "supportsValueFormattingOptions", self.supportsValueFormattingOptions)
        # property: supportsExceptionInfoRequest
        if "supportsExceptionInfoRequest" not in override:
            if self.supportsExceptionInfoRequest is not __undefined__:
                self.serialize_scalar(me, "supportsExceptionInfoRequest", self.supportsExceptionInfoRequest)
        # property: supportTerminateDebuggee
        if "supportTerminateDebuggee" not in override:
            if self.supportTerminateDebuggee is not __undefined__:
                self.serialize_scalar(me, "supportTerminateDebuggee", self.supportTerminateDebuggee)
        # property: supportsDelayedStackTraceLoading
        if "supportsDelayedStackTraceLoading" not in override:
            if self.supportsDelayedStackTraceLoading is not __undefined__:
                self.serialize_scalar(me, "supportsDelayedStackTraceLoading", self.supportsDelayedStackTraceLoading)
        # property: supportsLoadedSourcesRequest
        if "supportsLoadedSourcesRequest" not in override:
            if self.supportsLoadedSourcesRequest is not __undefined__:
                self.serialize_scalar(me, "supportsLoadedSourcesRequest", self.supportsLoadedSourcesRequest)
        # property: supportsLogPoints
        if "supportsLogPoints" not in override:
            if self.supportsLogPoints is not __undefined__:
                self.serialize_scalar(me, "supportsLogPoints", self.supportsLogPoints)
        # property: supportsTerminateThreadsRequest
        if "supportsTerminateThreadsRequest" not in override:
            if self.supportsTerminateThreadsRequest is not __undefined__:
                self.serialize_scalar(me, "supportsTerminateThreadsRequest", self.supportsTerminateThreadsRequest)
        # property: supportsSetExpression
        if "supportsSetExpression" not in override:
            if self.supportsSetExpression is not __undefined__:
                self.serialize_scalar(me, "supportsSetExpression", self.supportsSetExpression)
        # property: supportsTerminateRequest
        if "supportsTerminateRequest" not in override:
            if self.supportsTerminateRequest is not __undefined__:
                self.serialize_scalar(me, "supportsTerminateRequest", self.supportsTerminateRequest)
        # property: supportsDataBreakpoints
        if "supportsDataBreakpoints" not in override:
            if self.supportsDataBreakpoints is not __undefined__:
                self.serialize_scalar(me, "supportsDataBreakpoints", self.supportsDataBreakpoints)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: supportsConfigurationDoneRequest
        if "supportsConfigurationDoneRequest" not in override:
            used_args.append("supportsConfigurationDoneRequest")
            if me is not None and "supportsConfigurationDoneRequest" in me:
                kwargs["supports_configuration_done_request"] = cls.deserialize_scalar(me["supportsConfigurationDoneRequest"])
        # property: supportsFunctionBreakpoints
        if "supportsFunctionBreakpoints" not in override:
            used_args.append("supportsFunctionBreakpoints")
            if me is not None and "supportsFunctionBreakpoints" in me:
                kwargs["supports_function_breakpoints"] = cls.deserialize_scalar(me["supportsFunctionBreakpoints"])
        # property: supportsConditionalBreakpoints
        if "supportsConditionalBreakpoints" not in override:
            used_args.append("supportsConditionalBreakpoints")
            if me is not None and "supportsConditionalBreakpoints" in me:
                kwargs["supports_conditional_breakpoints"] = cls.deserialize_scalar(me["supportsConditionalBreakpoints"])
        # property: supportsHitConditionalBreakpoints
        if "supportsHitConditionalBreakpoints" not in override:
            used_args.append("supportsHitConditionalBreakpoints")
            if me is not None and "supportsHitConditionalBreakpoints" in me:
                kwargs["supports_hit_conditional_breakpoints"] = cls.deserialize_scalar(me["supportsHitConditionalBreakpoints"])
        # property: supportsEvaluateForHovers
        if "supportsEvaluateForHovers" not in override:
            used_args.append("supportsEvaluateForHovers")
            if me is not None and "supportsEvaluateForHovers" in me:
                kwargs["supports_evaluate_for_hovers"] = cls.deserialize_scalar(me["supportsEvaluateForHovers"])
        # property: exceptionBreakpointFilters
        if "exceptionBreakpointFilters" not in override:
            used_args.append("exceptionBreakpointFilters")
            if me is not None and "exceptionBreakpointFilters" in me:
                kwargs["exception_breakpoint_filters"] = cls.deserialize_scalar(me["exceptionBreakpointFilters"], hint=DAPExceptionBreakpointsFilter)
        # property: supportsStepBack
        if "supportsStepBack" not in override:
            used_args.append("supportsStepBack")
            if me is not None and "supportsStepBack" in me:
                kwargs["supports_step_back"] = cls.deserialize_scalar(me["supportsStepBack"])
        # property: supportsSetVariable
        if "supportsSetVariable" not in override:
            used_args.append("supportsSetVariable")
            if me is not None and "supportsSetVariable" in me:
                kwargs["supports_set_variable"] = cls.deserialize_scalar(me["supportsSetVariable"])
        # property: supportsRestartFrame
        if "supportsRestartFrame" not in override:
            used_args.append("supportsRestartFrame")
            if me is not None and "supportsRestartFrame" in me:
                kwargs["supports_restart_frame"] = cls.deserialize_scalar(me["supportsRestartFrame"])
        # property: supportsGotoTargetsRequest
        if "supportsGotoTargetsRequest" not in override:
            used_args.append("supportsGotoTargetsRequest")
            if me is not None and "supportsGotoTargetsRequest" in me:
                kwargs["supports_goto_targets_request"] = cls.deserialize_scalar(me["supportsGotoTargetsRequest"])
        # property: supportsStepInTargetsRequest
        if "supportsStepInTargetsRequest" not in override:
            used_args.append("supportsStepInTargetsRequest")
            if me is not None and "supportsStepInTargetsRequest" in me:
                kwargs["supports_step_in_targets_request"] = cls.deserialize_scalar(me["supportsStepInTargetsRequest"])
        # property: supportsCompletionsRequest
        if "supportsCompletionsRequest" not in override:
            used_args.append("supportsCompletionsRequest")
            if me is not None and "supportsCompletionsRequest" in me:
                kwargs["supports_completions_request"] = cls.deserialize_scalar(me["supportsCompletionsRequest"])
        # property: supportsModulesRequest
        if "supportsModulesRequest" not in override:
            used_args.append("supportsModulesRequest")
            if me is not None and "supportsModulesRequest" in me:
                kwargs["supports_modules_request"] = cls.deserialize_scalar(me["supportsModulesRequest"])
        # property: additionalModuleColumns
        if "additionalModuleColumns" not in override:
            used_args.append("additionalModuleColumns")
            if me is not None and "additionalModuleColumns" in me:
                kwargs["additional_module_columns"] = cls.deserialize_scalar(me["additionalModuleColumns"], hint=DAPColumnDescriptor)
        # property: supportedChecksumAlgorithms
        if "supportedChecksumAlgorithms" not in override:
            used_args.append("supportedChecksumAlgorithms")
            if me is not None and "supportedChecksumAlgorithms" in me:
                kwargs["supported_checksum_algorithms"] = cls.deserialize_scalar(me["supportedChecksumAlgorithms"], hint=DAPChecksumAlgorithm)
        # property: supportsRestartRequest
        if "supportsRestartRequest" not in override:
            used_args.append("supportsRestartRequest")
            if me is not None and "supportsRestartRequest" in me:
                kwargs["supports_restart_request"] = cls.deserialize_scalar(me["supportsRestartRequest"])
        # property: supportsExceptionOptions
        if "supportsExceptionOptions" not in override:
            used_args.append("supportsExceptionOptions")
            if me is not None and "supportsExceptionOptions" in me:
                kwargs["supports_exception_options"] = cls.deserialize_scalar(me["supportsExceptionOptions"])
        # property: supportsValueFormattingOptions
        if "supportsValueFormattingOptions" not in override:
            used_args.append("supportsValueFormattingOptions")
            if me is not None and "supportsValueFormattingOptions" in me:
                kwargs["supports_value_formatting_options"] = cls.deserialize_scalar(me["supportsValueFormattingOptions"])
        # property: supportsExceptionInfoRequest
        if "supportsExceptionInfoRequest" not in override:
            used_args.append("supportsExceptionInfoRequest")
            if me is not None and "supportsExceptionInfoRequest" in me:
                kwargs["supports_exception_info_request"] = cls.deserialize_scalar(me["supportsExceptionInfoRequest"])
        # property: supportTerminateDebuggee
        if "supportTerminateDebuggee" not in override:
            used_args.append("supportTerminateDebuggee")
            if me is not None and "supportTerminateDebuggee" in me:
                kwargs["support_terminate_debuggee"] = cls.deserialize_scalar(me["supportTerminateDebuggee"])
        # property: supportsDelayedStackTraceLoading
        if "supportsDelayedStackTraceLoading" not in override:
            used_args.append("supportsDelayedStackTraceLoading")
            if me is not None and "supportsDelayedStackTraceLoading" in me:
                kwargs["supports_delayed_stack_trace_loading"] = cls.deserialize_scalar(me["supportsDelayedStackTraceLoading"])
        # property: supportsLoadedSourcesRequest
        if "supportsLoadedSourcesRequest" not in override:
            used_args.append("supportsLoadedSourcesRequest")
            if me is not None and "supportsLoadedSourcesRequest" in me:
                kwargs["supports_loaded_sources_request"] = cls.deserialize_scalar(me["supportsLoadedSourcesRequest"])
        # property: supportsLogPoints
        if "supportsLogPoints" not in override:
            used_args.append("supportsLogPoints")
            if me is not None and "supportsLogPoints" in me:
                kwargs["supports_log_points"] = cls.deserialize_scalar(me["supportsLogPoints"])
        # property: supportsTerminateThreadsRequest
        if "supportsTerminateThreadsRequest" not in override:
            used_args.append("supportsTerminateThreadsRequest")
            if me is not None and "supportsTerminateThreadsRequest" in me:
                kwargs["supports_terminate_threads_request"] = cls.deserialize_scalar(me["supportsTerminateThreadsRequest"])
        # property: supportsSetExpression
        if "supportsSetExpression" not in override:
            used_args.append("supportsSetExpression")
            if me is not None and "supportsSetExpression" in me:
                kwargs["supports_set_expression"] = cls.deserialize_scalar(me["supportsSetExpression"])
        # property: supportsTerminateRequest
        if "supportsTerminateRequest" not in override:
            used_args.append("supportsTerminateRequest")
            if me is not None and "supportsTerminateRequest" in me:
                kwargs["supports_terminate_request"] = cls.deserialize_scalar(me["supportsTerminateRequest"])
        # property: supportsDataBreakpoints
        if "supportsDataBreakpoints" not in override:
            used_args.append("supportsDataBreakpoints")
            if me is not None and "supportsDataBreakpoints" in me:
                kwargs["supports_data_breakpoints"] = cls.deserialize_scalar(me["supportsDataBreakpoints"])


class DAPExceptionBreakpointsFilter(DAPObject):
    """
    An ExceptionBreakpointsFilter is shown in the UI as an option for configuring how exceptions are dealt with.
    """
    @staticmethod
    def create(filter, label, default=__undefined__):
        return DAPExceptionBreakpointsFilter(filter, label, default=default)
    
    def __init__(self, filter, label, default=__undefined__):
        DAPObject.__init__(self)
        self.filter = filter
        self.label = label
        self.default = default
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["filter"] = self.get_filter()
        kwargs["label"] = self.get_label()
        if self.has_default():
            kwargs["default"] = self.get_default()
        return kwargs
    
    def get_filter(self):
        return self.filter
    
    def set_filter(self, filter):
        self.filter = filter
        return self
    
    def get_label(self):
        return self.label
    
    def set_label(self, label):
        self.label = label
        return self
    
    def get_default(self):
        if self.default is __undefined__:
            raise ValueError("default is not defined")
        return self.default
    
    def get_default_or_default(self, default=None):
        if self.default is __undefined__:
            return default
        return self.default
    
    def has_default(self):
        return self.default is not __undefined__
    
    def set_default(self, default):
        self.default = default
        return self
    
    def clear_default(self):
        self.default = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: filter
        if "filter" not in override:
            self.serialize_scalar(me, "filter", self.filter)
        # property: label
        if "label" not in override:
            self.serialize_scalar(me, "label", self.label)
        # property: default
        if "default" not in override:
            if self.default is not __undefined__:
                self.serialize_scalar(me, "default", self.default)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: filter
        if "filter" not in override:
            used_args.append("filter")
            args.append(cls.deserialize_scalar(me["filter"]))
        # property: label
        if "label" not in override:
            used_args.append("label")
            args.append(cls.deserialize_scalar(me["label"]))
        # property: default
        if "default" not in override:
            used_args.append("default")
            if me is not None and "default" in me:
                kwargs["default"] = cls.deserialize_scalar(me["default"])


class DAPMessage(DAPObject):
    """
    A structured message object. Used to return errors from requests.
    """
    @staticmethod
    def create(id, format, variables=__undefined__, send_telemetry=__undefined__, show_user=__undefined__, url=__undefined__, url_label=__undefined__):
        return DAPMessage(id, format, variables=variables, send_telemetry=send_telemetry, show_user=show_user, url=url, url_label=url_label)
    
    def __init__(self, id, format, variables=__undefined__, send_telemetry=__undefined__, show_user=__undefined__, url=__undefined__, url_label=__undefined__):
        DAPObject.__init__(self)
        self.id = id
        self.format = format
        self.variables = variables
        self.sendTelemetry = send_telemetry
        self.showUser = show_user
        self.url = url
        self.urlLabel = url_label
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["id"] = self.get_id()
        kwargs["format"] = self.get_format()
        if self.has_variables():
            kwargs["variables"] = self.get_variables()
        if self.has_send_telemetry():
            kwargs["sendTelemetry"] = self.get_send_telemetry()
        if self.has_show_user():
            kwargs["showUser"] = self.get_show_user()
        if self.has_url():
            kwargs["url"] = self.get_url()
        if self.has_url_label():
            kwargs["urlLabel"] = self.get_url_label()
        return kwargs
    
    def get_id(self):
        return self.id
    
    def set_id(self, id):
        self.id = id
        return self
    
    def get_format(self):
        return self.format
    
    def set_format(self, format):
        self.format = format
        return self
    
    def get_variables(self):
        if self.variables is __undefined__:
            raise ValueError("variables is not defined")
        return self.variables
    
    def get_variables_or_default(self, default=None):
        if self.variables is __undefined__:
            return default
        return self.variables
    
    def has_variables(self):
        return self.variables is not __undefined__
    
    def set_variables(self, variables):
        self.variables = variables
        return self
    
    def clear_variables(self):
        self.variables = __undefined__
        return self
    
    def get_send_telemetry(self):
        if self.sendTelemetry is __undefined__:
            raise ValueError("sendTelemetry is not defined")
        return self.sendTelemetry
    
    def get_send_telemetry_or_default(self, default=None):
        if self.sendTelemetry is __undefined__:
            return default
        return self.sendTelemetry
    
    def has_send_telemetry(self):
        return self.sendTelemetry is not __undefined__
    
    def set_send_telemetry(self, send_telemetry):
        self.sendTelemetry = send_telemetry
        return self
    
    def clear_send_telemetry(self):
        self.sendTelemetry = __undefined__
        return self
    
    def get_show_user(self):
        if self.showUser is __undefined__:
            raise ValueError("showUser is not defined")
        return self.showUser
    
    def get_show_user_or_default(self, default=None):
        if self.showUser is __undefined__:
            return default
        return self.showUser
    
    def has_show_user(self):
        return self.showUser is not __undefined__
    
    def set_show_user(self, show_user):
        self.showUser = show_user
        return self
    
    def clear_show_user(self):
        self.showUser = __undefined__
        return self
    
    def get_url(self):
        if self.url is __undefined__:
            raise ValueError("url is not defined")
        return self.url
    
    def get_url_or_default(self, default=None):
        if self.url is __undefined__:
            return default
        return self.url
    
    def has_url(self):
        return self.url is not __undefined__
    
    def set_url(self, url):
        self.url = url
        return self
    
    def clear_url(self):
        self.url = __undefined__
        return self
    
    def get_url_label(self):
        if self.urlLabel is __undefined__:
            raise ValueError("urlLabel is not defined")
        return self.urlLabel
    
    def get_url_label_or_default(self, default=None):
        if self.urlLabel is __undefined__:
            return default
        return self.urlLabel
    
    def has_url_label(self):
        return self.urlLabel is not __undefined__
    
    def set_url_label(self, url_label):
        self.urlLabel = url_label
        return self
    
    def clear_url_label(self):
        self.urlLabel = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: id
        if "id" not in override:
            self.serialize_scalar(me, "id", self.id)
        # property: format
        if "format" not in override:
            self.serialize_scalar(me, "format", self.format)
        # property: variables
        if "variables" not in override:
            if self.variables is not __undefined__:
                me["variables"] = self.variables.serialize()
        # property: sendTelemetry
        if "sendTelemetry" not in override:
            if self.sendTelemetry is not __undefined__:
                self.serialize_scalar(me, "sendTelemetry", self.sendTelemetry)
        # property: showUser
        if "showUser" not in override:
            if self.showUser is not __undefined__:
                self.serialize_scalar(me, "showUser", self.showUser)
        # property: url
        if "url" not in override:
            if self.url is not __undefined__:
                self.serialize_scalar(me, "url", self.url)
        # property: urlLabel
        if "urlLabel" not in override:
            if self.urlLabel is not __undefined__:
                self.serialize_scalar(me, "urlLabel", self.urlLabel)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: id
        if "id" not in override:
            used_args.append("id")
            args.append(cls.deserialize_scalar(me["id"]))
        # property: format
        if "format" not in override:
            used_args.append("format")
            args.append(cls.deserialize_scalar(me["format"]))
        # property: variables
        if "variables" not in override:
            used_args.append("variables")
            if me is not None and "variables" in me:
                kwargs["variables"] = cls.deserialize_as(me["variables"], DAPMessageVariables)
        # property: sendTelemetry
        if "sendTelemetry" not in override:
            used_args.append("sendTelemetry")
            if me is not None and "sendTelemetry" in me:
                kwargs["send_telemetry"] = cls.deserialize_scalar(me["sendTelemetry"])
        # property: showUser
        if "showUser" not in override:
            used_args.append("showUser")
            if me is not None and "showUser" in me:
                kwargs["show_user"] = cls.deserialize_scalar(me["showUser"])
        # property: url
        if "url" not in override:
            used_args.append("url")
            if me is not None and "url" in me:
                kwargs["url"] = cls.deserialize_scalar(me["url"])
        # property: urlLabel
        if "urlLabel" not in override:
            used_args.append("urlLabel")
            if me is not None and "urlLabel" in me:
                kwargs["url_label"] = cls.deserialize_scalar(me["urlLabel"])


class DAPMessageVariables(DAPObject):
    """
    An object used as a dictionary for looking up the variables in the format string.
    """
    @staticmethod
    def create(**kwargs):
        return DAPMessageVariables(**kwargs)
    
    def __init__(self, **kwargs):
        DAPObject.__init__(self)
        self.additionalProperties = kwargs
    
    def as_current_kwargs(self):
        kwargs = {}
        return kwargs
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # additionalProperties
        for key in self.kwargs:
            self.serialize_scalar(me, key, self.kwargs[key])
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # additionalProperties
        if me is not None:
            for key in me:
                if key not in used_args:
                    kwargs[key] = cls.deserialize_scalar(me[key])



class DAPModule(DAPObject):
    """
    A Module object represents a row in the modules view.
Two attributes are mandatory: an id identifies a module in the modules view and is used in a ModuleEvent for identifying a module for adding, updating or deleting.
The name is used to minimally render the module in the UI.

Additional attributes can be added to the module. They will show up in the module View if they have a corresponding ColumnDescriptor.

To avoid an unnecessary proliferation of additional attributes with similar semantics but different names
we recommend to re-use attributes from the 'recommended' list below first, and only introduce new attributes if nothing appropriate could be found.
    """
    @staticmethod
    def create(id, name, path=__undefined__, is_optimized=__undefined__, is_user_code=__undefined__, version=__undefined__, symbol_status=__undefined__, symbol_file_path=__undefined__, date_time_stamp=__undefined__, address_range=__undefined__):
        return DAPModule(id, name, path=path, is_optimized=is_optimized, is_user_code=is_user_code, version=version, symbol_status=symbol_status, symbol_file_path=symbol_file_path, date_time_stamp=date_time_stamp, address_range=address_range)
    
    def __init__(self, id, name, path=__undefined__, is_optimized=__undefined__, is_user_code=__undefined__, version=__undefined__, symbol_status=__undefined__, symbol_file_path=__undefined__, date_time_stamp=__undefined__, address_range=__undefined__):
        DAPObject.__init__(self)
        self.id = id
        self.name = name
        self.path = path
        self.isOptimized = is_optimized
        self.isUserCode = is_user_code
        self.version = version
        self.symbolStatus = symbol_status
        self.symbolFilePath = symbol_file_path
        self.dateTimeStamp = date_time_stamp
        self.addressRange = address_range
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["id"] = self.get_id()
        kwargs["name"] = self.get_name()
        if self.has_path():
            kwargs["path"] = self.get_path()
        if self.has_is_optimized():
            kwargs["isOptimized"] = self.get_is_optimized()
        if self.has_is_user_code():
            kwargs["isUserCode"] = self.get_is_user_code()
        if self.has_version():
            kwargs["version"] = self.get_version()
        if self.has_symbol_status():
            kwargs["symbolStatus"] = self.get_symbol_status()
        if self.has_symbol_file_path():
            kwargs["symbolFilePath"] = self.get_symbol_file_path()
        if self.has_date_time_stamp():
            kwargs["dateTimeStamp"] = self.get_date_time_stamp()
        if self.has_address_range():
            kwargs["addressRange"] = self.get_address_range()
        return kwargs
    
    def get_id(self):
        return self.id
    
    def set_id(self, id):
        self.id = id
        return self
    
    def get_name(self):
        return self.name
    
    def set_name(self, name):
        self.name = name
        return self
    
    def get_path(self):
        if self.path is __undefined__:
            raise ValueError("path is not defined")
        return self.path
    
    def get_path_or_default(self, default=None):
        if self.path is __undefined__:
            return default
        return self.path
    
    def has_path(self):
        return self.path is not __undefined__
    
    def set_path(self, path):
        self.path = path
        return self
    
    def clear_path(self):
        self.path = __undefined__
        return self
    
    def get_is_optimized(self):
        if self.isOptimized is __undefined__:
            raise ValueError("isOptimized is not defined")
        return self.isOptimized
    
    def get_is_optimized_or_default(self, default=None):
        if self.isOptimized is __undefined__:
            return default
        return self.isOptimized
    
    def has_is_optimized(self):
        return self.isOptimized is not __undefined__
    
    def set_is_optimized(self, is_optimized):
        self.isOptimized = is_optimized
        return self
    
    def clear_is_optimized(self):
        self.isOptimized = __undefined__
        return self
    
    def get_is_user_code(self):
        if self.isUserCode is __undefined__:
            raise ValueError("isUserCode is not defined")
        return self.isUserCode
    
    def get_is_user_code_or_default(self, default=None):
        if self.isUserCode is __undefined__:
            return default
        return self.isUserCode
    
    def has_is_user_code(self):
        return self.isUserCode is not __undefined__
    
    def set_is_user_code(self, is_user_code):
        self.isUserCode = is_user_code
        return self
    
    def clear_is_user_code(self):
        self.isUserCode = __undefined__
        return self
    
    def get_version(self):
        if self.version is __undefined__:
            raise ValueError("version is not defined")
        return self.version
    
    def get_version_or_default(self, default=None):
        if self.version is __undefined__:
            return default
        return self.version
    
    def has_version(self):
        return self.version is not __undefined__
    
    def set_version(self, version):
        self.version = version
        return self
    
    def clear_version(self):
        self.version = __undefined__
        return self
    
    def get_symbol_status(self):
        if self.symbolStatus is __undefined__:
            raise ValueError("symbolStatus is not defined")
        return self.symbolStatus
    
    def get_symbol_status_or_default(self, default=None):
        if self.symbolStatus is __undefined__:
            return default
        return self.symbolStatus
    
    def has_symbol_status(self):
        return self.symbolStatus is not __undefined__
    
    def set_symbol_status(self, symbol_status):
        self.symbolStatus = symbol_status
        return self
    
    def clear_symbol_status(self):
        self.symbolStatus = __undefined__
        return self
    
    def get_symbol_file_path(self):
        if self.symbolFilePath is __undefined__:
            raise ValueError("symbolFilePath is not defined")
        return self.symbolFilePath
    
    def get_symbol_file_path_or_default(self, default=None):
        if self.symbolFilePath is __undefined__:
            return default
        return self.symbolFilePath
    
    def has_symbol_file_path(self):
        return self.symbolFilePath is not __undefined__
    
    def set_symbol_file_path(self, symbol_file_path):
        self.symbolFilePath = symbol_file_path
        return self
    
    def clear_symbol_file_path(self):
        self.symbolFilePath = __undefined__
        return self
    
    def get_date_time_stamp(self):
        if self.dateTimeStamp is __undefined__:
            raise ValueError("dateTimeStamp is not defined")
        return self.dateTimeStamp
    
    def get_date_time_stamp_or_default(self, default=None):
        if self.dateTimeStamp is __undefined__:
            return default
        return self.dateTimeStamp
    
    def has_date_time_stamp(self):
        return self.dateTimeStamp is not __undefined__
    
    def set_date_time_stamp(self, date_time_stamp):
        self.dateTimeStamp = date_time_stamp
        return self
    
    def clear_date_time_stamp(self):
        self.dateTimeStamp = __undefined__
        return self
    
    def get_address_range(self):
        if self.addressRange is __undefined__:
            raise ValueError("addressRange is not defined")
        return self.addressRange
    
    def get_address_range_or_default(self, default=None):
        if self.addressRange is __undefined__:
            return default
        return self.addressRange
    
    def has_address_range(self):
        return self.addressRange is not __undefined__
    
    def set_address_range(self, address_range):
        self.addressRange = address_range
        return self
    
    def clear_address_range(self):
        self.addressRange = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: id
        if "id" not in override:
            self.serialize_scalar(me, "id", self.id)
        # property: name
        if "name" not in override:
            self.serialize_scalar(me, "name", self.name)
        # property: path
        if "path" not in override:
            if self.path is not __undefined__:
                self.serialize_scalar(me, "path", self.path)
        # property: isOptimized
        if "isOptimized" not in override:
            if self.isOptimized is not __undefined__:
                self.serialize_scalar(me, "isOptimized", self.isOptimized)
        # property: isUserCode
        if "isUserCode" not in override:
            if self.isUserCode is not __undefined__:
                self.serialize_scalar(me, "isUserCode", self.isUserCode)
        # property: version
        if "version" not in override:
            if self.version is not __undefined__:
                self.serialize_scalar(me, "version", self.version)
        # property: symbolStatus
        if "symbolStatus" not in override:
            if self.symbolStatus is not __undefined__:
                self.serialize_scalar(me, "symbolStatus", self.symbolStatus)
        # property: symbolFilePath
        if "symbolFilePath" not in override:
            if self.symbolFilePath is not __undefined__:
                self.serialize_scalar(me, "symbolFilePath", self.symbolFilePath)
        # property: dateTimeStamp
        if "dateTimeStamp" not in override:
            if self.dateTimeStamp is not __undefined__:
                self.serialize_scalar(me, "dateTimeStamp", self.dateTimeStamp)
        # property: addressRange
        if "addressRange" not in override:
            if self.addressRange is not __undefined__:
                self.serialize_scalar(me, "addressRange", self.addressRange)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: id
        if "id" not in override:
            used_args.append("id")
            args.append(cls.deserialize_scalar(me["id"]))
        # property: name
        if "name" not in override:
            used_args.append("name")
            args.append(cls.deserialize_scalar(me["name"]))
        # property: path
        if "path" not in override:
            used_args.append("path")
            if me is not None and "path" in me:
                kwargs["path"] = cls.deserialize_scalar(me["path"])
        # property: isOptimized
        if "isOptimized" not in override:
            used_args.append("isOptimized")
            if me is not None and "isOptimized" in me:
                kwargs["is_optimized"] = cls.deserialize_scalar(me["isOptimized"])
        # property: isUserCode
        if "isUserCode" not in override:
            used_args.append("isUserCode")
            if me is not None and "isUserCode" in me:
                kwargs["is_user_code"] = cls.deserialize_scalar(me["isUserCode"])
        # property: version
        if "version" not in override:
            used_args.append("version")
            if me is not None and "version" in me:
                kwargs["version"] = cls.deserialize_scalar(me["version"])
        # property: symbolStatus
        if "symbolStatus" not in override:
            used_args.append("symbolStatus")
            if me is not None and "symbolStatus" in me:
                kwargs["symbol_status"] = cls.deserialize_scalar(me["symbolStatus"])
        # property: symbolFilePath
        if "symbolFilePath" not in override:
            used_args.append("symbolFilePath")
            if me is not None and "symbolFilePath" in me:
                kwargs["symbol_file_path"] = cls.deserialize_scalar(me["symbolFilePath"])
        # property: dateTimeStamp
        if "dateTimeStamp" not in override:
            used_args.append("dateTimeStamp")
            if me is not None and "dateTimeStamp" in me:
                kwargs["date_time_stamp"] = cls.deserialize_scalar(me["dateTimeStamp"])
        # property: addressRange
        if "addressRange" not in override:
            used_args.append("addressRange")
            if me is not None and "addressRange" in me:
                kwargs["address_range"] = cls.deserialize_scalar(me["addressRange"])


class DAPColumnDescriptor(DAPObject):
    """
    A ColumnDescriptor specifies what module attribute to show in a column of the ModulesView, how to format it, and what the column's label should be.
It is only used if the underlying UI actually supports this level of customization.
    """
    @staticmethod
    def create(attribute_name, label, format=__undefined__, type=__undefined__, width=__undefined__):
        return DAPColumnDescriptor(attribute_name, label, format=format, type=type, width=width)
    
    def __init__(self, attribute_name, label, format=__undefined__, type=__undefined__, width=__undefined__):
        DAPObject.__init__(self)
        self.attributeName = attribute_name
        self.label = label
        self.format = format
        self.type = type
        self.width = width
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["attributeName"] = self.get_attribute_name()
        kwargs["label"] = self.get_label()
        if self.has_format():
            kwargs["format"] = self.get_format()
        if self.has_type():
            kwargs["type"] = self.get_type()
        if self.has_width():
            kwargs["width"] = self.get_width()
        return kwargs
    
    def get_attribute_name(self):
        return self.attributeName
    
    def set_attribute_name(self, attribute_name):
        self.attributeName = attribute_name
        return self
    
    def get_label(self):
        return self.label
    
    def set_label(self, label):
        self.label = label
        return self
    
    def get_format(self):
        if self.format is __undefined__:
            raise ValueError("format is not defined")
        return self.format
    
    def get_format_or_default(self, default=None):
        if self.format is __undefined__:
            return default
        return self.format
    
    def has_format(self):
        return self.format is not __undefined__
    
    def set_format(self, format):
        self.format = format
        return self
    
    def clear_format(self):
        self.format = __undefined__
        return self
    
    def get_type(self):
        if self.type is __undefined__:
            raise ValueError("type is not defined")
        return self.type
    
    def get_type_or_default(self, default=None):
        if self.type is __undefined__:
            return default
        return self.type
    
    def has_type(self):
        return self.type is not __undefined__
    
    def set_type(self, type):
        self.type = type
        return self
    
    def clear_type(self):
        self.type = __undefined__
        return self
    
    def get_width(self):
        if self.width is __undefined__:
            raise ValueError("width is not defined")
        return self.width
    
    def get_width_or_default(self, default=None):
        if self.width is __undefined__:
            return default
        return self.width
    
    def has_width(self):
        return self.width is not __undefined__
    
    def set_width(self, width):
        self.width = width
        return self
    
    def clear_width(self):
        self.width = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: attributeName
        if "attributeName" not in override:
            self.serialize_scalar(me, "attributeName", self.attributeName)
        # property: label
        if "label" not in override:
            self.serialize_scalar(me, "label", self.label)
        # property: format
        if "format" not in override:
            if self.format is not __undefined__:
                self.serialize_scalar(me, "format", self.format)
        # property: type
        if "type" not in override:
            if self.type is not __undefined__:
                self.serialize_scalar(me, "type", self.type)
        # property: width
        if "width" not in override:
            if self.width is not __undefined__:
                self.serialize_scalar(me, "width", self.width)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: attributeName
        if "attributeName" not in override:
            used_args.append("attributeName")
            args.append(cls.deserialize_scalar(me["attributeName"]))
        # property: label
        if "label" not in override:
            used_args.append("label")
            args.append(cls.deserialize_scalar(me["label"]))
        # property: format
        if "format" not in override:
            used_args.append("format")
            if me is not None and "format" in me:
                kwargs["format"] = cls.deserialize_scalar(me["format"])
        # property: type
        if "type" not in override:
            used_args.append("type")
            if me is not None and "type" in me:
                kwargs["type"] = cls.deserialize_scalar(me["type"])
        # property: width
        if "width" not in override:
            used_args.append("width")
            if me is not None and "width" in me:
                kwargs["width"] = cls.deserialize_scalar(me["width"])


class DAPModulesViewDescriptor(DAPObject):
    """
    The ModulesViewDescriptor is the container for all declarative configuration options of a ModuleView.
For now it only specifies the columns to be shown in the modules view.
    """
    @staticmethod
    def create(columns):
        return DAPModulesViewDescriptor(columns)
    
    def __init__(self, columns):
        DAPObject.__init__(self)
        self.columns = columns
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["columns"] = self.get_columns()
        return kwargs
    
    def get_columns(self):
        return self.columns
    
    def set_columns(self, columns):
        self.columns = columns
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: columns
        if "columns" not in override:
            self.serialize_scalar(me, "columns", self.columns, hint=DAPColumnDescriptor)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: columns
        if "columns" not in override:
            used_args.append("columns")
            args.append(cls.deserialize_scalar(me["columns"], hint=DAPColumnDescriptor))


class DAPThread(DAPObject):
    """
    A Thread
    """
    @staticmethod
    def create(id, name):
        return DAPThread(id, name)
    
    def __init__(self, id, name):
        DAPObject.__init__(self)
        self.id = id
        self.name = name
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["id"] = self.get_id()
        kwargs["name"] = self.get_name()
        return kwargs
    
    def get_id(self):
        return self.id
    
    def set_id(self, id):
        self.id = id
        return self
    
    def get_name(self):
        return self.name
    
    def set_name(self, name):
        self.name = name
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: id
        if "id" not in override:
            self.serialize_scalar(me, "id", self.id)
        # property: name
        if "name" not in override:
            self.serialize_scalar(me, "name", self.name)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: id
        if "id" not in override:
            used_args.append("id")
            args.append(cls.deserialize_scalar(me["id"]))
        # property: name
        if "name" not in override:
            used_args.append("name")
            args.append(cls.deserialize_scalar(me["name"]))


class DAPSource(DAPObject):
    """
    A Source is a descriptor for source code. It is returned from the debug adapter as part of a StackFrame and it is used by clients when specifying breakpoints.
    """
    @staticmethod
    def create(name=__undefined__, path=__undefined__, source_reference=__undefined__, presentation_hint=__undefined__, origin=__undefined__, sources=__undefined__, adapter_data=__undefined__, checksums=__undefined__):
        return DAPSource(name=name, path=path, source_reference=source_reference, presentation_hint=presentation_hint, origin=origin, sources=sources, adapter_data=adapter_data, checksums=checksums)
    
    def __init__(self, name=__undefined__, path=__undefined__, source_reference=__undefined__, presentation_hint=__undefined__, origin=__undefined__, sources=__undefined__, adapter_data=__undefined__, checksums=__undefined__):
        DAPObject.__init__(self)
        self.name = name
        self.path = path
        self.sourceReference = source_reference
        self.presentationHint = presentation_hint
        self.origin = origin
        self.sources = sources
        self.adapterData = adapter_data
        self.checksums = checksums
    
    def as_current_kwargs(self):
        kwargs = {}
        if self.has_name():
            kwargs["name"] = self.get_name()
        if self.has_path():
            kwargs["path"] = self.get_path()
        if self.has_source_reference():
            kwargs["sourceReference"] = self.get_source_reference()
        if self.has_presentation_hint():
            kwargs["presentationHint"] = self.get_presentation_hint()
        if self.has_origin():
            kwargs["origin"] = self.get_origin()
        if self.has_sources():
            kwargs["sources"] = self.get_sources()
        if self.has_adapter_data():
            kwargs["adapterData"] = self.get_adapter_data()
        if self.has_checksums():
            kwargs["checksums"] = self.get_checksums()
        return kwargs
    
    def get_name(self):
        if self.name is __undefined__:
            raise ValueError("name is not defined")
        return self.name
    
    def get_name_or_default(self, default=None):
        if self.name is __undefined__:
            return default
        return self.name
    
    def has_name(self):
        return self.name is not __undefined__
    
    def set_name(self, name):
        self.name = name
        return self
    
    def clear_name(self):
        self.name = __undefined__
        return self
    
    def get_path(self):
        if self.path is __undefined__:
            raise ValueError("path is not defined")
        return self.path
    
    def get_path_or_default(self, default=None):
        if self.path is __undefined__:
            return default
        return self.path
    
    def has_path(self):
        return self.path is not __undefined__
    
    def set_path(self, path):
        self.path = path
        return self
    
    def clear_path(self):
        self.path = __undefined__
        return self
    
    def get_source_reference(self):
        if self.sourceReference is __undefined__:
            raise ValueError("sourceReference is not defined")
        return self.sourceReference
    
    def get_source_reference_or_default(self, default=None):
        if self.sourceReference is __undefined__:
            return default
        return self.sourceReference
    
    def has_source_reference(self):
        return self.sourceReference is not __undefined__
    
    def set_source_reference(self, source_reference):
        self.sourceReference = source_reference
        return self
    
    def clear_source_reference(self):
        self.sourceReference = __undefined__
        return self
    
    def get_presentation_hint(self):
        if self.presentationHint is __undefined__:
            raise ValueError("presentationHint is not defined")
        return self.presentationHint
    
    def get_presentation_hint_or_default(self, default=None):
        if self.presentationHint is __undefined__:
            return default
        return self.presentationHint
    
    def has_presentation_hint(self):
        return self.presentationHint is not __undefined__
    
    def set_presentation_hint(self, presentation_hint):
        self.presentationHint = presentation_hint
        return self
    
    def clear_presentation_hint(self):
        self.presentationHint = __undefined__
        return self
    
    def get_origin(self):
        if self.origin is __undefined__:
            raise ValueError("origin is not defined")
        return self.origin
    
    def get_origin_or_default(self, default=None):
        if self.origin is __undefined__:
            return default
        return self.origin
    
    def has_origin(self):
        return self.origin is not __undefined__
    
    def set_origin(self, origin):
        self.origin = origin
        return self
    
    def clear_origin(self):
        self.origin = __undefined__
        return self
    
    def get_sources(self):
        if self.sources is __undefined__:
            raise ValueError("sources is not defined")
        return self.sources
    
    def get_sources_or_default(self, default=None):
        if self.sources is __undefined__:
            return default
        return self.sources
    
    def has_sources(self):
        return self.sources is not __undefined__
    
    def set_sources(self, sources):
        self.sources = sources
        return self
    
    def clear_sources(self):
        self.sources = __undefined__
        return self
    
    def get_adapter_data(self):
        if self.adapterData is __undefined__:
            raise ValueError("adapterData is not defined")
        return self.adapterData
    
    def get_adapter_data_or_default(self, default=None):
        if self.adapterData is __undefined__:
            return default
        return self.adapterData
    
    def has_adapter_data(self):
        return self.adapterData is not __undefined__
    
    def set_adapter_data(self, adapter_data):
        self.adapterData = adapter_data
        return self
    
    def clear_adapter_data(self):
        self.adapterData = __undefined__
        return self
    
    def get_checksums(self):
        if self.checksums is __undefined__:
            raise ValueError("checksums is not defined")
        return self.checksums
    
    def get_checksums_or_default(self, default=None):
        if self.checksums is __undefined__:
            return default
        return self.checksums
    
    def has_checksums(self):
        return self.checksums is not __undefined__
    
    def set_checksums(self, checksums):
        self.checksums = checksums
        return self
    
    def clear_checksums(self):
        self.checksums = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: name
        if "name" not in override:
            if self.name is not __undefined__:
                self.serialize_scalar(me, "name", self.name)
        # property: path
        if "path" not in override:
            if self.path is not __undefined__:
                self.serialize_scalar(me, "path", self.path)
        # property: sourceReference
        if "sourceReference" not in override:
            if self.sourceReference is not __undefined__:
                self.serialize_scalar(me, "sourceReference", self.sourceReference)
        # property: presentationHint
        if "presentationHint" not in override:
            if self.presentationHint is not __undefined__:
                self.serialize_scalar(me, "presentationHint", self.presentationHint)
        # property: origin
        if "origin" not in override:
            if self.origin is not __undefined__:
                self.serialize_scalar(me, "origin", self.origin)
        # property: sources
        if "sources" not in override:
            if self.sources is not __undefined__:
                self.serialize_scalar(me, "sources", self.sources, hint=DAPSource)
        # property: adapterData
        if "adapterData" not in override:
            if self.adapterData is not __undefined__:
                self.serialize_scalar(me, "adapterData", self.adapterData)
        # property: checksums
        if "checksums" not in override:
            if self.checksums is not __undefined__:
                self.serialize_scalar(me, "checksums", self.checksums, hint=DAPChecksum)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: name
        if "name" not in override:
            used_args.append("name")
            if me is not None and "name" in me:
                kwargs["name"] = cls.deserialize_scalar(me["name"])
        # property: path
        if "path" not in override:
            used_args.append("path")
            if me is not None and "path" in me:
                kwargs["path"] = cls.deserialize_scalar(me["path"])
        # property: sourceReference
        if "sourceReference" not in override:
            used_args.append("sourceReference")
            if me is not None and "sourceReference" in me:
                kwargs["source_reference"] = cls.deserialize_scalar(me["sourceReference"])
        # property: presentationHint
        if "presentationHint" not in override:
            used_args.append("presentationHint")
            if me is not None and "presentationHint" in me:
                kwargs["presentation_hint"] = cls.deserialize_scalar(me["presentationHint"])
        # property: origin
        if "origin" not in override:
            used_args.append("origin")
            if me is not None and "origin" in me:
                kwargs["origin"] = cls.deserialize_scalar(me["origin"])
        # property: sources
        if "sources" not in override:
            used_args.append("sources")
            if me is not None and "sources" in me:
                kwargs["sources"] = cls.deserialize_scalar(me["sources"], hint=DAPSource)
        # property: adapterData
        if "adapterData" not in override:
            used_args.append("adapterData")
            if me is not None and "adapterData" in me:
                kwargs["adapter_data"] = cls.deserialize_scalar(me["adapterData"])
        # property: checksums
        if "checksums" not in override:
            used_args.append("checksums")
            if me is not None and "checksums" in me:
                kwargs["checksums"] = cls.deserialize_scalar(me["checksums"], hint=DAPChecksum)


class DAPSubsource(DAPObject):
    """
    Subsource is the actual representation of source at finest possible granularity. It can be used to send decompiled or bytecode information.
    """
    @staticmethod
    def create(sources=__undefined__):
        return DAPSubsource(sources=sources)
    
    def __init__(self, sources=__undefined__):
        DAPObject.__init__(self)
        self.sources = sources
    
    def as_current_kwargs(self):
        kwargs = {}
        if self.has_sources():
            kwargs["sources"] = self.get_sources()
        return kwargs
    
    def get_sources(self):
        if self.sources is __undefined__:
            raise ValueError("sources is not defined")
        return self.sources
    
    def get_sources_or_default(self, default=None):
        if self.sources is __undefined__:
            return default
        return self.sources
    
    def has_sources(self):
        return self.sources is not __undefined__
    
    def set_sources(self, sources):
        self.sources = sources
        return self
    
    def clear_sources(self):
        self.sources = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: sources
        if "sources" not in override:
            if self.sources is not __undefined__:
                self.serialize_scalar(me, "sources", self.sources, hint=DAPSubsourceElement)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: sources
        if "sources" not in override:
            used_args.append("sources")
            if me is not None and "sources" in me:
                kwargs["sources"] = cls.deserialize_scalar(me["sources"], hint=DAPSubsourceElement)


class DAPSubsourceElement(DAPObject):
    """
    Represents single finest possible step for step operation.
    """
    @staticmethod
    def create(text, line=__undefined__, source=__undefined__):
        return DAPSubsourceElement(text, line=line, source=source)
    
    def __init__(self, text, line=__undefined__, source=__undefined__):
        DAPObject.__init__(self)
        self.text = text
        self.line = line
        self.Source = source
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["text"] = self.get_text()
        if self.has_line():
            kwargs["line"] = self.get_line()
        if self.has_source():
            kwargs["Source"] = self.get_source()
        return kwargs
    
    def get_text(self):
        return self.text
    
    def set_text(self, text):
        self.text = text
        return self
    
    def get_line(self):
        if self.line is __undefined__:
            raise ValueError("line is not defined")
        return self.line
    
    def get_line_or_default(self, default=None):
        if self.line is __undefined__:
            return default
        return self.line
    
    def has_line(self):
        return self.line is not __undefined__
    
    def set_line(self, line):
        self.line = line
        return self
    
    def clear_line(self):
        self.line = __undefined__
        return self
    
    def get_source(self):
        if self.Source is __undefined__:
            raise ValueError("Source is not defined")
        return self.Source
    
    def get_source_or_default(self, default=None):
        if self.Source is __undefined__:
            return default
        return self.Source
    
    def has_source(self):
        return self.Source is not __undefined__
    
    def set_source(self, source):
        self.Source = source
        return self
    
    def clear_source(self):
        self.Source = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: text
        if "text" not in override:
            self.serialize_scalar(me, "text", self.text)
        # property: line
        if "line" not in override:
            if self.line is not __undefined__:
                self.serialize_scalar(me, "line", self.line)
        # property: Source
        if "Source" not in override:
            if self.Source is not __undefined__:
                me["Source"] = self.Source.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: text
        if "text" not in override:
            used_args.append("text")
            args.append(cls.deserialize_scalar(me["text"]))
        # property: line
        if "line" not in override:
            used_args.append("line")
            if me is not None and "line" in me:
                kwargs["line"] = cls.deserialize_scalar(me["line"])
        # property: Source
        if "Source" not in override:
            used_args.append("Source")
            if me is not None and "Source" in me:
                kwargs["source"] = cls.deserialize_as(me["Source"], DAPSource)


class DAPStackFrame(DAPObject):
    """
    A Stackframe contains the source location.
    """
    @staticmethod
    def create(id, name, line, column, source=__undefined__, subsource=__undefined__, end_line=__undefined__, end_column=__undefined__, module_id=__undefined__, subsource_element=__undefined__, presentation_hint=__undefined__):
        return DAPStackFrame(id, name, line, column, source=source, subsource=subsource, end_line=end_line, end_column=end_column, module_id=module_id, subsource_element=subsource_element, presentation_hint=presentation_hint)
    
    def __init__(self, id, name, line, column, source=__undefined__, subsource=__undefined__, end_line=__undefined__, end_column=__undefined__, module_id=__undefined__, subsource_element=__undefined__, presentation_hint=__undefined__):
        DAPObject.__init__(self)
        self.id = id
        self.name = name
        self.source = source
        self.subsource = subsource
        self.line = line
        self.column = column
        self.endLine = end_line
        self.endColumn = end_column
        self.moduleId = module_id
        self.subsourceElement = subsource_element
        self.presentationHint = presentation_hint
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["id"] = self.get_id()
        kwargs["name"] = self.get_name()
        kwargs["line"] = self.get_line()
        kwargs["column"] = self.get_column()
        if self.has_source():
            kwargs["source"] = self.get_source()
        if self.has_subsource():
            kwargs["subsource"] = self.get_subsource()
        if self.has_end_line():
            kwargs["endLine"] = self.get_end_line()
        if self.has_end_column():
            kwargs["endColumn"] = self.get_end_column()
        if self.has_module_id():
            kwargs["moduleId"] = self.get_module_id()
        if self.has_subsource_element():
            kwargs["subsourceElement"] = self.get_subsource_element()
        if self.has_presentation_hint():
            kwargs["presentationHint"] = self.get_presentation_hint()
        return kwargs
    
    def get_id(self):
        return self.id
    
    def set_id(self, id):
        self.id = id
        return self
    
    def get_name(self):
        return self.name
    
    def set_name(self, name):
        self.name = name
        return self
    
    def get_source(self):
        if self.source is __undefined__:
            raise ValueError("source is not defined")
        return self.source
    
    def get_source_or_default(self, default=None):
        if self.source is __undefined__:
            return default
        return self.source
    
    def has_source(self):
        return self.source is not __undefined__
    
    def set_source(self, source):
        self.source = source
        return self
    
    def clear_source(self):
        self.source = __undefined__
        return self
    
    def get_subsource(self):
        if self.subsource is __undefined__:
            raise ValueError("subsource is not defined")
        return self.subsource
    
    def get_subsource_or_default(self, default=None):
        if self.subsource is __undefined__:
            return default
        return self.subsource
    
    def has_subsource(self):
        return self.subsource is not __undefined__
    
    def set_subsource(self, subsource):
        self.subsource = subsource
        return self
    
    def clear_subsource(self):
        self.subsource = __undefined__
        return self
    
    def get_line(self):
        return self.line
    
    def set_line(self, line):
        self.line = line
        return self
    
    def get_column(self):
        return self.column
    
    def set_column(self, column):
        self.column = column
        return self
    
    def get_end_line(self):
        if self.endLine is __undefined__:
            raise ValueError("endLine is not defined")
        return self.endLine
    
    def get_end_line_or_default(self, default=None):
        if self.endLine is __undefined__:
            return default
        return self.endLine
    
    def has_end_line(self):
        return self.endLine is not __undefined__
    
    def set_end_line(self, end_line):
        self.endLine = end_line
        return self
    
    def clear_end_line(self):
        self.endLine = __undefined__
        return self
    
    def get_end_column(self):
        if self.endColumn is __undefined__:
            raise ValueError("endColumn is not defined")
        return self.endColumn
    
    def get_end_column_or_default(self, default=None):
        if self.endColumn is __undefined__:
            return default
        return self.endColumn
    
    def has_end_column(self):
        return self.endColumn is not __undefined__
    
    def set_end_column(self, end_column):
        self.endColumn = end_column
        return self
    
    def clear_end_column(self):
        self.endColumn = __undefined__
        return self
    
    def get_module_id(self):
        if self.moduleId is __undefined__:
            raise ValueError("moduleId is not defined")
        return self.moduleId
    
    def get_module_id_or_default(self, default=None):
        if self.moduleId is __undefined__:
            return default
        return self.moduleId
    
    def has_module_id(self):
        return self.moduleId is not __undefined__
    
    def set_module_id(self, module_id):
        self.moduleId = module_id
        return self
    
    def clear_module_id(self):
        self.moduleId = __undefined__
        return self
    
    def get_subsource_element(self):
        if self.subsourceElement is __undefined__:
            raise ValueError("subsourceElement is not defined")
        return self.subsourceElement
    
    def get_subsource_element_or_default(self, default=None):
        if self.subsourceElement is __undefined__:
            return default
        return self.subsourceElement
    
    def has_subsource_element(self):
        return self.subsourceElement is not __undefined__
    
    def set_subsource_element(self, subsource_element):
        self.subsourceElement = subsource_element
        return self
    
    def clear_subsource_element(self):
        self.subsourceElement = __undefined__
        return self
    
    def get_presentation_hint(self):
        if self.presentationHint is __undefined__:
            raise ValueError("presentationHint is not defined")
        return self.presentationHint
    
    def get_presentation_hint_or_default(self, default=None):
        if self.presentationHint is __undefined__:
            return default
        return self.presentationHint
    
    def has_presentation_hint(self):
        return self.presentationHint is not __undefined__
    
    def set_presentation_hint(self, presentation_hint):
        self.presentationHint = presentation_hint
        return self
    
    def clear_presentation_hint(self):
        self.presentationHint = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: id
        if "id" not in override:
            self.serialize_scalar(me, "id", self.id)
        # property: name
        if "name" not in override:
            self.serialize_scalar(me, "name", self.name)
        # property: source
        if "source" not in override:
            if self.source is not __undefined__:
                me["source"] = self.source.serialize()
        # property: subsource
        if "subsource" not in override:
            if self.subsource is not __undefined__:
                me["subsource"] = self.subsource.serialize()
        # property: line
        if "line" not in override:
            self.serialize_scalar(me, "line", self.line)
        # property: column
        if "column" not in override:
            self.serialize_scalar(me, "column", self.column)
        # property: endLine
        if "endLine" not in override:
            if self.endLine is not __undefined__:
                self.serialize_scalar(me, "endLine", self.endLine)
        # property: endColumn
        if "endColumn" not in override:
            if self.endColumn is not __undefined__:
                self.serialize_scalar(me, "endColumn", self.endColumn)
        # property: moduleId
        if "moduleId" not in override:
            if self.moduleId is not __undefined__:
                self.serialize_scalar(me, "moduleId", self.moduleId)
        # property: subsourceElement
        if "subsourceElement" not in override:
            if self.subsourceElement is not __undefined__:
                self.serialize_scalar(me, "subsourceElement", self.subsourceElement)
        # property: presentationHint
        if "presentationHint" not in override:
            if self.presentationHint is not __undefined__:
                self.serialize_scalar(me, "presentationHint", self.presentationHint)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: id
        if "id" not in override:
            used_args.append("id")
            args.append(cls.deserialize_scalar(me["id"]))
        # property: name
        if "name" not in override:
            used_args.append("name")
            args.append(cls.deserialize_scalar(me["name"]))
        # property: source
        if "source" not in override:
            used_args.append("source")
            if me is not None and "source" in me:
                kwargs["source"] = cls.deserialize_as(me["source"], DAPSource)
        # property: subsource
        if "subsource" not in override:
            used_args.append("subsource")
            if me is not None and "subsource" in me:
                kwargs["subsource"] = cls.deserialize_as(me["subsource"], DAPSubsource)
        # property: line
        if "line" not in override:
            used_args.append("line")
            args.append(cls.deserialize_scalar(me["line"]))
        # property: column
        if "column" not in override:
            used_args.append("column")
            args.append(cls.deserialize_scalar(me["column"]))
        # property: endLine
        if "endLine" not in override:
            used_args.append("endLine")
            if me is not None and "endLine" in me:
                kwargs["end_line"] = cls.deserialize_scalar(me["endLine"])
        # property: endColumn
        if "endColumn" not in override:
            used_args.append("endColumn")
            if me is not None and "endColumn" in me:
                kwargs["end_column"] = cls.deserialize_scalar(me["endColumn"])
        # property: moduleId
        if "moduleId" not in override:
            used_args.append("moduleId")
            if me is not None and "moduleId" in me:
                kwargs["module_id"] = cls.deserialize_scalar(me["moduleId"])
        # property: subsourceElement
        if "subsourceElement" not in override:
            used_args.append("subsourceElement")
            if me is not None and "subsourceElement" in me:
                kwargs["subsource_element"] = cls.deserialize_scalar(me["subsourceElement"])
        # property: presentationHint
        if "presentationHint" not in override:
            used_args.append("presentationHint")
            if me is not None and "presentationHint" in me:
                kwargs["presentation_hint"] = cls.deserialize_scalar(me["presentationHint"])


class DAPScope(DAPObject):
    """
    A Scope is a named container for variables. Optionally a scope can map to a source or a range within a source.
    """
    @staticmethod
    def create(name, variables_reference, expensive, named_variables=__undefined__, indexed_variables=__undefined__, source=__undefined__, line=__undefined__, column=__undefined__, end_line=__undefined__, end_column=__undefined__):
        return DAPScope(name, variables_reference, expensive, named_variables=named_variables, indexed_variables=indexed_variables, source=source, line=line, column=column, end_line=end_line, end_column=end_column)
    
    def __init__(self, name, variables_reference, expensive, named_variables=__undefined__, indexed_variables=__undefined__, source=__undefined__, line=__undefined__, column=__undefined__, end_line=__undefined__, end_column=__undefined__):
        DAPObject.__init__(self)
        self.name = name
        self.variablesReference = variables_reference
        self.namedVariables = named_variables
        self.indexedVariables = indexed_variables
        self.expensive = expensive
        self.source = source
        self.line = line
        self.column = column
        self.endLine = end_line
        self.endColumn = end_column
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["name"] = self.get_name()
        kwargs["variablesReference"] = self.get_variables_reference()
        kwargs["expensive"] = self.get_expensive()
        if self.has_named_variables():
            kwargs["namedVariables"] = self.get_named_variables()
        if self.has_indexed_variables():
            kwargs["indexedVariables"] = self.get_indexed_variables()
        if self.has_source():
            kwargs["source"] = self.get_source()
        if self.has_line():
            kwargs["line"] = self.get_line()
        if self.has_column():
            kwargs["column"] = self.get_column()
        if self.has_end_line():
            kwargs["endLine"] = self.get_end_line()
        if self.has_end_column():
            kwargs["endColumn"] = self.get_end_column()
        return kwargs
    
    def get_name(self):
        return self.name
    
    def set_name(self, name):
        self.name = name
        return self
    
    def get_variables_reference(self):
        return self.variablesReference
    
    def set_variables_reference(self, variables_reference):
        self.variablesReference = variables_reference
        return self
    
    def get_named_variables(self):
        if self.namedVariables is __undefined__:
            raise ValueError("namedVariables is not defined")
        return self.namedVariables
    
    def get_named_variables_or_default(self, default=None):
        if self.namedVariables is __undefined__:
            return default
        return self.namedVariables
    
    def has_named_variables(self):
        return self.namedVariables is not __undefined__
    
    def set_named_variables(self, named_variables):
        self.namedVariables = named_variables
        return self
    
    def clear_named_variables(self):
        self.namedVariables = __undefined__
        return self
    
    def get_indexed_variables(self):
        if self.indexedVariables is __undefined__:
            raise ValueError("indexedVariables is not defined")
        return self.indexedVariables
    
    def get_indexed_variables_or_default(self, default=None):
        if self.indexedVariables is __undefined__:
            return default
        return self.indexedVariables
    
    def has_indexed_variables(self):
        return self.indexedVariables is not __undefined__
    
    def set_indexed_variables(self, indexed_variables):
        self.indexedVariables = indexed_variables
        return self
    
    def clear_indexed_variables(self):
        self.indexedVariables = __undefined__
        return self
    
    def get_expensive(self):
        return self.expensive
    
    def set_expensive(self, expensive):
        self.expensive = expensive
        return self
    
    def get_source(self):
        if self.source is __undefined__:
            raise ValueError("source is not defined")
        return self.source
    
    def get_source_or_default(self, default=None):
        if self.source is __undefined__:
            return default
        return self.source
    
    def has_source(self):
        return self.source is not __undefined__
    
    def set_source(self, source):
        self.source = source
        return self
    
    def clear_source(self):
        self.source = __undefined__
        return self
    
    def get_line(self):
        if self.line is __undefined__:
            raise ValueError("line is not defined")
        return self.line
    
    def get_line_or_default(self, default=None):
        if self.line is __undefined__:
            return default
        return self.line
    
    def has_line(self):
        return self.line is not __undefined__
    
    def set_line(self, line):
        self.line = line
        return self
    
    def clear_line(self):
        self.line = __undefined__
        return self
    
    def get_column(self):
        if self.column is __undefined__:
            raise ValueError("column is not defined")
        return self.column
    
    def get_column_or_default(self, default=None):
        if self.column is __undefined__:
            return default
        return self.column
    
    def has_column(self):
        return self.column is not __undefined__
    
    def set_column(self, column):
        self.column = column
        return self
    
    def clear_column(self):
        self.column = __undefined__
        return self
    
    def get_end_line(self):
        if self.endLine is __undefined__:
            raise ValueError("endLine is not defined")
        return self.endLine
    
    def get_end_line_or_default(self, default=None):
        if self.endLine is __undefined__:
            return default
        return self.endLine
    
    def has_end_line(self):
        return self.endLine is not __undefined__
    
    def set_end_line(self, end_line):
        self.endLine = end_line
        return self
    
    def clear_end_line(self):
        self.endLine = __undefined__
        return self
    
    def get_end_column(self):
        if self.endColumn is __undefined__:
            raise ValueError("endColumn is not defined")
        return self.endColumn
    
    def get_end_column_or_default(self, default=None):
        if self.endColumn is __undefined__:
            return default
        return self.endColumn
    
    def has_end_column(self):
        return self.endColumn is not __undefined__
    
    def set_end_column(self, end_column):
        self.endColumn = end_column
        return self
    
    def clear_end_column(self):
        self.endColumn = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: name
        if "name" not in override:
            self.serialize_scalar(me, "name", self.name)
        # property: variablesReference
        if "variablesReference" not in override:
            self.serialize_scalar(me, "variablesReference", self.variablesReference)
        # property: namedVariables
        if "namedVariables" not in override:
            if self.namedVariables is not __undefined__:
                self.serialize_scalar(me, "namedVariables", self.namedVariables)
        # property: indexedVariables
        if "indexedVariables" not in override:
            if self.indexedVariables is not __undefined__:
                self.serialize_scalar(me, "indexedVariables", self.indexedVariables)
        # property: expensive
        if "expensive" not in override:
            self.serialize_scalar(me, "expensive", self.expensive)
        # property: source
        if "source" not in override:
            if self.source is not __undefined__:
                me["source"] = self.source.serialize()
        # property: line
        if "line" not in override:
            if self.line is not __undefined__:
                self.serialize_scalar(me, "line", self.line)
        # property: column
        if "column" not in override:
            if self.column is not __undefined__:
                self.serialize_scalar(me, "column", self.column)
        # property: endLine
        if "endLine" not in override:
            if self.endLine is not __undefined__:
                self.serialize_scalar(me, "endLine", self.endLine)
        # property: endColumn
        if "endColumn" not in override:
            if self.endColumn is not __undefined__:
                self.serialize_scalar(me, "endColumn", self.endColumn)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: name
        if "name" not in override:
            used_args.append("name")
            args.append(cls.deserialize_scalar(me["name"]))
        # property: variablesReference
        if "variablesReference" not in override:
            used_args.append("variablesReference")
            args.append(cls.deserialize_scalar(me["variablesReference"]))
        # property: namedVariables
        if "namedVariables" not in override:
            used_args.append("namedVariables")
            if me is not None and "namedVariables" in me:
                kwargs["named_variables"] = cls.deserialize_scalar(me["namedVariables"])
        # property: indexedVariables
        if "indexedVariables" not in override:
            used_args.append("indexedVariables")
            if me is not None and "indexedVariables" in me:
                kwargs["indexed_variables"] = cls.deserialize_scalar(me["indexedVariables"])
        # property: expensive
        if "expensive" not in override:
            used_args.append("expensive")
            args.append(cls.deserialize_scalar(me["expensive"]))
        # property: source
        if "source" not in override:
            used_args.append("source")
            if me is not None and "source" in me:
                kwargs["source"] = cls.deserialize_as(me["source"], DAPSource)
        # property: line
        if "line" not in override:
            used_args.append("line")
            if me is not None and "line" in me:
                kwargs["line"] = cls.deserialize_scalar(me["line"])
        # property: column
        if "column" not in override:
            used_args.append("column")
            if me is not None and "column" in me:
                kwargs["column"] = cls.deserialize_scalar(me["column"])
        # property: endLine
        if "endLine" not in override:
            used_args.append("endLine")
            if me is not None and "endLine" in me:
                kwargs["end_line"] = cls.deserialize_scalar(me["endLine"])
        # property: endColumn
        if "endColumn" not in override:
            used_args.append("endColumn")
            if me is not None and "endColumn" in me:
                kwargs["end_column"] = cls.deserialize_scalar(me["endColumn"])


class DAPVariable(DAPObject):
    """
    A Variable is a name/value pair.
Optionally a variable can have a 'type' that is shown if space permits or when hovering over the variable's name.
An optional 'kind' is used to render additional properties of the variable, e.g. different icons can be used to indicate that a variable is public or private.
If the value is structured (has children), a handle is provided to retrieve the children with the VariablesRequest.
If the number of named or indexed children is large, the numbers should be returned via the optional 'namedVariables' and 'indexedVariables' attributes.
The client can use this optional information to present the children in a paged UI and fetch them in chunks.
    """
    @staticmethod
    def create(name, value, variables_reference, type=__undefined__, presentation_hint=__undefined__, evaluate_name=__undefined__, named_variables=__undefined__, indexed_variables=__undefined__):
        return DAPVariable(name, value, variables_reference, type=type, presentation_hint=presentation_hint, evaluate_name=evaluate_name, named_variables=named_variables, indexed_variables=indexed_variables)
    
    def __init__(self, name, value, variables_reference, type=__undefined__, presentation_hint=__undefined__, evaluate_name=__undefined__, named_variables=__undefined__, indexed_variables=__undefined__):
        DAPObject.__init__(self)
        self.name = name
        self.value = value
        self.type = type
        self.presentationHint = presentation_hint
        self.evaluateName = evaluate_name
        self.variablesReference = variables_reference
        self.namedVariables = named_variables
        self.indexedVariables = indexed_variables
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["name"] = self.get_name()
        kwargs["value"] = self.get_value()
        kwargs["variablesReference"] = self.get_variables_reference()
        if self.has_type():
            kwargs["type"] = self.get_type()
        if self.has_presentation_hint():
            kwargs["presentationHint"] = self.get_presentation_hint()
        if self.has_evaluate_name():
            kwargs["evaluateName"] = self.get_evaluate_name()
        if self.has_named_variables():
            kwargs["namedVariables"] = self.get_named_variables()
        if self.has_indexed_variables():
            kwargs["indexedVariables"] = self.get_indexed_variables()
        return kwargs
    
    def get_name(self):
        return self.name
    
    def set_name(self, name):
        self.name = name
        return self
    
    def get_value(self):
        return self.value
    
    def set_value(self, value):
        self.value = value
        return self
    
    def get_type(self):
        if self.type is __undefined__:
            raise ValueError("type is not defined")
        return self.type
    
    def get_type_or_default(self, default=None):
        if self.type is __undefined__:
            return default
        return self.type
    
    def has_type(self):
        return self.type is not __undefined__
    
    def set_type(self, type):
        self.type = type
        return self
    
    def clear_type(self):
        self.type = __undefined__
        return self
    
    def get_presentation_hint(self):
        if self.presentationHint is __undefined__:
            raise ValueError("presentationHint is not defined")
        return self.presentationHint
    
    def get_presentation_hint_or_default(self, default=None):
        if self.presentationHint is __undefined__:
            return default
        return self.presentationHint
    
    def has_presentation_hint(self):
        return self.presentationHint is not __undefined__
    
    def set_presentation_hint(self, presentation_hint):
        self.presentationHint = presentation_hint
        return self
    
    def clear_presentation_hint(self):
        self.presentationHint = __undefined__
        return self
    
    def get_evaluate_name(self):
        if self.evaluateName is __undefined__:
            raise ValueError("evaluateName is not defined")
        return self.evaluateName
    
    def get_evaluate_name_or_default(self, default=None):
        if self.evaluateName is __undefined__:
            return default
        return self.evaluateName
    
    def has_evaluate_name(self):
        return self.evaluateName is not __undefined__
    
    def set_evaluate_name(self, evaluate_name):
        self.evaluateName = evaluate_name
        return self
    
    def clear_evaluate_name(self):
        self.evaluateName = __undefined__
        return self
    
    def get_variables_reference(self):
        return self.variablesReference
    
    def set_variables_reference(self, variables_reference):
        self.variablesReference = variables_reference
        return self
    
    def get_named_variables(self):
        if self.namedVariables is __undefined__:
            raise ValueError("namedVariables is not defined")
        return self.namedVariables
    
    def get_named_variables_or_default(self, default=None):
        if self.namedVariables is __undefined__:
            return default
        return self.namedVariables
    
    def has_named_variables(self):
        return self.namedVariables is not __undefined__
    
    def set_named_variables(self, named_variables):
        self.namedVariables = named_variables
        return self
    
    def clear_named_variables(self):
        self.namedVariables = __undefined__
        return self
    
    def get_indexed_variables(self):
        if self.indexedVariables is __undefined__:
            raise ValueError("indexedVariables is not defined")
        return self.indexedVariables
    
    def get_indexed_variables_or_default(self, default=None):
        if self.indexedVariables is __undefined__:
            return default
        return self.indexedVariables
    
    def has_indexed_variables(self):
        return self.indexedVariables is not __undefined__
    
    def set_indexed_variables(self, indexed_variables):
        self.indexedVariables = indexed_variables
        return self
    
    def clear_indexed_variables(self):
        self.indexedVariables = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: name
        if "name" not in override:
            self.serialize_scalar(me, "name", self.name)
        # property: value
        if "value" not in override:
            self.serialize_scalar(me, "value", self.value)
        # property: type
        if "type" not in override:
            if self.type is not __undefined__:
                self.serialize_scalar(me, "type", self.type)
        # property: presentationHint
        if "presentationHint" not in override:
            if self.presentationHint is not __undefined__:
                me["presentationHint"] = self.presentationHint.serialize()
        # property: evaluateName
        if "evaluateName" not in override:
            if self.evaluateName is not __undefined__:
                self.serialize_scalar(me, "evaluateName", self.evaluateName)
        # property: variablesReference
        if "variablesReference" not in override:
            self.serialize_scalar(me, "variablesReference", self.variablesReference)
        # property: namedVariables
        if "namedVariables" not in override:
            if self.namedVariables is not __undefined__:
                self.serialize_scalar(me, "namedVariables", self.namedVariables)
        # property: indexedVariables
        if "indexedVariables" not in override:
            if self.indexedVariables is not __undefined__:
                self.serialize_scalar(me, "indexedVariables", self.indexedVariables)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: name
        if "name" not in override:
            used_args.append("name")
            args.append(cls.deserialize_scalar(me["name"]))
        # property: value
        if "value" not in override:
            used_args.append("value")
            args.append(cls.deserialize_scalar(me["value"]))
        # property: type
        if "type" not in override:
            used_args.append("type")
            if me is not None and "type" in me:
                kwargs["type"] = cls.deserialize_scalar(me["type"])
        # property: presentationHint
        if "presentationHint" not in override:
            used_args.append("presentationHint")
            if me is not None and "presentationHint" in me:
                kwargs["presentation_hint"] = cls.deserialize_as(me["presentationHint"], DAPVariablePresentationHint)
        # property: evaluateName
        if "evaluateName" not in override:
            used_args.append("evaluateName")
            if me is not None and "evaluateName" in me:
                kwargs["evaluate_name"] = cls.deserialize_scalar(me["evaluateName"])
        # property: variablesReference
        if "variablesReference" not in override:
            used_args.append("variablesReference")
            args.append(cls.deserialize_scalar(me["variablesReference"]))
        # property: namedVariables
        if "namedVariables" not in override:
            used_args.append("namedVariables")
            if me is not None and "namedVariables" in me:
                kwargs["named_variables"] = cls.deserialize_scalar(me["namedVariables"])
        # property: indexedVariables
        if "indexedVariables" not in override:
            used_args.append("indexedVariables")
            if me is not None and "indexedVariables" in me:
                kwargs["indexed_variables"] = cls.deserialize_scalar(me["indexedVariables"])


class DAPVariablePresentationHint(DAPObject):
    """
    Optional properties of a variable that can be used to determine how to render the variable in the UI.
    """
    @staticmethod
    def create(kind=__undefined__, attributes=__undefined__, visibility=__undefined__):
        return DAPVariablePresentationHint(kind=kind, attributes=attributes, visibility=visibility)
    
    def __init__(self, kind=__undefined__, attributes=__undefined__, visibility=__undefined__):
        DAPObject.__init__(self)
        self.kind = kind
        self.attributes = attributes
        self.visibility = visibility
    
    def as_current_kwargs(self):
        kwargs = {}
        if self.has_kind():
            kwargs["kind"] = self.get_kind()
        if self.has_attributes():
            kwargs["attributes"] = self.get_attributes()
        if self.has_visibility():
            kwargs["visibility"] = self.get_visibility()
        return kwargs
    
    def get_kind(self):
        if self.kind is __undefined__:
            raise ValueError("kind is not defined")
        return self.kind
    
    def get_kind_or_default(self, default=None):
        if self.kind is __undefined__:
            return default
        return self.kind
    
    def has_kind(self):
        return self.kind is not __undefined__
    
    def set_kind(self, kind):
        self.kind = kind
        return self
    
    def clear_kind(self):
        self.kind = __undefined__
        return self
    
    def get_attributes(self):
        if self.attributes is __undefined__:
            raise ValueError("attributes is not defined")
        return self.attributes
    
    def get_attributes_or_default(self, default=None):
        if self.attributes is __undefined__:
            return default
        return self.attributes
    
    def has_attributes(self):
        return self.attributes is not __undefined__
    
    def set_attributes(self, attributes):
        self.attributes = attributes
        return self
    
    def clear_attributes(self):
        self.attributes = __undefined__
        return self
    
    def get_visibility(self):
        if self.visibility is __undefined__:
            raise ValueError("visibility is not defined")
        return self.visibility
    
    def get_visibility_or_default(self, default=None):
        if self.visibility is __undefined__:
            return default
        return self.visibility
    
    def has_visibility(self):
        return self.visibility is not __undefined__
    
    def set_visibility(self, visibility):
        self.visibility = visibility
        return self
    
    def clear_visibility(self):
        self.visibility = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: kind
        if "kind" not in override:
            if self.kind is not __undefined__:
                self.serialize_scalar(me, "kind", self.kind)
        # property: attributes
        if "attributes" not in override:
            if self.attributes is not __undefined__:
                self.serialize_scalar(me, "attributes", self.attributes)
        # property: visibility
        if "visibility" not in override:
            if self.visibility is not __undefined__:
                self.serialize_scalar(me, "visibility", self.visibility)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: kind
        if "kind" not in override:
            used_args.append("kind")
            if me is not None and "kind" in me:
                kwargs["kind"] = cls.deserialize_scalar(me["kind"])
        # property: attributes
        if "attributes" not in override:
            used_args.append("attributes")
            if me is not None and "attributes" in me:
                kwargs["attributes"] = cls.deserialize_scalar(me["attributes"])
        # property: visibility
        if "visibility" not in override:
            used_args.append("visibility")
            if me is not None and "visibility" in me:
                kwargs["visibility"] = cls.deserialize_scalar(me["visibility"])


class DAPSourceBreakpoint(DAPObject):
    """
    Properties of a breakpoint or logpoint passed to the setBreakpoints request.
    """
    @staticmethod
    def create(line, column=__undefined__, condition=__undefined__, hit_condition=__undefined__, log_message=__undefined__):
        return DAPSourceBreakpoint(line, column=column, condition=condition, hit_condition=hit_condition, log_message=log_message)
    
    def __init__(self, line, column=__undefined__, condition=__undefined__, hit_condition=__undefined__, log_message=__undefined__):
        DAPObject.__init__(self)
        self.line = line
        self.column = column
        self.condition = condition
        self.hitCondition = hit_condition
        self.logMessage = log_message
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["line"] = self.get_line()
        if self.has_column():
            kwargs["column"] = self.get_column()
        if self.has_condition():
            kwargs["condition"] = self.get_condition()
        if self.has_hit_condition():
            kwargs["hitCondition"] = self.get_hit_condition()
        if self.has_log_message():
            kwargs["logMessage"] = self.get_log_message()
        return kwargs
    
    def get_line(self):
        return self.line
    
    def set_line(self, line):
        self.line = line
        return self
    
    def get_column(self):
        if self.column is __undefined__:
            raise ValueError("column is not defined")
        return self.column
    
    def get_column_or_default(self, default=None):
        if self.column is __undefined__:
            return default
        return self.column
    
    def has_column(self):
        return self.column is not __undefined__
    
    def set_column(self, column):
        self.column = column
        return self
    
    def clear_column(self):
        self.column = __undefined__
        return self
    
    def get_condition(self):
        if self.condition is __undefined__:
            raise ValueError("condition is not defined")
        return self.condition
    
    def get_condition_or_default(self, default=None):
        if self.condition is __undefined__:
            return default
        return self.condition
    
    def has_condition(self):
        return self.condition is not __undefined__
    
    def set_condition(self, condition):
        self.condition = condition
        return self
    
    def clear_condition(self):
        self.condition = __undefined__
        return self
    
    def get_hit_condition(self):
        if self.hitCondition is __undefined__:
            raise ValueError("hitCondition is not defined")
        return self.hitCondition
    
    def get_hit_condition_or_default(self, default=None):
        if self.hitCondition is __undefined__:
            return default
        return self.hitCondition
    
    def has_hit_condition(self):
        return self.hitCondition is not __undefined__
    
    def set_hit_condition(self, hit_condition):
        self.hitCondition = hit_condition
        return self
    
    def clear_hit_condition(self):
        self.hitCondition = __undefined__
        return self
    
    def get_log_message(self):
        if self.logMessage is __undefined__:
            raise ValueError("logMessage is not defined")
        return self.logMessage
    
    def get_log_message_or_default(self, default=None):
        if self.logMessage is __undefined__:
            return default
        return self.logMessage
    
    def has_log_message(self):
        return self.logMessage is not __undefined__
    
    def set_log_message(self, log_message):
        self.logMessage = log_message
        return self
    
    def clear_log_message(self):
        self.logMessage = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: line
        if "line" not in override:
            self.serialize_scalar(me, "line", self.line)
        # property: column
        if "column" not in override:
            if self.column is not __undefined__:
                self.serialize_scalar(me, "column", self.column)
        # property: condition
        if "condition" not in override:
            if self.condition is not __undefined__:
                self.serialize_scalar(me, "condition", self.condition)
        # property: hitCondition
        if "hitCondition" not in override:
            if self.hitCondition is not __undefined__:
                self.serialize_scalar(me, "hitCondition", self.hitCondition)
        # property: logMessage
        if "logMessage" not in override:
            if self.logMessage is not __undefined__:
                self.serialize_scalar(me, "logMessage", self.logMessage)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: line
        if "line" not in override:
            used_args.append("line")
            args.append(cls.deserialize_scalar(me["line"]))
        # property: column
        if "column" not in override:
            used_args.append("column")
            if me is not None and "column" in me:
                kwargs["column"] = cls.deserialize_scalar(me["column"])
        # property: condition
        if "condition" not in override:
            used_args.append("condition")
            if me is not None and "condition" in me:
                kwargs["condition"] = cls.deserialize_scalar(me["condition"])
        # property: hitCondition
        if "hitCondition" not in override:
            used_args.append("hitCondition")
            if me is not None and "hitCondition" in me:
                kwargs["hit_condition"] = cls.deserialize_scalar(me["hitCondition"])
        # property: logMessage
        if "logMessage" not in override:
            used_args.append("logMessage")
            if me is not None and "logMessage" in me:
                kwargs["log_message"] = cls.deserialize_scalar(me["logMessage"])


class DAPFunctionBreakpoint(DAPObject):
    """
    Properties of a breakpoint passed to the setFunctionBreakpoints request.
    """
    @staticmethod
    def create(name, condition=__undefined__, hit_condition=__undefined__):
        return DAPFunctionBreakpoint(name, condition=condition, hit_condition=hit_condition)
    
    def __init__(self, name, condition=__undefined__, hit_condition=__undefined__):
        DAPObject.__init__(self)
        self.name = name
        self.condition = condition
        self.hitCondition = hit_condition
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["name"] = self.get_name()
        if self.has_condition():
            kwargs["condition"] = self.get_condition()
        if self.has_hit_condition():
            kwargs["hitCondition"] = self.get_hit_condition()
        return kwargs
    
    def get_name(self):
        return self.name
    
    def set_name(self, name):
        self.name = name
        return self
    
    def get_condition(self):
        if self.condition is __undefined__:
            raise ValueError("condition is not defined")
        return self.condition
    
    def get_condition_or_default(self, default=None):
        if self.condition is __undefined__:
            return default
        return self.condition
    
    def has_condition(self):
        return self.condition is not __undefined__
    
    def set_condition(self, condition):
        self.condition = condition
        return self
    
    def clear_condition(self):
        self.condition = __undefined__
        return self
    
    def get_hit_condition(self):
        if self.hitCondition is __undefined__:
            raise ValueError("hitCondition is not defined")
        return self.hitCondition
    
    def get_hit_condition_or_default(self, default=None):
        if self.hitCondition is __undefined__:
            return default
        return self.hitCondition
    
    def has_hit_condition(self):
        return self.hitCondition is not __undefined__
    
    def set_hit_condition(self, hit_condition):
        self.hitCondition = hit_condition
        return self
    
    def clear_hit_condition(self):
        self.hitCondition = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: name
        if "name" not in override:
            self.serialize_scalar(me, "name", self.name)
        # property: condition
        if "condition" not in override:
            if self.condition is not __undefined__:
                self.serialize_scalar(me, "condition", self.condition)
        # property: hitCondition
        if "hitCondition" not in override:
            if self.hitCondition is not __undefined__:
                self.serialize_scalar(me, "hitCondition", self.hitCondition)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: name
        if "name" not in override:
            used_args.append("name")
            args.append(cls.deserialize_scalar(me["name"]))
        # property: condition
        if "condition" not in override:
            used_args.append("condition")
            if me is not None and "condition" in me:
                kwargs["condition"] = cls.deserialize_scalar(me["condition"])
        # property: hitCondition
        if "hitCondition" not in override:
            used_args.append("hitCondition")
            if me is not None and "hitCondition" in me:
                kwargs["hit_condition"] = cls.deserialize_scalar(me["hitCondition"])


class DAPDataBreakpointAccessType(DAPObject):
    """
    This enumeration defines all possible access types for data breakpoints.
    """
    @staticmethod
    def create():
        return DAPDataBreakpointAccessType()
    
    def __init__(self):
        DAPObject.__init__(self)
    
    def as_current_kwargs(self):
        kwargs = {}
        return kwargs
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        


class DAPDataBreakpoint(DAPObject):
    """
    Properties of a data breakpoint passed to the setDataBreakpoints request.
    """
    @staticmethod
    def create(data_id, access_type=__undefined__, condition=__undefined__, hit_condition=__undefined__):
        return DAPDataBreakpoint(data_id, access_type=access_type, condition=condition, hit_condition=hit_condition)
    
    def __init__(self, data_id, access_type=__undefined__, condition=__undefined__, hit_condition=__undefined__):
        DAPObject.__init__(self)
        self.dataId = data_id
        self.accessType = access_type
        self.condition = condition
        self.hitCondition = hit_condition
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["dataId"] = self.get_data_id()
        if self.has_access_type():
            kwargs["accessType"] = self.get_access_type()
        if self.has_condition():
            kwargs["condition"] = self.get_condition()
        if self.has_hit_condition():
            kwargs["hitCondition"] = self.get_hit_condition()
        return kwargs
    
    def get_data_id(self):
        return self.dataId
    
    def set_data_id(self, data_id):
        self.dataId = data_id
        return self
    
    def get_access_type(self):
        if self.accessType is __undefined__:
            raise ValueError("accessType is not defined")
        return self.accessType
    
    def get_access_type_or_default(self, default=None):
        if self.accessType is __undefined__:
            return default
        return self.accessType
    
    def has_access_type(self):
        return self.accessType is not __undefined__
    
    def set_access_type(self, access_type):
        self.accessType = access_type
        return self
    
    def clear_access_type(self):
        self.accessType = __undefined__
        return self
    
    def get_condition(self):
        if self.condition is __undefined__:
            raise ValueError("condition is not defined")
        return self.condition
    
    def get_condition_or_default(self, default=None):
        if self.condition is __undefined__:
            return default
        return self.condition
    
    def has_condition(self):
        return self.condition is not __undefined__
    
    def set_condition(self, condition):
        self.condition = condition
        return self
    
    def clear_condition(self):
        self.condition = __undefined__
        return self
    
    def get_hit_condition(self):
        if self.hitCondition is __undefined__:
            raise ValueError("hitCondition is not defined")
        return self.hitCondition
    
    def get_hit_condition_or_default(self, default=None):
        if self.hitCondition is __undefined__:
            return default
        return self.hitCondition
    
    def has_hit_condition(self):
        return self.hitCondition is not __undefined__
    
    def set_hit_condition(self, hit_condition):
        self.hitCondition = hit_condition
        return self
    
    def clear_hit_condition(self):
        self.hitCondition = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: dataId
        if "dataId" not in override:
            self.serialize_scalar(me, "dataId", self.dataId)
        # property: accessType
        if "accessType" not in override:
            if self.accessType is not __undefined__:
                me["accessType"] = self.accessType.serialize()
        # property: condition
        if "condition" not in override:
            if self.condition is not __undefined__:
                self.serialize_scalar(me, "condition", self.condition)
        # property: hitCondition
        if "hitCondition" not in override:
            if self.hitCondition is not __undefined__:
                self.serialize_scalar(me, "hitCondition", self.hitCondition)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: dataId
        if "dataId" not in override:
            used_args.append("dataId")
            args.append(cls.deserialize_scalar(me["dataId"]))
        # property: accessType
        if "accessType" not in override:
            used_args.append("accessType")
            if me is not None and "accessType" in me:
                kwargs["access_type"] = cls.deserialize_as(me["accessType"], DAPDataBreakpointAccessType)
        # property: condition
        if "condition" not in override:
            used_args.append("condition")
            if me is not None and "condition" in me:
                kwargs["condition"] = cls.deserialize_scalar(me["condition"])
        # property: hitCondition
        if "hitCondition" not in override:
            used_args.append("hitCondition")
            if me is not None and "hitCondition" in me:
                kwargs["hit_condition"] = cls.deserialize_scalar(me["hitCondition"])


class DAPBreakpoint(DAPObject):
    """
    Information about a Breakpoint created in setBreakpoints or setFunctionBreakpoints.
    """
    @staticmethod
    def create(verified, id=__undefined__, message=__undefined__, source=__undefined__, line=__undefined__, column=__undefined__, end_line=__undefined__, end_column=__undefined__):
        return DAPBreakpoint(verified, id=id, message=message, source=source, line=line, column=column, end_line=end_line, end_column=end_column)
    
    def __init__(self, verified, id=__undefined__, message=__undefined__, source=__undefined__, line=__undefined__, column=__undefined__, end_line=__undefined__, end_column=__undefined__):
        DAPObject.__init__(self)
        self.id = id
        self.verified = verified
        self.message = message
        self.source = source
        self.line = line
        self.column = column
        self.endLine = end_line
        self.endColumn = end_column
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["verified"] = self.get_verified()
        if self.has_id():
            kwargs["id"] = self.get_id()
        if self.has_message():
            kwargs["message"] = self.get_message()
        if self.has_source():
            kwargs["source"] = self.get_source()
        if self.has_line():
            kwargs["line"] = self.get_line()
        if self.has_column():
            kwargs["column"] = self.get_column()
        if self.has_end_line():
            kwargs["endLine"] = self.get_end_line()
        if self.has_end_column():
            kwargs["endColumn"] = self.get_end_column()
        return kwargs
    
    def get_id(self):
        if self.id is __undefined__:
            raise ValueError("id is not defined")
        return self.id
    
    def get_id_or_default(self, default=None):
        if self.id is __undefined__:
            return default
        return self.id
    
    def has_id(self):
        return self.id is not __undefined__
    
    def set_id(self, id):
        self.id = id
        return self
    
    def clear_id(self):
        self.id = __undefined__
        return self
    
    def get_verified(self):
        return self.verified
    
    def set_verified(self, verified):
        self.verified = verified
        return self
    
    def get_message(self):
        if self.message is __undefined__:
            raise ValueError("message is not defined")
        return self.message
    
    def get_message_or_default(self, default=None):
        if self.message is __undefined__:
            return default
        return self.message
    
    def has_message(self):
        return self.message is not __undefined__
    
    def set_message(self, message):
        self.message = message
        return self
    
    def clear_message(self):
        self.message = __undefined__
        return self
    
    def get_source(self):
        if self.source is __undefined__:
            raise ValueError("source is not defined")
        return self.source
    
    def get_source_or_default(self, default=None):
        if self.source is __undefined__:
            return default
        return self.source
    
    def has_source(self):
        return self.source is not __undefined__
    
    def set_source(self, source):
        self.source = source
        return self
    
    def clear_source(self):
        self.source = __undefined__
        return self
    
    def get_line(self):
        if self.line is __undefined__:
            raise ValueError("line is not defined")
        return self.line
    
    def get_line_or_default(self, default=None):
        if self.line is __undefined__:
            return default
        return self.line
    
    def has_line(self):
        return self.line is not __undefined__
    
    def set_line(self, line):
        self.line = line
        return self
    
    def clear_line(self):
        self.line = __undefined__
        return self
    
    def get_column(self):
        if self.column is __undefined__:
            raise ValueError("column is not defined")
        return self.column
    
    def get_column_or_default(self, default=None):
        if self.column is __undefined__:
            return default
        return self.column
    
    def has_column(self):
        return self.column is not __undefined__
    
    def set_column(self, column):
        self.column = column
        return self
    
    def clear_column(self):
        self.column = __undefined__
        return self
    
    def get_end_line(self):
        if self.endLine is __undefined__:
            raise ValueError("endLine is not defined")
        return self.endLine
    
    def get_end_line_or_default(self, default=None):
        if self.endLine is __undefined__:
            return default
        return self.endLine
    
    def has_end_line(self):
        return self.endLine is not __undefined__
    
    def set_end_line(self, end_line):
        self.endLine = end_line
        return self
    
    def clear_end_line(self):
        self.endLine = __undefined__
        return self
    
    def get_end_column(self):
        if self.endColumn is __undefined__:
            raise ValueError("endColumn is not defined")
        return self.endColumn
    
    def get_end_column_or_default(self, default=None):
        if self.endColumn is __undefined__:
            return default
        return self.endColumn
    
    def has_end_column(self):
        return self.endColumn is not __undefined__
    
    def set_end_column(self, end_column):
        self.endColumn = end_column
        return self
    
    def clear_end_column(self):
        self.endColumn = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: id
        if "id" not in override:
            if self.id is not __undefined__:
                self.serialize_scalar(me, "id", self.id)
        # property: verified
        if "verified" not in override:
            self.serialize_scalar(me, "verified", self.verified)
        # property: message
        if "message" not in override:
            if self.message is not __undefined__:
                self.serialize_scalar(me, "message", self.message)
        # property: source
        if "source" not in override:
            if self.source is not __undefined__:
                me["source"] = self.source.serialize()
        # property: line
        if "line" not in override:
            if self.line is not __undefined__:
                self.serialize_scalar(me, "line", self.line)
        # property: column
        if "column" not in override:
            if self.column is not __undefined__:
                self.serialize_scalar(me, "column", self.column)
        # property: endLine
        if "endLine" not in override:
            if self.endLine is not __undefined__:
                self.serialize_scalar(me, "endLine", self.endLine)
        # property: endColumn
        if "endColumn" not in override:
            if self.endColumn is not __undefined__:
                self.serialize_scalar(me, "endColumn", self.endColumn)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: id
        if "id" not in override:
            used_args.append("id")
            if me is not None and "id" in me:
                kwargs["id"] = cls.deserialize_scalar(me["id"])
        # property: verified
        if "verified" not in override:
            used_args.append("verified")
            args.append(cls.deserialize_scalar(me["verified"]))
        # property: message
        if "message" not in override:
            used_args.append("message")
            if me is not None and "message" in me:
                kwargs["message"] = cls.deserialize_scalar(me["message"])
        # property: source
        if "source" not in override:
            used_args.append("source")
            if me is not None and "source" in me:
                kwargs["source"] = cls.deserialize_as(me["source"], DAPSource)
        # property: line
        if "line" not in override:
            used_args.append("line")
            if me is not None and "line" in me:
                kwargs["line"] = cls.deserialize_scalar(me["line"])
        # property: column
        if "column" not in override:
            used_args.append("column")
            if me is not None and "column" in me:
                kwargs["column"] = cls.deserialize_scalar(me["column"])
        # property: endLine
        if "endLine" not in override:
            used_args.append("endLine")
            if me is not None and "endLine" in me:
                kwargs["end_line"] = cls.deserialize_scalar(me["endLine"])
        # property: endColumn
        if "endColumn" not in override:
            used_args.append("endColumn")
            if me is not None and "endColumn" in me:
                kwargs["end_column"] = cls.deserialize_scalar(me["endColumn"])


class DAPStepInTarget(DAPObject):
    """
    A StepInTarget can be used in the 'stepIn' request and determines into which single target the stepIn request should step.
    """
    @staticmethod
    def create(id, label):
        return DAPStepInTarget(id, label)
    
    def __init__(self, id, label):
        DAPObject.__init__(self)
        self.id = id
        self.label = label
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["id"] = self.get_id()
        kwargs["label"] = self.get_label()
        return kwargs
    
    def get_id(self):
        return self.id
    
    def set_id(self, id):
        self.id = id
        return self
    
    def get_label(self):
        return self.label
    
    def set_label(self, label):
        self.label = label
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: id
        if "id" not in override:
            self.serialize_scalar(me, "id", self.id)
        # property: label
        if "label" not in override:
            self.serialize_scalar(me, "label", self.label)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: id
        if "id" not in override:
            used_args.append("id")
            args.append(cls.deserialize_scalar(me["id"]))
        # property: label
        if "label" not in override:
            used_args.append("label")
            args.append(cls.deserialize_scalar(me["label"]))


class DAPGotoTarget(DAPObject):
    """
    A GotoTarget describes a code location that can be used as a target in the 'goto' request.
The possible goto targets can be determined via the 'gotoTargets' request.
    """
    @staticmethod
    def create(id, label, line, column=__undefined__, end_line=__undefined__, end_column=__undefined__):
        return DAPGotoTarget(id, label, line, column=column, end_line=end_line, end_column=end_column)
    
    def __init__(self, id, label, line, column=__undefined__, end_line=__undefined__, end_column=__undefined__):
        DAPObject.__init__(self)
        self.id = id
        self.label = label
        self.line = line
        self.column = column
        self.endLine = end_line
        self.endColumn = end_column
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["id"] = self.get_id()
        kwargs["label"] = self.get_label()
        kwargs["line"] = self.get_line()
        if self.has_column():
            kwargs["column"] = self.get_column()
        if self.has_end_line():
            kwargs["endLine"] = self.get_end_line()
        if self.has_end_column():
            kwargs["endColumn"] = self.get_end_column()
        return kwargs
    
    def get_id(self):
        return self.id
    
    def set_id(self, id):
        self.id = id
        return self
    
    def get_label(self):
        return self.label
    
    def set_label(self, label):
        self.label = label
        return self
    
    def get_line(self):
        return self.line
    
    def set_line(self, line):
        self.line = line
        return self
    
    def get_column(self):
        if self.column is __undefined__:
            raise ValueError("column is not defined")
        return self.column
    
    def get_column_or_default(self, default=None):
        if self.column is __undefined__:
            return default
        return self.column
    
    def has_column(self):
        return self.column is not __undefined__
    
    def set_column(self, column):
        self.column = column
        return self
    
    def clear_column(self):
        self.column = __undefined__
        return self
    
    def get_end_line(self):
        if self.endLine is __undefined__:
            raise ValueError("endLine is not defined")
        return self.endLine
    
    def get_end_line_or_default(self, default=None):
        if self.endLine is __undefined__:
            return default
        return self.endLine
    
    def has_end_line(self):
        return self.endLine is not __undefined__
    
    def set_end_line(self, end_line):
        self.endLine = end_line
        return self
    
    def clear_end_line(self):
        self.endLine = __undefined__
        return self
    
    def get_end_column(self):
        if self.endColumn is __undefined__:
            raise ValueError("endColumn is not defined")
        return self.endColumn
    
    def get_end_column_or_default(self, default=None):
        if self.endColumn is __undefined__:
            return default
        return self.endColumn
    
    def has_end_column(self):
        return self.endColumn is not __undefined__
    
    def set_end_column(self, end_column):
        self.endColumn = end_column
        return self
    
    def clear_end_column(self):
        self.endColumn = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: id
        if "id" not in override:
            self.serialize_scalar(me, "id", self.id)
        # property: label
        if "label" not in override:
            self.serialize_scalar(me, "label", self.label)
        # property: line
        if "line" not in override:
            self.serialize_scalar(me, "line", self.line)
        # property: column
        if "column" not in override:
            if self.column is not __undefined__:
                self.serialize_scalar(me, "column", self.column)
        # property: endLine
        if "endLine" not in override:
            if self.endLine is not __undefined__:
                self.serialize_scalar(me, "endLine", self.endLine)
        # property: endColumn
        if "endColumn" not in override:
            if self.endColumn is not __undefined__:
                self.serialize_scalar(me, "endColumn", self.endColumn)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: id
        if "id" not in override:
            used_args.append("id")
            args.append(cls.deserialize_scalar(me["id"]))
        # property: label
        if "label" not in override:
            used_args.append("label")
            args.append(cls.deserialize_scalar(me["label"]))
        # property: line
        if "line" not in override:
            used_args.append("line")
            args.append(cls.deserialize_scalar(me["line"]))
        # property: column
        if "column" not in override:
            used_args.append("column")
            if me is not None and "column" in me:
                kwargs["column"] = cls.deserialize_scalar(me["column"])
        # property: endLine
        if "endLine" not in override:
            used_args.append("endLine")
            if me is not None and "endLine" in me:
                kwargs["end_line"] = cls.deserialize_scalar(me["endLine"])
        # property: endColumn
        if "endColumn" not in override:
            used_args.append("endColumn")
            if me is not None and "endColumn" in me:
                kwargs["end_column"] = cls.deserialize_scalar(me["endColumn"])


class DAPCompletionItem(DAPObject):
    """
    CompletionItems are the suggestions returned from the CompletionsRequest.
    """
    @staticmethod
    def create(label, text=__undefined__, type=__undefined__, start=__undefined__, length=__undefined__):
        return DAPCompletionItem(label, text=text, type=type, start=start, length=length)
    
    def __init__(self, label, text=__undefined__, type=__undefined__, start=__undefined__, length=__undefined__):
        DAPObject.__init__(self)
        self.label = label
        self.text = text
        self.type = type
        self.start = start
        self.length = length
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["label"] = self.get_label()
        if self.has_text():
            kwargs["text"] = self.get_text()
        if self.has_type():
            kwargs["type"] = self.get_type()
        if self.has_start():
            kwargs["start"] = self.get_start()
        if self.has_length():
            kwargs["length"] = self.get_length()
        return kwargs
    
    def get_label(self):
        return self.label
    
    def set_label(self, label):
        self.label = label
        return self
    
    def get_text(self):
        if self.text is __undefined__:
            raise ValueError("text is not defined")
        return self.text
    
    def get_text_or_default(self, default=None):
        if self.text is __undefined__:
            return default
        return self.text
    
    def has_text(self):
        return self.text is not __undefined__
    
    def set_text(self, text):
        self.text = text
        return self
    
    def clear_text(self):
        self.text = __undefined__
        return self
    
    def get_type(self):
        if self.type is __undefined__:
            raise ValueError("type is not defined")
        return self.type
    
    def get_type_or_default(self, default=None):
        if self.type is __undefined__:
            return default
        return self.type
    
    def has_type(self):
        return self.type is not __undefined__
    
    def set_type(self, type):
        self.type = type
        return self
    
    def clear_type(self):
        self.type = __undefined__
        return self
    
    def get_start(self):
        if self.start is __undefined__:
            raise ValueError("start is not defined")
        return self.start
    
    def get_start_or_default(self, default=None):
        if self.start is __undefined__:
            return default
        return self.start
    
    def has_start(self):
        return self.start is not __undefined__
    
    def set_start(self, start):
        self.start = start
        return self
    
    def clear_start(self):
        self.start = __undefined__
        return self
    
    def get_length(self):
        if self.length is __undefined__:
            raise ValueError("length is not defined")
        return self.length
    
    def get_length_or_default(self, default=None):
        if self.length is __undefined__:
            return default
        return self.length
    
    def has_length(self):
        return self.length is not __undefined__
    
    def set_length(self, length):
        self.length = length
        return self
    
    def clear_length(self):
        self.length = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: label
        if "label" not in override:
            self.serialize_scalar(me, "label", self.label)
        # property: text
        if "text" not in override:
            if self.text is not __undefined__:
                self.serialize_scalar(me, "text", self.text)
        # property: type
        if "type" not in override:
            if self.type is not __undefined__:
                me["type"] = self.type.serialize()
        # property: start
        if "start" not in override:
            if self.start is not __undefined__:
                self.serialize_scalar(me, "start", self.start)
        # property: length
        if "length" not in override:
            if self.length is not __undefined__:
                self.serialize_scalar(me, "length", self.length)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: label
        if "label" not in override:
            used_args.append("label")
            args.append(cls.deserialize_scalar(me["label"]))
        # property: text
        if "text" not in override:
            used_args.append("text")
            if me is not None and "text" in me:
                kwargs["text"] = cls.deserialize_scalar(me["text"])
        # property: type
        if "type" not in override:
            used_args.append("type")
            if me is not None and "type" in me:
                kwargs["type"] = cls.deserialize_as(me["type"], DAPCompletionItemType)
        # property: start
        if "start" not in override:
            used_args.append("start")
            if me is not None and "start" in me:
                kwargs["start"] = cls.deserialize_scalar(me["start"])
        # property: length
        if "length" not in override:
            used_args.append("length")
            if me is not None and "length" in me:
                kwargs["length"] = cls.deserialize_scalar(me["length"])


class DAPCompletionItemType(DAPObject):
    """
    Some predefined types for the CompletionItem. Please note that not all clients have specific icons for all of them.
    """
    @staticmethod
    def create():
        return DAPCompletionItemType()
    
    def __init__(self):
        DAPObject.__init__(self)
    
    def as_current_kwargs(self):
        kwargs = {}
        return kwargs
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        


class DAPChecksumAlgorithm(DAPObject):
    """
    Names of checksum algorithms that may be supported by a debug adapter.
    """
    @staticmethod
    def create():
        return DAPChecksumAlgorithm()
    
    def __init__(self):
        DAPObject.__init__(self)
    
    def as_current_kwargs(self):
        kwargs = {}
        return kwargs
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        


class DAPChecksum(DAPObject):
    """
    The checksum of an item calculated by the specified algorithm.
    """
    @staticmethod
    def create(algorithm, checksum):
        return DAPChecksum(algorithm, checksum)
    
    def __init__(self, algorithm, checksum):
        DAPObject.__init__(self)
        self.algorithm = algorithm
        self.checksum = checksum
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["algorithm"] = self.get_algorithm()
        kwargs["checksum"] = self.get_checksum()
        return kwargs
    
    def get_algorithm(self):
        return self.algorithm
    
    def set_algorithm(self, algorithm):
        self.algorithm = algorithm
        return self
    
    def get_checksum(self):
        return self.checksum
    
    def set_checksum(self, checksum):
        self.checksum = checksum
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: algorithm
        if "algorithm" not in override:
            me["algorithm"] = self.algorithm.serialize()
        # property: checksum
        if "checksum" not in override:
            self.serialize_scalar(me, "checksum", self.checksum)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: algorithm
        if "algorithm" not in override:
            used_args.append("algorithm")
            args.append(cls.deserialize_as(me["algorithm"], DAPChecksumAlgorithm))
        # property: checksum
        if "checksum" not in override:
            used_args.append("checksum")
            args.append(cls.deserialize_scalar(me["checksum"]))


class DAPValueFormat(DAPObject):
    """
    Provides formatting information for a value.
    """
    @staticmethod
    def create(hex=__undefined__):
        return DAPValueFormat(hex=hex)
    
    def __init__(self, hex=__undefined__):
        DAPObject.__init__(self)
        self.hex = hex
    
    def as_current_kwargs(self):
        kwargs = {}
        if self.has_hex():
            kwargs["hex"] = self.get_hex()
        return kwargs
    
    def get_hex(self):
        if self.hex is __undefined__:
            raise ValueError("hex is not defined")
        return self.hex
    
    def get_hex_or_default(self, default=None):
        if self.hex is __undefined__:
            return default
        return self.hex
    
    def has_hex(self):
        return self.hex is not __undefined__
    
    def set_hex(self, hex):
        self.hex = hex
        return self
    
    def clear_hex(self):
        self.hex = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: hex
        if "hex" not in override:
            if self.hex is not __undefined__:
                self.serialize_scalar(me, "hex", self.hex)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: hex
        if "hex" not in override:
            used_args.append("hex")
            if me is not None and "hex" in me:
                kwargs["hex"] = cls.deserialize_scalar(me["hex"])


class DAPStackFrameFormat(DAPValueFormat):
    """
    
    """
    @staticmethod
    def create(hex=__undefined__, parameters=__undefined__, parameter_types=__undefined__, parameter_names=__undefined__, parameter_values=__undefined__, line=__undefined__, module=__undefined__, include_all=__undefined__):
        return DAPStackFrameFormat(hex=hex, parameters=parameters, parameter_types=parameter_types, parameter_names=parameter_names, parameter_values=parameter_values, line=line, module=module, include_all=include_all)
    
    def __init__(self, hex=__undefined__, parameters=__undefined__, parameter_types=__undefined__, parameter_names=__undefined__, parameter_values=__undefined__, line=__undefined__, module=__undefined__, include_all=__undefined__):
        DAPValueFormat.__init__(self, hex)
        self.parameters = parameters
        self.parameterTypes = parameter_types
        self.parameterNames = parameter_names
        self.parameterValues = parameter_values
        self.line = line
        self.module = module
        self.includeAll = include_all
    
    def as_current_kwargs(self):
        kwargs = {}
        if self.has_parameters():
            kwargs["parameters"] = self.get_parameters()
        if self.has_parameter_types():
            kwargs["parameterTypes"] = self.get_parameter_types()
        if self.has_parameter_names():
            kwargs["parameterNames"] = self.get_parameter_names()
        if self.has_parameter_values():
            kwargs["parameterValues"] = self.get_parameter_values()
        if self.has_line():
            kwargs["line"] = self.get_line()
        if self.has_module():
            kwargs["module"] = self.get_module()
        if self.has_include_all():
            kwargs["includeAll"] = self.get_include_all()
        return kwargs
    
    def get_parameters(self):
        if self.parameters is __undefined__:
            raise ValueError("parameters is not defined")
        return self.parameters
    
    def get_parameters_or_default(self, default=None):
        if self.parameters is __undefined__:
            return default
        return self.parameters
    
    def has_parameters(self):
        return self.parameters is not __undefined__
    
    def set_parameters(self, parameters):
        self.parameters = parameters
        return self
    
    def clear_parameters(self):
        self.parameters = __undefined__
        return self
    
    def get_parameter_types(self):
        if self.parameterTypes is __undefined__:
            raise ValueError("parameterTypes is not defined")
        return self.parameterTypes
    
    def get_parameter_types_or_default(self, default=None):
        if self.parameterTypes is __undefined__:
            return default
        return self.parameterTypes
    
    def has_parameter_types(self):
        return self.parameterTypes is not __undefined__
    
    def set_parameter_types(self, parameter_types):
        self.parameterTypes = parameter_types
        return self
    
    def clear_parameter_types(self):
        self.parameterTypes = __undefined__
        return self
    
    def get_parameter_names(self):
        if self.parameterNames is __undefined__:
            raise ValueError("parameterNames is not defined")
        return self.parameterNames
    
    def get_parameter_names_or_default(self, default=None):
        if self.parameterNames is __undefined__:
            return default
        return self.parameterNames
    
    def has_parameter_names(self):
        return self.parameterNames is not __undefined__
    
    def set_parameter_names(self, parameter_names):
        self.parameterNames = parameter_names
        return self
    
    def clear_parameter_names(self):
        self.parameterNames = __undefined__
        return self
    
    def get_parameter_values(self):
        if self.parameterValues is __undefined__:
            raise ValueError("parameterValues is not defined")
        return self.parameterValues
    
    def get_parameter_values_or_default(self, default=None):
        if self.parameterValues is __undefined__:
            return default
        return self.parameterValues
    
    def has_parameter_values(self):
        return self.parameterValues is not __undefined__
    
    def set_parameter_values(self, parameter_values):
        self.parameterValues = parameter_values
        return self
    
    def clear_parameter_values(self):
        self.parameterValues = __undefined__
        return self
    
    def get_line(self):
        if self.line is __undefined__:
            raise ValueError("line is not defined")
        return self.line
    
    def get_line_or_default(self, default=None):
        if self.line is __undefined__:
            return default
        return self.line
    
    def has_line(self):
        return self.line is not __undefined__
    
    def set_line(self, line):
        self.line = line
        return self
    
    def clear_line(self):
        self.line = __undefined__
        return self
    
    def get_module(self):
        if self.module is __undefined__:
            raise ValueError("module is not defined")
        return self.module
    
    def get_module_or_default(self, default=None):
        if self.module is __undefined__:
            return default
        return self.module
    
    def has_module(self):
        return self.module is not __undefined__
    
    def set_module(self, module):
        self.module = module
        return self
    
    def clear_module(self):
        self.module = __undefined__
        return self
    
    def get_include_all(self):
        if self.includeAll is __undefined__:
            raise ValueError("includeAll is not defined")
        return self.includeAll
    
    def get_include_all_or_default(self, default=None):
        if self.includeAll is __undefined__:
            return default
        return self.includeAll
    
    def has_include_all(self):
        return self.includeAll is not __undefined__
    
    def set_include_all(self, include_all):
        self.includeAll = include_all
        return self
    
    def clear_include_all(self):
        self.includeAll = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPValueFormat._serialize(self, me, ['includeAll', 'line', 'module', 'parameterNames', 'parameterTypes', 'parameterValues', 'parameters'])
        
        # property: parameters
        if "parameters" not in override:
            if self.parameters is not __undefined__:
                self.serialize_scalar(me, "parameters", self.parameters)
        # property: parameterTypes
        if "parameterTypes" not in override:
            if self.parameterTypes is not __undefined__:
                self.serialize_scalar(me, "parameterTypes", self.parameterTypes)
        # property: parameterNames
        if "parameterNames" not in override:
            if self.parameterNames is not __undefined__:
                self.serialize_scalar(me, "parameterNames", self.parameterNames)
        # property: parameterValues
        if "parameterValues" not in override:
            if self.parameterValues is not __undefined__:
                self.serialize_scalar(me, "parameterValues", self.parameterValues)
        # property: line
        if "line" not in override:
            if self.line is not __undefined__:
                self.serialize_scalar(me, "line", self.line)
        # property: module
        if "module" not in override:
            if self.module is not __undefined__:
                self.serialize_scalar(me, "module", self.module)
        # property: includeAll
        if "includeAll" not in override:
            if self.includeAll is not __undefined__:
                self.serialize_scalar(me, "includeAll", self.includeAll)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPValueFormat._deserialize(args, kwargs, used_args, me, ['includeAll', 'line', 'module', 'parameterNames', 'parameterTypes', 'parameterValues', 'parameters'])
        
        # property: parameters
        if "parameters" not in override:
            used_args.append("parameters")
            if me is not None and "parameters" in me:
                kwargs["parameters"] = cls.deserialize_scalar(me["parameters"])
        # property: parameterTypes
        if "parameterTypes" not in override:
            used_args.append("parameterTypes")
            if me is not None and "parameterTypes" in me:
                kwargs["parameter_types"] = cls.deserialize_scalar(me["parameterTypes"])
        # property: parameterNames
        if "parameterNames" not in override:
            used_args.append("parameterNames")
            if me is not None and "parameterNames" in me:
                kwargs["parameter_names"] = cls.deserialize_scalar(me["parameterNames"])
        # property: parameterValues
        if "parameterValues" not in override:
            used_args.append("parameterValues")
            if me is not None and "parameterValues" in me:
                kwargs["parameter_values"] = cls.deserialize_scalar(me["parameterValues"])
        # property: line
        if "line" not in override:
            used_args.append("line")
            if me is not None and "line" in me:
                kwargs["line"] = cls.deserialize_scalar(me["line"])
        # property: module
        if "module" not in override:
            used_args.append("module")
            if me is not None and "module" in me:
                kwargs["module"] = cls.deserialize_scalar(me["module"])
        # property: includeAll
        if "includeAll" not in override:
            used_args.append("includeAll")
            if me is not None and "includeAll" in me:
                kwargs["include_all"] = cls.deserialize_scalar(me["includeAll"])


class DAPExceptionOptions(DAPObject):
    """
    An ExceptionOptions assigns configuration options to a set of exceptions.
    """
    @staticmethod
    def create(break_mode, path=__undefined__):
        return DAPExceptionOptions(break_mode, path=path)
    
    def __init__(self, break_mode, path=__undefined__):
        DAPObject.__init__(self)
        self.path = path
        self.breakMode = break_mode
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["breakMode"] = self.get_break_mode()
        if self.has_path():
            kwargs["path"] = self.get_path()
        return kwargs
    
    def get_path(self):
        if self.path is __undefined__:
            raise ValueError("path is not defined")
        return self.path
    
    def get_path_or_default(self, default=None):
        if self.path is __undefined__:
            return default
        return self.path
    
    def has_path(self):
        return self.path is not __undefined__
    
    def set_path(self, path):
        self.path = path
        return self
    
    def clear_path(self):
        self.path = __undefined__
        return self
    
    def get_break_mode(self):
        return self.breakMode
    
    def set_break_mode(self, break_mode):
        self.breakMode = break_mode
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: path
        if "path" not in override:
            if self.path is not __undefined__:
                self.serialize_scalar(me, "path", self.path, hint=DAPExceptionPathSegment)
        # property: breakMode
        if "breakMode" not in override:
            me["breakMode"] = self.breakMode.serialize()
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: path
        if "path" not in override:
            used_args.append("path")
            if me is not None and "path" in me:
                kwargs["path"] = cls.deserialize_scalar(me["path"], hint=DAPExceptionPathSegment)
        # property: breakMode
        if "breakMode" not in override:
            used_args.append("breakMode")
            args.append(cls.deserialize_as(me["breakMode"], DAPExceptionBreakMode))


class DAPExceptionBreakMode(DAPObject):
    """
    This enumeration defines all possible conditions when a thrown exception should result in a break.
never: never breaks,
always: always breaks,
unhandled: breaks when excpetion unhandled,
userUnhandled: breaks if the exception is not handled by user code.
    """
    @staticmethod
    def create():
        return DAPExceptionBreakMode()
    
    def __init__(self):
        DAPObject.__init__(self)
    
    def as_current_kwargs(self):
        kwargs = {}
        return kwargs
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        


class DAPExceptionPathSegment(DAPObject):
    """
    An ExceptionPathSegment represents a segment in a path that is used to match leafs or nodes in a tree of exceptions. If a segment consists of more than one name, it matches the names provided if 'negate' is false or missing or it matches anything except the names provided if 'negate' is true.
    """
    @staticmethod
    def create(names, negate=__undefined__):
        return DAPExceptionPathSegment(names, negate=negate)
    
    def __init__(self, names, negate=__undefined__):
        DAPObject.__init__(self)
        self.negate = negate
        self.names = names
    
    def as_current_kwargs(self):
        kwargs = {}
        kwargs["names"] = self.get_names()
        if self.has_negate():
            kwargs["negate"] = self.get_negate()
        return kwargs
    
    def get_negate(self):
        if self.negate is __undefined__:
            raise ValueError("negate is not defined")
        return self.negate
    
    def get_negate_or_default(self, default=None):
        if self.negate is __undefined__:
            return default
        return self.negate
    
    def has_negate(self):
        return self.negate is not __undefined__
    
    def set_negate(self, negate):
        self.negate = negate
        return self
    
    def clear_negate(self):
        self.negate = __undefined__
        return self
    
    def get_names(self):
        return self.names
    
    def set_names(self, names):
        self.names = names
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: negate
        if "negate" not in override:
            if self.negate is not __undefined__:
                self.serialize_scalar(me, "negate", self.negate)
        # property: names
        if "names" not in override:
            self.serialize_scalar(me, "names", self.names)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: negate
        if "negate" not in override:
            used_args.append("negate")
            if me is not None and "negate" in me:
                kwargs["negate"] = cls.deserialize_scalar(me["negate"])
        # property: names
        if "names" not in override:
            used_args.append("names")
            args.append(cls.deserialize_scalar(me["names"]))


class DAPExceptionDetails(DAPObject):
    """
    Detailed information about an exception that has occurred.
    """
    @staticmethod
    def create(message=__undefined__, type_name=__undefined__, full_type_name=__undefined__, evaluate_name=__undefined__, stack_trace=__undefined__, inner_exception=__undefined__):
        return DAPExceptionDetails(message=message, type_name=type_name, full_type_name=full_type_name, evaluate_name=evaluate_name, stack_trace=stack_trace, inner_exception=inner_exception)
    
    def __init__(self, message=__undefined__, type_name=__undefined__, full_type_name=__undefined__, evaluate_name=__undefined__, stack_trace=__undefined__, inner_exception=__undefined__):
        DAPObject.__init__(self)
        self.message = message
        self.typeName = type_name
        self.fullTypeName = full_type_name
        self.evaluateName = evaluate_name
        self.stackTrace = stack_trace
        self.innerException = inner_exception
    
    def as_current_kwargs(self):
        kwargs = {}
        if self.has_message():
            kwargs["message"] = self.get_message()
        if self.has_type_name():
            kwargs["typeName"] = self.get_type_name()
        if self.has_full_type_name():
            kwargs["fullTypeName"] = self.get_full_type_name()
        if self.has_evaluate_name():
            kwargs["evaluateName"] = self.get_evaluate_name()
        if self.has_stack_trace():
            kwargs["stackTrace"] = self.get_stack_trace()
        if self.has_inner_exception():
            kwargs["innerException"] = self.get_inner_exception()
        return kwargs
    
    def get_message(self):
        if self.message is __undefined__:
            raise ValueError("message is not defined")
        return self.message
    
    def get_message_or_default(self, default=None):
        if self.message is __undefined__:
            return default
        return self.message
    
    def has_message(self):
        return self.message is not __undefined__
    
    def set_message(self, message):
        self.message = message
        return self
    
    def clear_message(self):
        self.message = __undefined__
        return self
    
    def get_type_name(self):
        if self.typeName is __undefined__:
            raise ValueError("typeName is not defined")
        return self.typeName
    
    def get_type_name_or_default(self, default=None):
        if self.typeName is __undefined__:
            return default
        return self.typeName
    
    def has_type_name(self):
        return self.typeName is not __undefined__
    
    def set_type_name(self, type_name):
        self.typeName = type_name
        return self
    
    def clear_type_name(self):
        self.typeName = __undefined__
        return self
    
    def get_full_type_name(self):
        if self.fullTypeName is __undefined__:
            raise ValueError("fullTypeName is not defined")
        return self.fullTypeName
    
    def get_full_type_name_or_default(self, default=None):
        if self.fullTypeName is __undefined__:
            return default
        return self.fullTypeName
    
    def has_full_type_name(self):
        return self.fullTypeName is not __undefined__
    
    def set_full_type_name(self, full_type_name):
        self.fullTypeName = full_type_name
        return self
    
    def clear_full_type_name(self):
        self.fullTypeName = __undefined__
        return self
    
    def get_evaluate_name(self):
        if self.evaluateName is __undefined__:
            raise ValueError("evaluateName is not defined")
        return self.evaluateName
    
    def get_evaluate_name_or_default(self, default=None):
        if self.evaluateName is __undefined__:
            return default
        return self.evaluateName
    
    def has_evaluate_name(self):
        return self.evaluateName is not __undefined__
    
    def set_evaluate_name(self, evaluate_name):
        self.evaluateName = evaluate_name
        return self
    
    def clear_evaluate_name(self):
        self.evaluateName = __undefined__
        return self
    
    def get_stack_trace(self):
        if self.stackTrace is __undefined__:
            raise ValueError("stackTrace is not defined")
        return self.stackTrace
    
    def get_stack_trace_or_default(self, default=None):
        if self.stackTrace is __undefined__:
            return default
        return self.stackTrace
    
    def has_stack_trace(self):
        return self.stackTrace is not __undefined__
    
    def set_stack_trace(self, stack_trace):
        self.stackTrace = stack_trace
        return self
    
    def clear_stack_trace(self):
        self.stackTrace = __undefined__
        return self
    
    def get_inner_exception(self):
        if self.innerException is __undefined__:
            raise ValueError("innerException is not defined")
        return self.innerException
    
    def get_inner_exception_or_default(self, default=None):
        if self.innerException is __undefined__:
            return default
        return self.innerException
    
    def has_inner_exception(self):
        return self.innerException is not __undefined__
    
    def set_inner_exception(self, inner_exception):
        self.innerException = inner_exception
        return self
    
    def clear_inner_exception(self):
        self.innerException = __undefined__
        return self
    
    def _serialize(self, me, override):
        DAPObject._serialize(self, me, [])
        
        # property: message
        if "message" not in override:
            if self.message is not __undefined__:
                self.serialize_scalar(me, "message", self.message)
        # property: typeName
        if "typeName" not in override:
            if self.typeName is not __undefined__:
                self.serialize_scalar(me, "typeName", self.typeName)
        # property: fullTypeName
        if "fullTypeName" not in override:
            if self.fullTypeName is not __undefined__:
                self.serialize_scalar(me, "fullTypeName", self.fullTypeName)
        # property: evaluateName
        if "evaluateName" not in override:
            if self.evaluateName is not __undefined__:
                self.serialize_scalar(me, "evaluateName", self.evaluateName)
        # property: stackTrace
        if "stackTrace" not in override:
            if self.stackTrace is not __undefined__:
                self.serialize_scalar(me, "stackTrace", self.stackTrace)
        # property: innerException
        if "innerException" not in override:
            if self.innerException is not __undefined__:
                self.serialize_scalar(me, "innerException", self.innerException, hint=DAPExceptionDetails)
    
    @classmethod
    def _deserialize(cls, args, kwargs, used_args, me, override):
        DAPObject._deserialize(args, kwargs, used_args, me, [])
        
        # property: message
        if "message" not in override:
            used_args.append("message")
            if me is not None and "message" in me:
                kwargs["message"] = cls.deserialize_scalar(me["message"])
        # property: typeName
        if "typeName" not in override:
            used_args.append("typeName")
            if me is not None and "typeName" in me:
                kwargs["type_name"] = cls.deserialize_scalar(me["typeName"])
        # property: fullTypeName
        if "fullTypeName" not in override:
            used_args.append("fullTypeName")
            if me is not None and "fullTypeName" in me:
                kwargs["full_type_name"] = cls.deserialize_scalar(me["fullTypeName"])
        # property: evaluateName
        if "evaluateName" not in override:
            used_args.append("evaluateName")
            if me is not None and "evaluateName" in me:
                kwargs["evaluate_name"] = cls.deserialize_scalar(me["evaluateName"])
        # property: stackTrace
        if "stackTrace" not in override:
            used_args.append("stackTrace")
            if me is not None and "stackTrace" in me:
                kwargs["stack_trace"] = cls.deserialize_scalar(me["stackTrace"])
        # property: innerException
        if "innerException" not in override:
            used_args.append("innerException")
            if me is not None and "innerException" in me:
                kwargs["inner_exception"] = cls.deserialize_scalar(me["innerException"], hint=DAPExceptionDetails)


@staticmethod
def _determine_root_factory(data):
    if data["type"] == "response" and data["command"] == "variables":
        return DAPVariablesResponse
    if data["type"] == "request" and data["command"] == "variables":
        return DAPVariablesRequest
    if data["type"] == "response" and data["command"] == "threads":
        return DAPThreadsResponse
    if data["type"] == "request" and data["command"] == "threads":
        return DAPThreadsRequest
    if data["type"] == "event" and data["event"] == "thread":
        return DAPThreadEvent
    if data["type"] == "event" and data["event"] == "terminated":
        return DAPTerminatedEvent
    if data["type"] == "response" and data["command"] == "launch":
        return DAPTerminateThreadsResponse
    if data["type"] == "request" and data["command"] == "terminateThreads":
        return DAPTerminateThreadsRequest
    if data["type"] == "response" and data["command"] == "terminate":
        return DAPTerminateResponse
    if data["type"] == "request" and data["command"] == "terminate":
        return DAPTerminateRequest
    if data["type"] == "event" and data["event"] == "stopped":
        return DAPStoppedEvent
    if data["type"] == "response" and data["command"] == "stepOut":
        return DAPStepOutResponse
    if data["type"] == "request" and data["command"] == "stepOut":
        return DAPStepOutRequest
    if data["type"] == "response" and data["command"] == "stepInTargets":
        return DAPStepInTargetsResponse
    if data["type"] == "request" and data["command"] == "stepInTargets":
        return DAPStepInTargetsRequest
    if data["type"] == "response" and data["command"] == "stepIn":
        return DAPStepInResponse
    if data["type"] == "request" and data["command"] == "stepIn":
        return DAPStepInRequest
    if data["type"] == "response" and data["command"] == "stepBack":
        return DAPStepBackResponse
    if data["type"] == "request" and data["command"] == "stepBack":
        return DAPStepBackRequest
    if data["type"] == "response" and data["command"] == "stackTrace":
        return DAPStackTraceResponse
    if data["type"] == "request" and data["command"] == "stackTrace":
        return DAPStackTraceRequest
    if data["type"] == "response" and data["command"] == "sourceReference":
        return DAPSourceResponse
    if data["type"] == "request" and data["command"] == "source":
        return DAPSourceRequest
    if data["type"] == "response" and data["command"] == "setVariable":
        return DAPSetVariableResponse
    if data["type"] == "request" and data["command"] == "setVariable":
        return DAPSetVariableRequest
    if data["type"] == "response" and data["command"] == "setStepGranularity":
        return DAPSetStepGranularityResponse
    if data["type"] == "request" and data["command"] == "setStepGranularity":
        return DAPSetStepGranularityRequest
    if data["type"] == "response" and data["command"] == "setFunctionBreakpoints":
        return DAPSetFunctionBreakpointsResponse
    if data["type"] == "request" and data["command"] == "setFunctionBreakpoints":
        return DAPSetFunctionBreakpointsRequest
    if data["type"] == "response" and data["command"] == "setExpression":
        return DAPSetExpressionResponse
    if data["type"] == "request" and data["command"] == "setExpression":
        return DAPSetExpressionRequest
    if data["type"] == "response" and data["command"] == "setExceptionBreakpoints":
        return DAPSetExceptionBreakpointsResponse
    if data["type"] == "request" and data["command"] == "setExceptionBreakpoints":
        return DAPSetExceptionBreakpointsRequest
    if data["type"] == "response" and data["command"] == "setDataBreakpoints":
        return DAPSetDataBreakpointsResponse
    if data["type"] == "request" and data["command"] == "setDataBreakpoints":
        return DAPSetDataBreakpointsRequest
    if data["type"] == "response" and data["command"] == "setBreakpoints":
        return DAPSetBreakpointsResponse
    if data["type"] == "request" and data["command"] == "setBreakpoints":
        return DAPSetBreakpointsRequest
    if data["type"] == "response" and data["command"] == "scopes":
        return DAPScopesResponse
    if data["type"] == "request" and data["command"] == "scopes":
        return DAPScopesRequest
    if data["type"] == "response" and data["command"] == "runInTerminal":
        return DAPRunInTerminalResponse
    if data["type"] == "request" and data["command"] == "runInTerminal":
        return DAPRunInTerminalRequest
    if data["type"] == "response" and data["command"] == "reverseContinue":
        return DAPReverseContinueResponse
    if data["type"] == "request" and data["command"] == "reverseContinue":
        return DAPReverseContinueRequest
    if data["type"] == "response" and data["command"] == "restart":
        return DAPRestartResponse
    if data["type"] == "request" and data["command"] == "restart":
        return DAPRestartRequest
    if data["type"] == "response" and data["command"] == "restartFrame":
        return DAPRestartFrameResponse
    if data["type"] == "request" and data["command"] == "restartFrame":
        return DAPRestartFrameRequest
    if data["type"] == "event" and data["event"] == "process":
        return DAPProcessEvent
    if data["type"] == "response" and data["command"] == "pause":
        return DAPPauseResponse
    if data["type"] == "request" and data["command"] == "pause":
        return DAPPauseRequest
    if data["type"] == "event" and data["event"] == "output":
        return DAPOutputEvent
    if data["type"] == "response" and data["command"] == "next":
        return DAPNextResponse
    if data["type"] == "request" and data["command"] == "next":
        return DAPNextRequest
    if data["type"] == "response" and data["command"] == "modules":
        return DAPModulesResponse
    if data["type"] == "request" and data["command"] == "modules":
        return DAPModulesRequest
    if data["type"] == "event" and data["event"] == "module":
        return DAPModuleEvent
    if data["type"] == "response" and data["command"] == "loadedSources":
        return DAPLoadedSourcesResponse
    if data["type"] == "request" and data["command"] == "loadedSources":
        return DAPLoadedSourcesRequest
    if data["type"] == "event" and data["event"] == "loadedSource":
        return DAPLoadedSourceEvent
    if data["type"] == "response" and data["command"] == "launch":
        return DAPLaunchResponse
    if data["type"] == "request" and data["command"] == "launch":
        return DAPLaunchRequest
    if data["type"] == "event" and data["event"] == "initialized":
        return DAPInitializedEvent
    if data["type"] == "response" and data["command"] == "initialize":
        return DAPInitializeResponse
    if data["type"] == "request" and data["command"] == "initialize":
        return DAPInitializeRequest
    if data["type"] == "response" and data["command"] == "gotoTargets":
        return DAPGotoTargetsResponse
    if data["type"] == "request" and data["command"] == "gotoTargets":
        return DAPGotoTargetsRequest
    if data["type"] == "response" and data["command"] == "goto":
        return DAPGotoResponse
    if data["type"] == "request" and data["command"] == "goto":
        return DAPGotoRequest
    if data["type"] == "event" and data["event"] == "exited":
        return DAPExitedEvent
    if data["type"] == "response" and data["command"] == "exceptionInfo":
        return DAPExceptionInfoResponse
    if data["type"] == "request" and data["command"] == "exceptionInfo":
        return DAPExceptionInfoRequest
    if data["type"] == "response" and data["command"] == "evaluate":
        return DAPEvaluateResponse
    if data["type"] == "request" and data["command"] == "evaluate":
        return DAPEvaluateRequest
    if data["type"] == "response" and data["command"] == "disconnect":
        return DAPDisconnectResponse
    if data["type"] == "request" and data["command"] == "disconnect":
        return DAPDisconnectRequest
    if data["type"] == "response" and data["command"] == "dataBreakpointInfo":
        return DAPDataBreakpointInfoResponse
    if data["type"] == "request" and data["command"] == "dataBreakpointInfo":
        return DAPDataBreakpointInfoRequest
    if data["type"] == "event" and data["event"] == "continued":
        return DAPContinuedEvent
    if data["type"] == "response" and data["command"] == "continue":
        return DAPContinueResponse
    if data["type"] == "request" and data["command"] == "continue":
        return DAPContinueRequest
    if data["type"] == "response" and data["command"] == "configurationDone":
        return DAPConfigurationDoneResponse
    if data["type"] == "request" and data["command"] == "configurationDone":
        return DAPConfigurationDoneRequest
    if data["type"] == "response" and data["command"] == "completions":
        return DAPCompletionsResponse
    if data["type"] == "request" and data["command"] == "completions":
        return DAPCompletionsRequest
    if data["type"] == "event" and data["event"] == "capabilities":
        return DAPCapabilitiesEvent
    if data["type"] == "event" and data["event"] == "breakpoint":
        return DAPBreakpointEvent
    if data["type"] == "response" and data["command"] == "attach":
        return DAPAttachResponse
    if data["type"] == "request" and data["command"] == "attach":
        return DAPAttachRequest
    raise ValueError("unknown entity to factory binding " + str(data))


DAPObject.determine_root_factory = _determine_root_factory


__all__ = _fix_all(['DAPContinuedEvent', 'DAPStepBackRequest', 'DAPSetFunctionBreakpointsResponseBody', 'DAPStackTraceResponse', 'DAPEvaluateRequest', 'DAPSetStepGranularityArguments', 'DAPModulesRequest', 'DAPStepInTargetsArguments', 'DAPFunctionBreakpoint', 'DAPProtocolMessage', 'DAPRequest', 'DAPTerminateArguments', 'DAPThreadsResponseBody', 'DAPScopesArguments', 'DAPInitializeResponse', 'DAPModulesResponseBody', 'DAPLoadedSourcesResponse', 'DAPRunInTerminalRequestArgumentsEnv', 'DAPConfigurationDoneRequest', 'DAPTerminateThreadsArguments', 'DAPDisconnectRequest', 'DAPConfigurationDoneResponse', 'DAPSetDataBreakpointsResponseBody', 'DAPLoadedSourcesArguments', 'DAPModuleEvent', 'DAPDisconnectArguments', 'DAPLoadedSourcesRequest', 'DAPAttachRequest', 'DAPThreadEvent', 'DAPModuleEventBody', 'DAPStepInTargetsResponseBody', 'DAPPauseRequest', 'DAPPauseArguments', 'DAPCapabilitiesEventBody', 'DAPInitializeRequestArguments', 'DAPExceptionDetails', 'DAPOutputEventBody', 'DAPStepBackArguments', 'DAPExceptionOptions', 'DAPInitializeRequest', 'DAPEvaluateResponseBody', 'DAPBreakpoint', 'DAPCompletionItem', 'DAPColumnDescriptor', 'DAPStepInTarget', 'DAPLoadedSourceEvent', 'DAPTerminatedEventBody', 'DAPVariablesRequest', 'DAPStackTraceResponseBody', 'DAPStoppedEvent', 'DAPCapabilities', 'DAPGotoTargetsResponseBody', 'DAPAttachResponse', 'DAPExitedEventBody', 'DAPGotoArguments', 'DAPStepBackResponse', 'DAPExceptionInfoArguments', 'DAPContinueResponseBody', 'DAPThreadEventBody', 'DAPContinuedEventBody', 'DAPExceptionInfoResponseBody', 'DAPVariablesResponseBody', 'DAPErrorResponse', 'DAPConfigurationDoneArguments', 'DAPChecksumAlgorithm', 'DAPRunInTerminalResponse', 'DAPRunInTerminalRequestArguments', 'DAPProcessEventBody', 'DAPSetExceptionBreakpointsRequest', 'DAPStepInTargetsResponse', 'DAPContinueRequest', 'DAPSetExpressionRequest', 'DAPRestartArguments', 'DAPVariablesArguments', 'DAPEvaluateArguments', 'DAPVariablesResponse', 'DAPDataBreakpointInfoResponseBody', 'DAPSourceRequest', 'DAPReverseContinueRequest', 'DAPGotoTargetsArguments', 'DAPDisconnectResponse', 'DAPContinueArguments', 'DAPGotoTargetsRequest', 'DAPSourceArguments', 'DAPSetVariableArguments', 'DAPDataBreakpointAccessType', 'DAPInitializedEvent', 'DAPSetDataBreakpointsResponse', 'DAPNextRequest', 'DAPScopesResponse', 'DAPMessage', 'DAPRestartFrameRequest', 'DAPCompletionItemType', 'DAPNextArguments', 'DAPVariablePresentationHint', 'DAPStepInRequest', 'DAPGotoResponse', 'DAPSource', 'DAPEvent', 'DAPGotoTargetsResponse', 'DAPStepInArguments', 'DAPTerminatedEvent', 'DAPExceptionBreakMode', 'DAPSetBreakpointsResponseBody', 'DAPLoadedSourceEventBody', 'DAPStepOutRequest', 'DAPThreadsResponse', 'DAPModulesArguments', 'DAPSetExpressionResponseBody', 'DAPGotoTarget', 'DAPSetExceptionBreakpointsArguments', 'DAPTerminateResponse', 'DAPDataBreakpointInfoRequest', 'DAPScope', 'DAPLaunchRequest', 'DAPSetFunctionBreakpointsResponse', 'DAPDataBreakpointInfoResponse', 'DAPStackFrameFormat', 'DAPSetBreakpointsArguments', 'DAPCompletionsRequest', 'DAPSetExpressionResponse', 'DAPSetStepGranularityResponse', 'DAPOutputEvent', 'DAPStackTraceRequest', 'DAPEvaluateResponse', 'DAPValueFormat', 'DAPSetFunctionBreakpointsArguments', 'DAPRestartFrameResponse', 'DAPLaunchResponse', 'DAPGotoRequest', 'DAPScopesRequest', 'DAPRestartResponse', 'DAPExceptionInfoRequest', 'DAPStepOutResponse', 'DAPDataBreakpointInfoArguments', 'DAPSetDataBreakpointsRequest', 'DAPRestartFrameArguments', 'DAPModule', 'DAPSubsource', 'DAPThread', 'DAPErrorResponseBody', 'DAPScopesResponseBody', 'DAPCompletionsArguments', 'DAPSourceResponse', 'DAPNextResponse', 'DAPDataBreakpoint', 'DAPSourceBreakpoint', 'DAPStepInResponse', 'DAPExitedEvent', 'DAPStackFrame', 'DAPModulesViewDescriptor', 'DAPSetExceptionBreakpointsResponse', 'DAPVariable', 'DAPSetVariableResponse', 'DAPSetStepGranularityRequest', 'DAPContinueResponse', 'DAPSetStepGranularityResponseBody', 'DAPSetExpressionArguments', 'DAPSetBreakpointsRequest', 'DAPStackTraceArguments', 'DAPCompletionsResponse', 'DAPReverseContinueArguments', 'DAPRunInTerminalRequest', 'DAPProcessEvent', 'DAPExceptionPathSegment', 'DAPLaunchRequestArguments', 'DAPStepInTargetsRequest', 'DAPSetVariableRequest', 'DAPReverseContinueResponse', 'DAPExceptionInfoResponse', 'DAPTerminateThreadsResponse', 'DAPChecksum', 'DAPStepOutArguments', 'DAPLoadedSourcesResponseBody', 'DAPAttachRequestArguments', 'DAPRunInTerminalResponseBody', 'DAPPauseResponse', 'DAPSetVariableResponseBody', 'DAPSubsourceElement', 'DAPTerminateRequest', 'DAPExceptionBreakpointsFilter', 'DAPSetDataBreakpointsArguments', 'DAPSetBreakpointsResponse', 'DAPCapabilitiesEvent', 'DAPResponse', 'DAPMessageVariables', 'DAPBreakpointEventBody', 'DAPSourceResponseBody', 'DAPTerminateThreadsRequest', 'DAPCompletionsResponseBody', 'DAPBreakpointEvent', 'DAPRestartRequest', 'DAPSetFunctionBreakpointsRequest', 'DAPModulesResponse', 'DAPThreadsRequest', 'DAPStoppedEventBody'])
